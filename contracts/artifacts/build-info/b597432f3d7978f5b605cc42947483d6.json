{
	"id": "b597432f3d7978f5b605cc42947483d6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/MyToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract MyToken is Initializable, ERC721Upgradeable, ERC721PausableUpgradeable, OwnableUpgradeable, ERC721BurnableUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner) initializer public {\n        __ERC721_init(\"MyToken\", \"MTK\");\n        __ERC721Pausable_init();\n        __Ownable_init(initialOwner);\n        __ERC721Burnable_init();\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function safeMint(address to, uint256 tokenId) public onlyOwner {\n        _safeMint(to, tokenId);\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function _update(address to, uint256 tokenId, address auth)\n        internal\n        override(ERC721Upgradeable, ERC721PausableUpgradeable)\n        returns (address)\n    {\n        return super._update(to, tokenId, auth);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721Upgradeable} from \"../ERC721Upgradeable.sol\";\nimport {ContextUpgradeable} from \"../../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        _update(address(0), tokenId, _msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721Upgradeable} from \"../ERC721Upgradeable.sol\";\nimport {PausableUpgradeable} from \"../../../utils/PausableUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\n    function __ERC721Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {ERC721-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal virtual override whenNotPaused returns (address) {\n        return super._update(to, tokenId, auth);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {ERC165Upgradeable} from \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport {IERC721Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\n    struct ERC721Storage {\n        // Token name\n        string _name;\n\n        // Token symbol\n        string _symbol;\n\n        mapping(uint256 tokenId => address) _owners;\n\n        mapping(address owner => uint256) _balances;\n\n        mapping(uint256 tokenId => address) _tokenApprovals;\n\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC721\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\n\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\n        assembly {\n            $.slot := ERC721StorageLocation\n        }\n    }\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC721Storage storage $ = _getERC721Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        ERC721Storage storage $ = _getERC721Storage();\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return $._balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        ERC721Storage storage $ = _getERC721Storage();\n        unchecked {\n            $._balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        ERC721Storage storage $ = _getERC721Storage();\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                $._balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                $._balances[to] += 1;\n            }\n        }\n\n        $._owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        ERC721Storage storage $ = _getERC721Storage();\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        $._tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        ERC721Storage storage $ = _getERC721Storage();\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        $._operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
				"ERC721Upgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":\"ERC721Upgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"keccak256\":\"0x48efca78ce4e1a9f74d3ca8539bb53d04b116e507c10cd9e0df6105b8a6ae420\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d9f5e03898857a187d99bd0766daf725abe87f454db82ac6286544d8cb4532f\",\"dweb:/ipfs/QmXFNXaNuxvGCLNL9xAFbvEgRmXDuxw4Ukf9tddiAHDq59\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fa2e61141c602510bcd2cd936ed9561922ac8772a9b9c9a9db091a74e354a45\",\"dweb:/ipfs/QmcHQDDoEBwJmwUbzoVkytvJsBx3KVHYFFnDkvRGWh9Wmh\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
				"ERC721BurnableUpgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC721 Token that can be burned (destroyed).",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"title": "ERC721 Burnable Token",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 Token that can be burned (destroyed).\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"ERC721 Burnable Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":\"ERC721BurnableUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"keccak256\":\"0x48efca78ce4e1a9f74d3ca8539bb53d04b116e507c10cd9e0df6105b8a6ae420\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d9f5e03898857a187d99bd0766daf725abe87f454db82ac6286544d8cb4532f\",\"dweb:/ipfs/QmXFNXaNuxvGCLNL9xAFbvEgRmXDuxw4Ukf9tddiAHDq59\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"keccak256\":\"0x5d1215064b3e114d329b1544cf65d33404f63e7841184e55267f4d8b114608e6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1699c6ecb0511cb626f40814463aaf4e5c8c36399689e0f3de7561f227a5b50a\",\"dweb:/ipfs/QmQDxPddEsajUEPDRsfPekEhBRjmBTepYALuTwdM7h6mRz\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fa2e61141c602510bcd2cd936ed9561922ac8772a9b9c9a9db091a74e354a45\",\"dweb:/ipfs/QmcHQDDoEBwJmwUbzoVkytvJsBx3KVHYFFnDkvRGWh9Wmh\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol": {
				"ERC721PausableUpgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC721 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"paused()": "5c975abb",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":\"ERC721PausableUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"keccak256\":\"0x48efca78ce4e1a9f74d3ca8539bb53d04b116e507c10cd9e0df6105b8a6ae420\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d9f5e03898857a187d99bd0766daf725abe87f454db82ac6286544d8cb4532f\",\"dweb:/ipfs/QmXFNXaNuxvGCLNL9xAFbvEgRmXDuxw4Ukf9tddiAHDq59\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":{\"keccak256\":\"0x6a7330cb4ed2bea90bed97483d55f11ccf98af6c1dd1e2b1739040b679ff9545\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9a274337315d1f332ba80f7cfbe5243267db6a015514c5a0e7898219ab51fb52\",\"dweb:/ipfs/QmTZdtdWgVs7VmP1dUW4idVpLK4pVFS6sfoi2pQCnaKgSX\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85ad36d5cc7e190e1ee6c94b24659bc3a31396c4c36b6ffa6a509e10661f8007\",\"dweb:/ipfs/QmPFyc4zMh2zo6YWZt25gjm3YdR2hg6wGETaWw256fMmJJ\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fa2e61141c602510bcd2cd936ed9561922ac8772a9b9c9a9db091a74e354a45\",\"dweb:/ipfs/QmcHQDDoEBwJmwUbzoVkytvJsBx3KVHYFFnDkvRGWh9Wmh\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
				"PausableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85ad36d5cc7e190e1ee6c94b24659bc3a31396c4c36b6ffa6a509e10661f8007\",\"dweb:/ipfs/QmPFyc4zMh2zo6YWZt25gjm3YdR2hg6wGETaWw256fMmJJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
				"ERC165Upgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fa2e61141c602510bcd2cd936ed9561922ac8772a9b9c9a9db091a74e354a45\",\"dweb:/ipfs/QmcHQDDoEBwJmwUbzoVkytvJsBx3KVHYFFnDkvRGWh9Wmh\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202f16324ec2eab48f4026b0a3390ff328f7839bb31295ad3f723794aa24ff365664736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212202f16324ec2eab48f4026b0a3390ff328f7839bb31295ad3f723794aa24ff365664736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F AND ORIGIN 0x4E 0xC2 0xEA 0xB4 DUP16 BLOCKHASH 0x26 0xB0 LOG3 CODECOPY 0xF RETURN 0x28 0xF7 DUP4 SWAP12 0xB3 SLT SWAP6 0xAD EXTCODEHASH PUSH19 0x3794AA24FF365664736F6C6343000814003300 ",
							"sourceMap": "251:2847:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212202f16324ec2eab48f4026b0a3390ff328f7839bb31295ad3f723794aa24ff365664736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F AND ORIGIN 0x4E 0xC2 0xEA 0xB4 DUP16 BLOCKHASH 0x26 0xB0 LOG3 CODECOPY 0xF RETURN 0x28 0xF7 DUP4 SWAP12 0xB3 SLT SWAP6 0xAD EXTCODEHASH PUSH19 0x3794AA24FF365664736F6C6343000814003300 ",
							"sourceMap": "251:2847:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202f16324ec2eab48f4026b0a3390ff328f7839bb31295ad3f723794aa24ff365664736f6c63430008140033",
									".code": [
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204a90bcf65ffb48e9c51d3503f33f51a10bd9a2c31b2d95cf873206fc780da2d364736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212204a90bcf65ffb48e9c51d3503f33f51a10bd9a2c31b2d95cf873206fc780da2d364736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A SWAP1 0xBC 0xF6 PUSH0 0xFB BASEFEE 0xE9 0xC5 SAR CALLDATALOAD SUB RETURN EXTCODEHASH MLOAD LOG1 SIGNEXTEND 0xD9 LOG2 0xC3 SHL 0x2D SWAP6 0xCF DUP8 ORIGIN MOD 0xFC PUSH25 0xDA2D364736F6C634300081400330000000000000000000000 ",
							"sourceMap": "203:14914:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212204a90bcf65ffb48e9c51d3503f33f51a10bd9a2c31b2d95cf873206fc780da2d364736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A SWAP1 0xBC 0xF6 PUSH0 0xFB BASEFEE 0xE9 0xC5 SAR CALLDATALOAD SUB RETURN EXTCODEHASH MLOAD LOG1 SIGNEXTEND 0xD9 LOG2 0xC3 SHL 0x2D SWAP6 0xCF DUP8 ORIGIN MOD 0xFC PUSH25 0xDA2D364736F6C634300081400330000000000000000000000 ",
							"sourceMap": "203:14914:14:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204a90bcf65ffb48e9c51d3503f33f51a10bd9a2c31b2d95cf873206fc780da2d364736f6c63430008140033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 14
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220044fef6072ee027e05d8404bd9cda4f0cf185bbbfa2c422bd29b8b68644a106364736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220044fef6072ee027e05d8404bd9cda4f0cf185bbbfa2c422bd29b8b68644a106364736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV 0x4F 0xEF PUSH1 0x72 0xEE MUL PUSH31 0x5D8404BD9CDA4F0CF185BBBFA2C422BD29B8B68644A106364736F6C634300 ADDMOD EQ STOP CALLER ",
							"sourceMap": "216:1047:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220044fef6072ee027e05d8404bd9cda4f0cf185bbbfa2c422bd29b8b68644a106364736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV 0x4F 0xEF PUSH1 0x72 0xEE MUL PUSH31 0x5D8404BD9CDA4F0CF185BBBFA2C422BD29B8B68644A106364736F6C634300 ADDMOD EQ STOP CALLER ",
							"sourceMap": "216:1047:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220044fef6072ee027e05d8404bd9cda4f0cf185bbbfa2c422bd29b8b68644a106364736f6c63430008140033",
									".code": [
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/MyToken.sol": {
				"MyToken": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
							},
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/MyToken.sol\":492:1495  contract MyToken is Initializable, ERC721Upgradeable, ERC721PausableUpgradeable, OwnableUpgradeable, ERC721BurnableUpgradeable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/MyToken.sol\":678:731  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/MyToken.sol\":702:724  _disableInitializers() */\n  tag_4\n    /* \"contracts/MyToken.sol\":702:722  _disableInitializers */\n  shl(0x20, tag_5)\n    /* \"contracts/MyToken.sol\":702:724  _disableInitializers() */\n  0x20\n  shr\n  jump\t// in\ntag_4:\n    /* \"contracts/MyToken.sol\":492:1495  contract MyToken is Initializable, ERC721Upgradeable, ERC721PausableUpgradeable, OwnableUpgradeable, ERC721BurnableUpgradeable {... */\n  jump(tag_6)\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7711:8133  function _disableInitializers() internal virtual {... */\ntag_5:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7826:7856  InitializableStorage storage $ */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7859:7885  _getInitializableStorage() */\n  tag_8\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7859:7883  _getInitializableStorage */\n  shl(0x20, tag_9)\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7859:7885  _getInitializableStorage() */\n  0x20\n  shr\n  jump\t// in\ntag_8:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7826:7885  InitializableStorage storage $ = _getInitializableStorage() */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7900:7901  $ */\n  dup1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7900:7915  $._initializing */\n  0x00\n  add\n  0x08\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xff\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7896:7972  if ($._initializing) {... */\n  iszero\n  tag_10\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7938:7961  InvalidInitialization() */\n  mload(0x40)\n  0xf92ee8a900000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7896:7972  if ($._initializing) {... */\ntag_10:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8003:8019  type(uint64).max */\n  0xffffffffffffffff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7985:8019  $._initialized != type(uint64).max */\n  dup1\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7985:7986  $ */\n  dup2\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7985:7999  $._initialized */\n  0x00\n  add\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7985:8019  $._initialized != type(uint64).max */\n  0xffffffffffffffff\n  and\n  eq\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7981:8127  if ($._initialized != type(uint64).max) {... */\n  tag_11\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8052:8068  type(uint64).max */\n  0xffffffffffffffff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8035:8036  $ */\n  dup2\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8035:8049  $._initialized */\n  0x00\n  add\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8035:8068  $._initialized = type(uint64).max */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8087:8116  Initialized(type(uint64).max) */\n  0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8099:8115  type(uint64).max */\n  0xffffffffffffffff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8087:8116  Initialized(type(uint64).max) */\n  mload(0x40)\n  tag_12\n  swap2\n  swap1\n  tag_13\n  jump\t// in\ntag_12:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7981:8127  if ($._initialized != type(uint64).max) {... */\ntag_11:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7760:8133  {... */\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7711:8133  function _disableInitializers() internal virtual {... */\n  jump\t// out\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\ntag_9:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8795:8825  InitializableStorage storage $ */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8860:8891  $.slot := INITIALIZABLE_STORAGE */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":7:108   */\ntag_15:\n    /* \"#utility.yul\":43:50   */\n  0x00\n    /* \"#utility.yul\":83:101   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":76:81   */\n  dup3\n    /* \"#utility.yul\":72:102   */\n  and\n    /* \"#utility.yul\":61:102   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:108   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":114:229   */\ntag_16:\n    /* \"#utility.yul\":199:222   */\n  tag_20\n    /* \"#utility.yul\":216:221   */\n  dup2\n    /* \"#utility.yul\":199:222   */\n  tag_15\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":194:197   */\n  dup3\n    /* \"#utility.yul\":187:223   */\n  mstore\n    /* \"#utility.yul\":114:229   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":235:453   */\ntag_13:\n    /* \"#utility.yul\":326:330   */\n  0x00\n    /* \"#utility.yul\":364:366   */\n  0x20\n    /* \"#utility.yul\":353:362   */\n  dup3\n    /* \"#utility.yul\":349:367   */\n  add\n    /* \"#utility.yul\":341:367   */\n  swap1\n  pop\n    /* \"#utility.yul\":377:446   */\n  tag_22\n    /* \"#utility.yul\":443:444   */\n  0x00\n    /* \"#utility.yul\":432:441   */\n  dup4\n    /* \"#utility.yul\":428:445   */\n  add\n    /* \"#utility.yul\":419:425   */\n  dup5\n    /* \"#utility.yul\":377:446   */\n  tag_16\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":235:453   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/MyToken.sol\":492:1495  contract MyToken is Initializable, ERC721Upgradeable, ERC721PausableUpgradeable, OwnableUpgradeable, ERC721BurnableUpgradeable {... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/MyToken.sol\":492:1495  contract MyToken is Initializable, ERC721Upgradeable, ERC721PausableUpgradeable, OwnableUpgradeable, ERC721BurnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xa22cb465\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xc4d66de8\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xa1448194\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_25:\n      dup1\n      0x3f4ba83a\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2674:2985  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {... */\n    tag_3:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3546:3692  function name() public view virtual returns (string memory) {... */\n    tag_4:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4792:4946  function getApproved(uint256 tokenId) public view virtual returns (address) {... */\n    tag_5:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_42\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4618:4731  function approve(address to, uint256 tokenId) public virtual {... */\n    tag_6:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_45\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n    tag_44:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5495:6073  function transferFrom(address from, address to, uint256 tokenId) public virtual {... */\n    tag_7:\n      tag_48\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n    tag_48:\n      stop\n        /* \"contracts/MyToken.sol\":1021:1084  function unpause() public onlyOwner {... */\n    tag_8:\n      tag_52\n      tag_53\n      jump\t// in\n    tag_52:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6139:6271  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n    tag_9:\n      tag_54\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_55\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n    tag_54:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":876:1190  function burn(uint256 tokenId) public virtual {... */\n    tag_10:\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n    tag_57:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2692:2837  function paused() public view virtual returns (bool) {... */\n    tag_11:\n      tag_60\n      tag_61\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3366:3484  function ownerOf(uint256 tokenId) public view virtual returns (address) {... */\n    tag_12:\n      tag_63\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_64\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_64:\n      tag_65\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      tag_66\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3044:3309  function balanceOf(address owner) public view virtual returns (uint256) {... */\n    tag_13:\n      tag_67\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_68\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_68:\n      tag_70\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_71\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_73\n      tag_74\n      jump\t// in\n    tag_73:\n      stop\n        /* \"contracts/MyToken.sol\":956:1015  function pause() public onlyOwner {... */\n    tag_15:\n      tag_75\n      tag_76\n      jump\t// in\n    tag_75:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n    tag_16:\n      tag_77\n      tag_78\n      jump\t// in\n    tag_77:\n      mload(0x40)\n      tag_79\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3756:3906  function symbol() public view virtual returns (string memory) {... */\n    tag_17:\n      tag_80\n      tag_81\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      tag_82\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_82:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/MyToken.sol\":1090:1193  function safeMint(address to, uint256 tokenId) public onlyOwner {... */\n    tag_18:\n      tag_83\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_84\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_84:\n      tag_85\n      jump\t// in\n    tag_83:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5013:5157  function setApprovalForAll(address operator, bool approved) public virtual {... */\n    tag_19:\n      tag_86\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n      tag_89\n      jump\t// in\n    tag_86:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6337:6545  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {... */\n    tag_20:\n      tag_90\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_91\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n      tag_93\n      jump\t// in\n    tag_90:\n      stop\n        /* \"contracts/MyToken.sol\":737:950  function initialize(address initialOwner) initializer public {... */\n    tag_21:\n      tag_94\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_95\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_95:\n      tag_96\n      jump\t// in\n    tag_94:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3972:4227  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {... */\n    tag_22:\n      tag_97\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_98\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_98:\n      tag_99\n      jump\t// in\n    tag_97:\n      mload(0x40)\n      tag_100\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5223:5433  function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {... */\n    tag_23:\n      tag_101\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_102\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_102:\n      tag_104\n      jump\t// in\n    tag_101:\n      mload(0x40)\n      tag_105\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_105:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_24:\n      tag_106\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_107\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_107:\n      tag_108\n      jump\t// in\n    tag_106:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2674:2985  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {... */\n    tag_31:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2787:2791  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2837:2862  type(IERC721).interfaceId */\n      0x80ac58cd00000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2822:2862  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2822:2833  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2822:2862  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2822:2926  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_110\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2893:2926  type(IERC721Metadata).interfaceId */\n      0x5b5e139f00000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2878:2926  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2878:2889  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2878:2926  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2822:2926  interfaceId == type(IERC721).interfaceId ||... */\n    tag_110:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2822:2978  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_111\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2942:2978  super.supportsInterface(interfaceId) */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2966:2977  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2942:2965  super.supportsInterface */\n      tag_113\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2942:2978  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_112:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2822:2978  interfaceId == type(IERC721).interfaceId ||... */\n    tag_111:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2803:2978  return... */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2674:2985  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3546:3692  function name() public view virtual returns (string memory) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3591:3604  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3616:3639  ERC721Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3642:3661  _getERC721Storage() */\n      tag_115\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3642:3659  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3642:3661  _getERC721Storage() */\n      jump\t// in\n    tag_115:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3616:3661  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3678:3679  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3678:3685  $._name */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3671:3685  return $._name */\n      dup1\n      sload\n      tag_117\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_119\n      swap1\n      tag_118\n      jump\t// in\n    tag_119:\n      dup1\n      iszero\n      tag_120\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_121\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_120)\n    tag_121:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_122:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_122\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_120:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3546:3692  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4792:4946  function getApproved(uint256 tokenId) public view virtual returns (address) {... */\n    tag_41:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4859:4866  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4878:4900  _requireOwned(tokenId) */\n      tag_124\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4892:4899  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4878:4891  _requireOwned */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4878:4900  _requireOwned(tokenId) */\n      jump\t// in\n    tag_124:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4918:4939  _getApproved(tokenId) */\n      tag_126\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4931:4938  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4918:4930  _getApproved */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4918:4939  _getApproved(tokenId) */\n      jump\t// in\n    tag_126:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4911:4939  return _getApproved(tokenId) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4792:4946  function getApproved(uint256 tokenId) public view virtual returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4618:4731  function approve(address to, uint256 tokenId) public virtual {... */\n    tag_47:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4689:4724  _approve(to, tokenId, _msgSender()) */\n      tag_129\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4698:4700  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4702:4709  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4711:4723  _msgSender() */\n      tag_130\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4711:4721  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4711:4723  _msgSender() */\n      jump\t// in\n    tag_130:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4689:4697  _approve */\n      tag_132\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4689:4724  _approve(to, tokenId, _msgSender()) */\n      jump\t// in\n    tag_129:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4618:4731  function approve(address to, uint256 tokenId) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5495:6073  function transferFrom(address from, address to, uint256 tokenId) public virtual {... */\n    tag_51:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5603:5604  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5589:5605  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5589:5591  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5589:5605  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5585:5672  if (to == address(0)) {... */\n      tag_134\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5658:5659  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5628:5661  ERC721InvalidReceiver(address(0)) */\n      mload(0x40)\n      0x64a0ae9200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5585:5672  if (to == address(0)) {... */\n    tag_134:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5890:5911  address previousOwner */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5914:5948  _update(to, tokenId, _msgSender()) */\n      tag_136\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5922:5924  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5926:5933  tokenId */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5935:5947  _msgSender() */\n      tag_137\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5935:5945  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5935:5947  _msgSender() */\n      jump\t// in\n    tag_137:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5914:5921  _update */\n      tag_138\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5914:5948  _update(to, tokenId, _msgSender()) */\n      jump\t// in\n    tag_136:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5890:5948  address previousOwner = _update(to, tokenId, _msgSender()) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5979:5983  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5962:5983  previousOwner != from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5962:5975  previousOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5962:5983  previousOwner != from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5958:6067  if (previousOwner != from) {... */\n      tag_139\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6027:6031  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6033:6040  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6042:6055  previousOwner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6006:6056  ERC721IncorrectOwner(from, tokenId, previousOwner) */\n      mload(0x40)\n      0x64283d7b00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_141\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5958:6067  if (previousOwner != from) {... */\n    tag_139:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5575:6073  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5495:6073  function transferFrom(address from, address to, uint256 tokenId) public virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/MyToken.sol\":1021:1084  function unpause() public onlyOwner {... */\n    tag_53:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_143\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_144\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_143:\n        /* \"contracts/MyToken.sol\":1067:1077  _unpause() */\n      tag_146\n        /* \"contracts/MyToken.sol\":1067:1075  _unpause */\n      tag_147\n        /* \"contracts/MyToken.sol\":1067:1077  _unpause() */\n      jump\t// in\n    tag_146:\n        /* \"contracts/MyToken.sol\":1021:1084  function unpause() public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6139:6271  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6225:6264  safeTransferFrom(from, to, tokenId, \"\") */\n      tag_149\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6242:6246  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6248:6250  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6252:6259  tokenId */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6225:6264  safeTransferFrom(from, to, tokenId, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6225:6241  safeTransferFrom */\n      tag_93\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6225:6264  safeTransferFrom(from, to, tokenId, \"\") */\n      jump\t// in\n    tag_149:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6139:6271  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":876:1190  function burn(uint256 tokenId) public virtual {... */\n    tag_59:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":1141:1183  _update(address(0), tokenId, _msgSender()) */\n      tag_151\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":1157:1158  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":1161:1168  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":1170:1182  _msgSender() */\n      tag_152\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":1170:1180  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":1170:1182  _msgSender() */\n      jump\t// in\n    tag_152:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":1141:1148  _update */\n      tag_138\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":1141:1183  _update(address(0), tokenId, _msgSender()) */\n      jump\t// in\n    tag_151:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":876:1190  function burn(uint256 tokenId) public virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2692:2837  function paused() public view virtual returns (bool) {... */\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2739:2743  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2755:2780  PausableStorage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2783:2804  _getPausableStorage() */\n      tag_154\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2783:2802  _getPausableStorage */\n      tag_155\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2783:2804  _getPausableStorage() */\n      jump\t// in\n    tag_154:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2755:2804  PausableStorage storage $ = _getPausableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2821:2822  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2821:2830  $._paused */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2814:2830  return $._paused */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2692:2837  function paused() public view virtual returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3366:3484  function ownerOf(uint256 tokenId) public view virtual returns (address) {... */\n    tag_65:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3429:3436  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3455:3477  _requireOwned(tokenId) */\n      tag_157\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3469:3476  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3455:3468  _requireOwned */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3455:3477  _requireOwned(tokenId) */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3448:3477  return _requireOwned(tokenId) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3366:3484  function ownerOf(uint256 tokenId) public view virtual returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3044:3309  function balanceOf(address owner) public view virtual returns (uint256) {... */\n    tag_70:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3107:3114  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3126:3149  ERC721Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3152:3171  _getERC721Storage() */\n      tag_159\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3152:3169  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3152:3171  _getERC721Storage() */\n      jump\t// in\n    tag_159:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3126:3171  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3202:3203  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3185:3204  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3185:3190  owner */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3185:3204  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3181:3268  if (owner == address(0)) {... */\n      tag_160\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3254:3255  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3227:3257  ERC721InvalidOwner(address(0)) */\n      mload(0x40)\n      0x89c62b6400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_161\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_161:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3181:3268  if (owner == address(0)) {... */\n    tag_160:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3284:3285  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3284:3295  $._balances */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3284:3302  $._balances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3296:3301  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3284:3302  $._balances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3277:3302  return $._balances[owner] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3044:3309  function balanceOf(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_74:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_163\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_144\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_163:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      tag_165\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3246:3247  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3237  _transferOwnership */\n      tag_166\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_165:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/MyToken.sol\":956:1015  function pause() public onlyOwner {... */\n    tag_76:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_168\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_144\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_168:\n        /* \"contracts/MyToken.sol\":1000:1008  _pause() */\n      tag_170\n        /* \"contracts/MyToken.sol\":1000:1006  _pause */\n      tag_171\n        /* \"contracts/MyToken.sol\":1000:1008  _pause() */\n      jump\t// in\n    tag_170:\n        /* \"contracts/MyToken.sol\":956:1015  function pause() public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2487:2494  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2506:2530  OwnableStorage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2533:2553  _getOwnableStorage() */\n      tag_173\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2533:2551  _getOwnableStorage */\n      tag_174\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2533:2553  _getOwnableStorage() */\n      jump\t// in\n    tag_173:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2506:2553  OwnableStorage storage $ = _getOwnableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2570:2571  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2570:2578  $._owner */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2563:2578  return $._owner */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3756:3906  function symbol() public view virtual returns (string memory) {... */\n    tag_81:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3803:3816  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3828:3851  ERC721Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3854:3873  _getERC721Storage() */\n      tag_176\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3854:3871  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3854:3873  _getERC721Storage() */\n      jump\t// in\n    tag_176:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3828:3873  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3890:3891  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3890:3899  $._symbol */\n      0x01\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3883:3899  return $._symbol */\n      dup1\n      sload\n      tag_177\n      swap1\n      tag_118\n      jump\t// in\n    tag_177:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_178\n      swap1\n      tag_118\n      jump\t// in\n    tag_178:\n      dup1\n      iszero\n      tag_179\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_180\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_179)\n    tag_180:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_181:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_181\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_179:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3756:3906  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/MyToken.sol\":1090:1193  function safeMint(address to, uint256 tokenId) public onlyOwner {... */\n    tag_85:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_183\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_144\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_183:\n        /* \"contracts/MyToken.sol\":1164:1186  _safeMint(to, tokenId) */\n      tag_185\n        /* \"contracts/MyToken.sol\":1174:1176  to */\n      dup3\n        /* \"contracts/MyToken.sol\":1178:1185  tokenId */\n      dup3\n        /* \"contracts/MyToken.sol\":1164:1173  _safeMint */\n      tag_186\n        /* \"contracts/MyToken.sol\":1164:1186  _safeMint(to, tokenId) */\n      jump\t// in\n    tag_185:\n        /* \"contracts/MyToken.sol\":1090:1193  function safeMint(address to, uint256 tokenId) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5013:5157  function setApprovalForAll(address operator, bool approved) public virtual {... */\n    tag_89:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5098:5150  _setApprovalForAll(_msgSender(), operator, approved) */\n      tag_188\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5117:5129  _msgSender() */\n      tag_189\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5117:5127  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5117:5129  _msgSender() */\n      jump\t// in\n    tag_189:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5131:5139  operator */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5141:5149  approved */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5098:5116  _setApprovalForAll */\n      tag_190\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5098:5150  _setApprovalForAll(_msgSender(), operator, approved) */\n      jump\t// in\n    tag_188:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5013:5157  function setApprovalForAll(address operator, bool approved) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6337:6545  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {... */\n    tag_93:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6450:6481  transferFrom(from, to, tokenId) */\n      tag_192\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6463:6467  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6469:6471  to */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6473:6480  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6450:6462  transferFrom */\n      tag_51\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6450:6481  transferFrom(from, to, tokenId) */\n      jump\t// in\n    tag_192:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6491:6538  _checkOnERC721Received(from, to, tokenId, data) */\n      tag_193\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6514:6518  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6520:6522  to */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6524:6531  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6533:6537  data */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6491:6513  _checkOnERC721Received */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6491:6538  _checkOnERC721Received(from, to, tokenId, data) */\n      jump\t// in\n    tag_193:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":6337:6545  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/MyToken.sol\":737:950  function initialize(address initialOwner) initializer public {... */\n    tag_96:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4188  InitializableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      tag_196\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4215  _getInitializableStorage */\n      tag_197\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      jump\t// in\n    tag_196:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4217  InitializableStorage storage $ = _getInitializableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4279:4298  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4303  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      0x00\n      add\n      0x08\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4279:4317  bool isTopLevelCall = !$._initializing */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4327:4345  uint64 initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4348:4349  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4348:4362  $._initialized */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4327:4362  uint64 initialized = $._initialized */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4706:4723  bool initialSetup */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4741:4742  0 */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4737  initialized */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4742  initialized == 0 */\n      0xffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n      dup1\n      iszero\n      tag_198\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4746:4760  isTopLevelCall */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n    tag_198:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4706:4760  bool initialSetup = initialized == 0 && isTopLevelCall */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4770:4787  bool construction */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4805:4806  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4801  initialized */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4806  initialized == 1 */\n      0xffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n      dup1\n      iszero\n      tag_199\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4839:4840  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4818:4822  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4810:4835  address(this).code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4810:4840  address(this).code.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n    tag_199:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4770:4840  bool construction = initialized == 1 && address(this).code.length == 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4856:4868  initialSetup */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4868  !initialSetup */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n      dup1\n      iszero\n      tag_200\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4873:4885  construction */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4872:4885  !construction */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n    tag_200:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n      iszero\n      tag_201\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4908:4931  InvalidInitialization() */\n      mload(0x40)\n      0xf92ee8a900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n    tag_201:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4968:4969  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4952  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4965  $._initialized */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4969  $._initialized = 1 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4983:4997  isTopLevelCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n      iszero\n      tag_202\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5031:5035  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5014  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5028  $._initializing */\n      0x00\n      add\n      0x08\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5035  $._initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n    tag_202:\n        /* \"contracts/MyToken.sol\":808:839  __ERC721_init(\"MyToken\", \"MTK\") */\n      tag_204\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x07\n      dup2\n      mstore\n      0x20\n      add\n      0x4d79546f6b656e00000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x03\n      dup2\n      mstore\n      0x20\n      add\n      0x4d544b0000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/MyToken.sol\":808:821  __ERC721_init */\n      tag_205\n        /* \"contracts/MyToken.sol\":808:839  __ERC721_init(\"MyToken\", \"MTK\") */\n      jump\t// in\n    tag_204:\n        /* \"contracts/MyToken.sol\":849:872  __ERC721Pausable_init() */\n      tag_206\n        /* \"contracts/MyToken.sol\":849:870  __ERC721Pausable_init */\n      tag_207\n        /* \"contracts/MyToken.sol\":849:872  __ERC721Pausable_init() */\n      jump\t// in\n    tag_206:\n        /* \"contracts/MyToken.sol\":882:910  __Ownable_init(initialOwner) */\n      tag_208\n        /* \"contracts/MyToken.sol\":897:909  initialOwner */\n      dup7\n        /* \"contracts/MyToken.sol\":882:896  __Ownable_init */\n      tag_209\n        /* \"contracts/MyToken.sol\":882:910  __Ownable_init(initialOwner) */\n      jump\t// in\n    tag_208:\n        /* \"contracts/MyToken.sol\":920:943  __ERC721Burnable_init() */\n      tag_210\n        /* \"contracts/MyToken.sol\":920:941  __ERC721Burnable_init */\n      tag_211\n        /* \"contracts/MyToken.sol\":920:943  __ERC721Burnable_init() */\n      jump\t// in\n    tag_210:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5070:5084  isTopLevelCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n      iszero\n      tag_212\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5118:5123  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5101  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5115  $._initializing */\n      0x00\n      add\n      0x08\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5123  $._initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5154:5155  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      mload(0x40)\n      tag_213\n      swap2\n      swap1\n      tag_214\n      jump\t// in\n    tag_213:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n    tag_212:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4092:5173  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/MyToken.sol\":737:950  function initialize(address initialOwner) initializer public {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3972:4227  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {... */\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4036:4049  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4061:4083  _requireOwned(tokenId) */\n      tag_216\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4075:4082  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4061:4074  _requireOwned */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4061:4083  _requireOwned(tokenId) */\n      jump\t// in\n    tag_216:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4094:4115  string memory baseURI */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4118:4128  _baseURI() */\n      tag_217\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4118:4126  _baseURI */\n      tag_218\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4118:4128  _baseURI() */\n      jump\t// in\n    tag_217:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4094:4128  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4169:4170  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4151:4158  baseURI */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4145:4166  bytes(baseURI).length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4145:4170  bytes(baseURI).length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4145:4220  bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\" */\n      tag_219\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_220)\n    tag_219:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4187:4194  baseURI */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4196:4214  tokenId.toString() */\n      tag_221\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4196:4203  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4196:4212  tokenId.toString */\n      tag_222\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4196:4214  tokenId.toString() */\n      jump\t// in\n    tag_221:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4173:4215  string.concat(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_223\n      swap3\n      swap2\n      swap1\n      tag_224\n      jump\t// in\n    tag_223:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4145:4220  bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\" */\n    tag_220:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4138:4220  return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\" */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":3972:4227  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5223:5433  function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {... */\n    tag_104:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5311:5315  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5327:5350  ERC721Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5353:5372  _getERC721Storage() */\n      tag_226\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5353:5370  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5353:5372  _getERC721Storage() */\n      jump\t// in\n    tag_226:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5327:5372  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5389:5390  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5389:5409  $._operatorApprovals */\n      0x05\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5389:5416  $._operatorApprovals[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5410:5415  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5389:5416  $._operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5389:5426  $._operatorApprovals[owner][operator] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5417:5425  operator */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5389:5426  $._operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5382:5426  return $._operatorApprovals[owner][operator] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":5223:5433  function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_108:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_228\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_144\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_228:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3509:3510  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3489:3511  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3489:3497  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3489:3511  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n      tag_230\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3562:3563  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_231\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_231:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n    tag_230:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      tag_232\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3604:3612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3603  _transferOwnership */\n      tag_166\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_232:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1034:1180  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {... */\n    tag_113:\n        /* \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1110:1114  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1148:1173  type(IERC165).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1133:1173  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1133:1144  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1133:1173  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1126:1173  return interfaceId == type(IERC165).interfaceId */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":1034:1180  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":1958:2114  function _getERC721Storage() private pure returns (ERC721Storage storage $) {... */\n    tag_116:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2009:2032  ERC721Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2077:2098  ERC721StorageLocation */\n      0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2067:2098  $.slot := ERC721StorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":1958:2114  function _getERC721Storage() private pure returns (ERC721Storage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17836:18077  function _requireOwned(uint256 tokenId) internal view returns (address) {... */\n    tag_125:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17899:17906  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17918:17931  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17934:17951  _ownerOf(tokenId) */\n      tag_236\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17943:17950  tokenId */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17934:17942  _ownerOf */\n      tag_237\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17934:17951  _ownerOf(tokenId) */\n      jump\t// in\n    tag_236:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17918:17951  address owner = _ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17982:17983  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17965:17984  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17965:17970  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17965:17984  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17961:18049  if (owner == address(0)) {... */\n      tag_238\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18030:18037  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18007:18038  ERC721NonexistentToken(tokenId) */\n      mload(0x40)\n      0x7e27328900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_239\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_239:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17961:18049  if (owner == address(0)) {... */\n    tag_238:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18065:18070  owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18058:18070  return owner */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17836:18077  function _requireOwned(uint256 tokenId) internal view returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7347:7531  function _getApproved(uint256 tokenId) internal view virtual returns (address) {... */\n    tag_127:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7417:7424  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7436:7459  ERC721Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7462:7481  _getERC721Storage() */\n      tag_241\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7462:7479  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7462:7481  _getERC721Storage() */\n      jump\t// in\n    tag_241:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7436:7481  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7498:7499  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7498:7515  $._tokenApprovals */\n      0x04\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7498:7524  $._tokenApprovals[tokenId] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7516:7523  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7498:7524  $._tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7491:7524  return $._tokenApprovals[tokenId] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7347:7531  function _getApproved(uint256 tokenId) internal view virtual returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":887:983  function _msgSender() internal view virtual returns (address) {... */\n    tag_131:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":940:947  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":959:976  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":887:983  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16002:16122  function _approve(address to, uint256 tokenId, address auth) internal {... */\n    tag_132:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16082:16115  _approve(to, tokenId, auth, true) */\n      tag_244\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16091:16093  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16095:16102  tokenId */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16104:16108  auth */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16110:16114  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16082:16090  _approve */\n      tag_245\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16082:16115  _approve(to, tokenId, auth, true) */\n      jump\t// in\n    tag_244:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16002:16122  function _approve(address to, uint256 tokenId, address auth) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/MyToken.sol\":1267:1493  function _update(address to, uint256 tokenId, address auth)... */\n    tag_138:\n        /* \"contracts/MyToken.sol\":1424:1431  address */\n      0x00\n        /* \"contracts/MyToken.sol\":1454:1486  super._update(to, tokenId, auth) */\n      tag_247\n        /* \"contracts/MyToken.sol\":1468:1470  to */\n      dup5\n        /* \"contracts/MyToken.sol\":1472:1479  tokenId */\n      dup5\n        /* \"contracts/MyToken.sol\":1481:1485  auth */\n      dup5\n        /* \"contracts/MyToken.sol\":1454:1467  super._update */\n      tag_248\n        /* \"contracts/MyToken.sol\":1454:1486  super._update(to, tokenId, auth) */\n      jump\t// in\n    tag_247:\n        /* \"contracts/MyToken.sol\":1447:1486  return super._update(to, tokenId, auth) */\n      swap1\n      pop\n        /* \"contracts/MyToken.sol\":1267:1493  function _update(address to, uint256 tokenId, address auth)... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n    tag_144:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2728:2740  _msgSender() */\n      tag_250\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2728:2738  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2728:2740  _msgSender() */\n      jump\t// in\n    tag_250:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2740  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n      tag_251\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2722  owner */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n      jump\t// in\n    tag_251:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2740  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n      tag_252\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2790:2802  _msgSender() */\n      tag_253\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2790:2800  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2790:2802  _msgSender() */\n      jump\t// in\n    tag_253:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      0x118cdaa700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_254\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_254:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n    tag_252:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3674:3852  function _unpause() internal virtual whenPaused {... */\n    tag_147:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2563:2579  _requirePaused() */\n      tag_256\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2563:2577  _requirePaused */\n      tag_257\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2563:2579  _requirePaused() */\n      jump\t// in\n    tag_256:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3732:3757  PausableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3760:3781  _getPausableStorage() */\n      tag_259\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3760:3779  _getPausableStorage */\n      tag_155\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3760:3781  _getPausableStorage() */\n      jump\t// in\n    tag_259:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3732:3781  PausableStorage storage $ = _getPausableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3803:3808  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3791:3792  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3791:3800  $._paused */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3791:3808  $._paused = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3823:3845  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3832:3844  _msgSender() */\n      tag_260\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3832:3842  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3832:3844  _msgSender() */\n      jump\t// in\n    tag_260:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3823:3845  Unpaused(_msgSender()) */\n      mload(0x40)\n      tag_261\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_261:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3722:3852  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3674:3852  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1147:1309  function _getPausableStorage() private pure returns (PausableStorage storage $) {... */\n    tag_155:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1200:1225  PausableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1270:1293  PausableStorageLocation */\n      0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1260:1293  $.slot := PausableStorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1147:1309  function _getPausableStorage() private pure returns (PausableStorage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_166:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3847:3871  OwnableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3874:3894  _getOwnableStorage() */\n      tag_264\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3874:3892  _getOwnableStorage */\n      tag_174\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3874:3894  _getOwnableStorage() */\n      jump\t// in\n    tag_264:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3847:3894  OwnableStorage storage $ = _getOwnableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3904:3920  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3923:3924  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3923:3931  $._owner */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3904:3931  address oldOwner = $._owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3952:3960  newOwner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3941:3942  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3941:3949  $._owner */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3941:3960  $._owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":4006:4014  newOwner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3996:4004  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3837:4022  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3366:3542  function _pause() internal virtual whenNotPaused {... */\n    tag_171:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2335  _requireNotPaused() */\n      tag_266\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2333  _requireNotPaused */\n      tag_267\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2335  _requireNotPaused() */\n      jump\t// in\n    tag_266:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3425:3450  PausableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3453:3474  _getPausableStorage() */\n      tag_269\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3453:3472  _getPausableStorage */\n      tag_155\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3453:3474  _getPausableStorage() */\n      jump\t// in\n    tag_269:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3425:3474  PausableStorage storage $ = _getPausableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3496:3500  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3484:3485  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3484:3493  $._paused */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3484:3500  $._paused = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3515:3535  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3522:3534  _msgSender() */\n      tag_270\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3522:3532  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3522:3534  _msgSender() */\n      jump\t// in\n    tag_270:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3515:3535  Paused(_msgSender()) */\n      mload(0x40)\n      tag_271\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_271:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3415:3542  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3366:3542  function _pause() internal virtual whenNotPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1192:1351  function _getOwnableStorage() private pure returns (OwnableStorage storage $) {... */\n    tag_174:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1244:1268  OwnableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1303:1335  $.slot := OwnableStorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1192:1351  function _getOwnableStorage() private pure returns (OwnableStorage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12217:12317  function _safeMint(address to, uint256 tokenId) internal {... */\n    tag_186:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12284:12310  _safeMint(to, tokenId, \"\") */\n      tag_274\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12294:12296  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12298:12305  tokenId */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12284:12310  _safeMint(to, tokenId, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12284:12293  _safeMint */\n      tag_275\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12284:12310  _safeMint(to, tokenId, \"\") */\n      jump\t// in\n    tag_274:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12217:12317  function _safeMint(address to, uint256 tokenId) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17232:17601  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {... */\n    tag_190:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17335:17358  ERC721Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17361:17380  _getERC721Storage() */\n      tag_277\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17361:17378  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17361:17380  _getERC721Storage() */\n      jump\t// in\n    tag_277:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17335:17380  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17414:17415  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17394:17416  operator == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17394:17402  operator */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17394:17416  operator == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17390:17481  if (operator == address(0)) {... */\n      tag_278\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17461:17469  operator */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17439:17470  ERC721InvalidOperator(operator) */\n      mload(0x40)\n      0x5b08ba1800000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_279\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_279:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17390:17481  if (operator == address(0)) {... */\n    tag_278:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17530:17538  approved */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17490:17491  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17490:17510  $._operatorApprovals */\n      0x05\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17490:17517  $._operatorApprovals[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17511:17516  owner */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17490:17517  $._operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17490:17527  $._operatorApprovals[owner][operator] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17518:17526  operator */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17490:17527  $._operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17490:17538  $._operatorApprovals[owner][operator] = approved */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17575:17583  operator */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17553:17594  ApprovalForAll(owner, operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17568:17573  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17553:17594  ApprovalForAll(owner, operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17585:17593  approved */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17553:17594  ApprovalForAll(owner, operator, approved) */\n      mload(0x40)\n      tag_280\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_280:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17325:17601  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17232:17601  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18616:19398  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {... */\n    tag_194:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18749:18750  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18732:18734  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18732:18746  to.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18732:18750  to.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18728:19392  if (to.code.length > 0) {... */\n      iszero\n      tag_282\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18786:18788  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18770:18806  IERC721Receiver(to).onERC721Received */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x150b7a02\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18807:18819  _msgSender() */\n      tag_283\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18807:18817  _msgSender */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18807:18819  _msgSender() */\n      jump\t// in\n    tag_283:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18821:18825  from */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18827:18834  tokenId */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18836:18840  data */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18770:18841  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      mload(0x40)\n      dup6\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_284\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_285\n      jump\t// in\n    tag_284:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_286\n      jumpi\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_287\n      swap2\n      swap1\n      tag_288\n      jump\t// in\n    tag_287:\n      0x01\n    tag_286:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18766:19382  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n      tag_289\n      jumpi\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_294\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_293)\n    tag_294:\n      0x60\n      swap2\n      pop\n    tag_293:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19096:19097  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19079:19085  reason */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19079:19092  reason.length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19079:19097  reason.length == 0 */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19075:19368  if (reason.length == 0) {... */\n      tag_295\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19150:19152  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19128:19153  ERC721InvalidReceiver(to) */\n      mload(0x40)\n      0x64a0ae9200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_296\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_296:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19075:19368  if (reason.length == 0) {... */\n    tag_295:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19320:19326  reason */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19314:19327  mload(reason) */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19305:19311  reason */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19301:19303  32 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19297:19312  add(32, reason) */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":19290:19328  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18766:19382  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n    tag_289:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18898:18939  IERC721Receiver.onERC721Received.selector */\n      shl(0xe0, 0x150b7a02)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18888:18939  retval != IERC721Receiver.onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18888:18894  retval */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18888:18939  retval != IERC721Receiver.onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18884:19014  if (retval != IERC721Receiver.onERC721Received.selector) {... */\n      tag_299\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18992:18994  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18970:18995  ERC721InvalidReceiver(to) */\n      mload(0x40)\n      0x64a0ae9200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_300\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_300:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18884:19014  if (retval != IERC721Receiver.onERC721Received.selector) {... */\n    tag_299:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18842:19028  returns (bytes4 retval) {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18728:19392  if (to.code.length > 0) {... */\n    tag_282:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":18616:19398  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n    tag_197:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8795:8825  InitializableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8860:8891  $.slot := INITIALIZABLE_STORAGE */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2233:2382  function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_205:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_303\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_303:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2336:2375  __ERC721_init_unchained(name_, symbol_) */\n      tag_306\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2360:2365  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2367:2374  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2336:2359  __ERC721_init_unchained */\n      tag_307\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2336:2375  __ERC721_init_unchained(name_, symbol_) */\n      jump\t// in\n    tag_306:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2233:2382  function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1155:1258  function __ERC721Pausable_init() internal onlyInitializing {... */\n    tag_207:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_309\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_309:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1224:1251  __Pausable_init_unchained() */\n      tag_311\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1224:1249  __Pausable_init_unchained */\n      tag_312\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1224:1251  __Pausable_init_unchained() */\n      jump\t// in\n    tag_311:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1155:1258  function __ERC721Pausable_init() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1847:1974  function __Ownable_init(address initialOwner) internal onlyInitializing {... */\n    tag_209:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_314\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_314:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      tag_316\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1954:1966  initialOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1953  __Ownable_init_unchained */\n      tag_317\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      jump\t// in\n    tag_316:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1847:1974  function __Ownable_init(address initialOwner) internal onlyInitializing {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":556:622  function __ERC721Burnable_init() internal onlyInitializing {... */\n    tag_211:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_319\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_319:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":556:622  function __ERC721Burnable_init() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4469:4561  function _baseURI() internal view virtual returns (string memory) {... */\n    tag_218:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4520:4533  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4545:4554  return \"\" */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":4469:4561  function _baseURI() internal view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":637:1335  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_222:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":693:706  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":742:756  uint256 length */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":779:780  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":759:776  Math.log10(value) */\n      tag_323\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":770:775  value */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":759:769  Math.log10 */\n      tag_324\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":759:776  Math.log10(value) */\n      jump\t// in\n    tag_323:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":759:780  Math.log10(value) + 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":742:780  uint256 length = Math.log10(value) + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":794:814  string memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":828:834  length */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":817:835  new string(length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_325\n      jumpi\n      tag_326\n      tag_327\n      jump\t// in\n    tag_326:\n    tag_325:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_328\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_328:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":794:835  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":849:860  uint256 ptr */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":975:981  length */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":971:973  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":967:982  add(32, length) */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":959:965  buffer */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":955:983  add(buffer, add(32, length)) */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":948:983  ptr := add(buffer, add(32, length)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1010:1292  while (true) {... */\n    tag_329:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1017:1021  true */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1010:1292  while (true) {... */\n      iszero\n      tag_330\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1041:1046  ptr-- */\n      dup1\n      dup1\n      0x01\n      swap1\n      sub\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1180:1190  HEX_DIGITS */\n      0x3031323334353637383961626364656600000000000000000000000000000000\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1175:1177  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1168:1173  value */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1164:1178  mod(value, 10) */\n      mod\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1159:1191  byte(mod(value, 10), HEX_DIGITS) */\n      byte\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1154:1157  ptr */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1146:1192  mstore8(ptr, byte(mod(value, 10), HEX_DIGITS)) */\n      mstore8\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1236:1238  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1227:1238  value /= 10 */\n      dup6\n      dup2\n      tag_331\n      jumpi\n      tag_332\n      tag_333\n      jump\t// in\n    tag_332:\n    tag_331:\n      div\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1269:1270  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1260:1265  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1260:1270  value == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1010:1292  while (true) {... */\n      tag_329\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1256:1277  if (value == 0) break */\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1010:1292  while (true) {... */\n    tag_330:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1312:1318  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1305:1318  return buffer */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":637:1335  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7059:7231  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n    tag_237:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7125:7132  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7144:7167  ERC721Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7170:7189  _getERC721Storage() */\n      tag_336\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7170:7187  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7170:7189  _getERC721Storage() */\n      jump\t// in\n    tag_336:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7144:7189  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7206:7207  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7206:7215  $._owners */\n      0x02\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7206:7224  $._owners[tokenId] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7216:7223  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7206:7224  $._owners[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7199:7224  return $._owners[tokenId] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7059:7231  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16304:17023  function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {... */\n    tag_245:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16408:16431  ERC721Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16434:16453  _getERC721Storage() */\n      tag_338\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16434:16451  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16434:16453  _getERC721Storage() */\n      jump\t// in\n    tag_338:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16408:16453  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16519:16528  emitEvent */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16519:16550  emitEvent || auth != address(0) */\n      dup1\n      tag_339\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16548:16549  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16532:16550  auth != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16532:16536  auth */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16532:16550  auth != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16519:16550  emitEvent || auth != address(0) */\n    tag_339:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16515:16975  if (emitEvent || auth != address(0)) {... */\n      iszero\n      tag_340\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16566:16579  address owner */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16582:16604  _requireOwned(tokenId) */\n      tag_341\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16596:16603  tokenId */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16582:16595  _requireOwned */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16582:16604  _requireOwned(tokenId) */\n      jump\t// in\n    tag_341:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16566:16604  address owner = _requireOwned(tokenId) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16748:16749  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16732:16750  auth != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16732:16736  auth */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16732:16750  auth != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16732:16767  auth != address(0) && owner != auth */\n      dup1\n      iszero\n      tag_342\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16763:16767  auth */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16754:16767  owner != auth */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16754:16759  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16754:16767  owner != auth */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16732:16767  auth != address(0) && owner != auth */\n    tag_342:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16732:16801  auth != address(0) && owner != auth && !isApprovedForAll(owner, auth) */\n      dup1\n      iszero\n      tag_343\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16772:16801  isApprovedForAll(owner, auth) */\n      tag_344\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16789:16794  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16796:16800  auth */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16772:16788  isApprovedForAll */\n      tag_104\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16772:16801  isApprovedForAll(owner, auth) */\n      jump\t// in\n    tag_344:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16771:16801  !isApprovedForAll(owner, auth) */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16732:16801  auth != address(0) && owner != auth && !isApprovedForAll(owner, auth) */\n    tag_343:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16728:16870  if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {... */\n      iszero\n      tag_345\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16850:16854  auth */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16828:16855  ERC721InvalidApprover(auth) */\n      mload(0x40)\n      0xa9fbf51f00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_346\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_346:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16728:16870  if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {... */\n    tag_345:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16888:16897  emitEvent */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16884:16965  if (emitEvent) {... */\n      iszero\n      tag_347\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16942:16949  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16938:16940  to */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16922:16950  Approval(owner, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16931:16936  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16922:16950  Approval(owner, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16884:16965  if (emitEvent) {... */\n    tag_347:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16552:16975  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16515:16975  if (emitEvent || auth != address(0)) {... */\n    tag_340:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17014:17016  to */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16985:16986  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16985:17002  $._tokenApprovals */\n      0x04\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16985:17011  $._tokenApprovals[tokenId] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":17003:17010  tokenId */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16985:17011  $._tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16985:17016  $._tokenApprovals[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16398:17023  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":16304:17023  function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1472:1676  function _update(... */\n    tag_248:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1611:1618  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2335  _requireNotPaused() */\n      tag_349\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2333  _requireNotPaused */\n      tag_267\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2316:2335  _requireNotPaused() */\n      jump\t// in\n    tag_349:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1637:1669  super._update(to, tokenId, auth) */\n      tag_351\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1651:1653  to */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1655:1662  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1664:1668  auth */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1637:1650  super._update */\n      tag_352\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1637:1669  super._update(to, tokenId, auth) */\n      jump\t// in\n    tag_351:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1630:1669  return super._update(to, tokenId, auth) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":1472:1676  function _update(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3105:3231  function _requirePaused() internal view virtual {... */\n    tag_257:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3168:3176  paused() */\n      tag_354\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3168:3174  paused */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3168:3176  paused() */\n      jump\t// in\n    tag_354:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3163:3225  if (!paused()) {... */\n      tag_355\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3199:3214  ExpectedPause() */\n      mload(0x40)\n      0x8dfc202b00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3163:3225  if (!paused()) {... */\n    tag_355:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3105:3231  function _requirePaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2905:3033  function _requireNotPaused() internal view virtual {... */\n    tag_267:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2970:2978  paused() */\n      tag_357\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2970:2976  paused */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2970:2978  paused() */\n      jump\t// in\n    tag_357:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2966:3027  if (paused()) {... */\n      iszero\n      tag_358\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":3001:3016  EnforcedPause() */\n      mload(0x40)\n      0xd93c066500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2966:3027  if (paused()) {... */\n    tag_358:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2905:3033  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12538:12720  function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {... */\n    tag_275:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12632:12650  _mint(to, tokenId) */\n      tag_360\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12638:12640  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12642:12649  tokenId */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12632:12637  _mint */\n      tag_361\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12632:12650  _mint(to, tokenId) */\n      jump\t// in\n    tag_360:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12660:12713  _checkOnERC721Received(address(0), to, tokenId, data) */\n      tag_362\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12691:12692  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12695:12697  to */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12699:12706  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12708:12712  data */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12660:12682  _checkOnERC721Received */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12660:12713  _checkOnERC721Received(address(0), to, tokenId, data) */\n      jump\t// in\n    tag_362:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":12538:12720  function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n    tag_304:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7168  _isInitializing() */\n      tag_364\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7166  _isInitializing */\n      tag_365\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7168  _isInitializing() */\n      jump\t// in\n    tag_364:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n      tag_366\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7191:7208  NotInitializing() */\n      mload(0x40)\n      0xd7e6bcf800000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n    tag_366:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2388:2607  function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_307:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_368\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_368:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2501:2524  ERC721Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2527:2546  _getERC721Storage() */\n      tag_370\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2527:2544  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2527:2546  _getERC721Storage() */\n      jump\t// in\n    tag_370:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2501:2546  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2566:2571  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2556:2557  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2556:2563  $._name */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2556:2571  $._name = name_ */\n      swap1\n      dup2\n      tag_371\n      swap2\n      swap1\n      tag_372\n      jump\t// in\n    tag_371:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2593:2600  symbol_ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2581:2582  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2581:2590  $._symbol */\n      0x01\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2581:2600  $._symbol = symbol_ */\n      swap1\n      dup2\n      tag_373\n      swap2\n      swap1\n      tag_372\n      jump\t// in\n    tag_373:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2491:2607  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":2388:2607  function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1939:2095  function __Pausable_init_unchained() internal onlyInitializing {... */\n    tag_312:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_375\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_375:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2012:2037  PausableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2040:2061  _getPausableStorage() */\n      tag_377\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2040:2059  _getPausableStorage */\n      tag_155\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2040:2061  _getPausableStorage() */\n      jump\t// in\n    tag_377:\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2012:2061  PausableStorage storage $ = _getPausableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2083:2088  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2071:2072  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2071:2080  $._paused */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2071:2088  $._paused = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":2002:2095  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":1939:2095  function __Pausable_init_unchained() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1980:2215  function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {... */\n    tag_317:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_379\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_379:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2100:2101  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2076:2102  initialOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2076:2088  initialOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2076:2102  initialOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2072:2167  if (initialOwner == address(0)) {... */\n      tag_381\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2153:2154  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2125:2156  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_382\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_382:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2072:2167  if (initialOwner == address(0)) {... */\n    tag_381:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2176:2208  _transferOwnership(initialOwner) */\n      tag_383\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2195:2207  initialOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2176:2194  _transferOwnership */\n      tag_166\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2176:2208  _transferOwnership(initialOwner) */\n      jump\t// in\n    tag_383:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1980:2215  function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12214:13130  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_324:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12267:12274  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12286:12300  uint256 result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12303:12304  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12286:12304  uint256 result = 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12351:12359  10 ** 64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12342:12347  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12342:12359  value >= 10 ** 64 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12338:12441  if (value >= 10 ** 64) {... */\n      tag_385\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12388:12396  10 ** 64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12379:12396  value /= 10 ** 64 */\n      dup4\n      dup2\n      tag_386\n      jumpi\n      tag_387\n      tag_333\n      jump\t// in\n    tag_387:\n    tag_386:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12424:12426  64 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12414:12426  result += 64 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12338:12441  if (value >= 10 ** 64) {... */\n    tag_385:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12467:12475  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12458:12463  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12458:12475  value >= 10 ** 32 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12454:12557  if (value >= 10 ** 32) {... */\n      tag_388\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12504:12512  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12495:12512  value /= 10 ** 32 */\n      dup4\n      dup2\n      tag_389\n      jumpi\n      tag_390\n      tag_333\n      jump\t// in\n    tag_390:\n    tag_389:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12540:12542  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12530:12542  result += 32 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12454:12557  if (value >= 10 ** 32) {... */\n    tag_388:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12583:12591  10 ** 16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12574:12579  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12574:12591  value >= 10 ** 16 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12570:12673  if (value >= 10 ** 16) {... */\n      tag_391\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12620:12628  10 ** 16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12611:12628  value /= 10 ** 16 */\n      dup4\n      dup2\n      tag_392\n      jumpi\n      tag_393\n      tag_333\n      jump\t// in\n    tag_393:\n    tag_392:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12656:12658  16 */\n      0x10\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12646:12658  result += 16 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12570:12673  if (value >= 10 ** 16) {... */\n    tag_391:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12699:12706  10 ** 8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12690:12695  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12690:12706  value >= 10 ** 8 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12686:12786  if (value >= 10 ** 8) {... */\n      tag_394\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12735:12742  10 ** 8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12726:12742  value /= 10 ** 8 */\n      dup4\n      dup2\n      tag_395\n      jumpi\n      tag_396\n      tag_333\n      jump\t// in\n    tag_396:\n    tag_395:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12770:12771  8 */\n      0x08\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12760:12771  result += 8 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12686:12786  if (value >= 10 ** 8) {... */\n    tag_394:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12812:12819  10 ** 4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12803:12808  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12803:12819  value >= 10 ** 4 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12799:12899  if (value >= 10 ** 4) {... */\n      tag_397\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12848:12855  10 ** 4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12839:12855  value /= 10 ** 4 */\n      dup4\n      dup2\n      tag_398\n      jumpi\n      tag_399\n      tag_333\n      jump\t// in\n    tag_399:\n    tag_398:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12883:12884  4 */\n      0x04\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12873:12884  result += 4 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12799:12899  if (value >= 10 ** 4) {... */\n    tag_397:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12925:12932  10 ** 2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12916:12921  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12916:12932  value >= 10 ** 2 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12912:13012  if (value >= 10 ** 2) {... */\n      tag_400\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12961:12968  10 ** 2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12952:12968  value /= 10 ** 2 */\n      dup4\n      dup2\n      tag_401\n      jumpi\n      tag_402\n      tag_333\n      jump\t// in\n    tag_402:\n    tag_401:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12996:12997  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12986:12997  result += 2 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12912:13012  if (value >= 10 ** 2) {... */\n    tag_400:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13038:13045  10 ** 1 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13029:13034  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13029:13045  value >= 10 ** 1 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13025:13091  if (value >= 10 ** 1) {... */\n      tag_403\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13075:13076  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13065:13076  result += 1 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13025:13091  if (value >= 10 ** 1) {... */\n    tag_403:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13117:13123  result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":13110:13123  return result */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":12214:13130  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10361:11217  function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {... */\n    tag_352:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10447:10454  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10466:10489  ERC721Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10492:10511  _getERC721Storage() */\n      tag_405\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10492:10509  _getERC721Storage */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10492:10511  _getERC721Storage() */\n      jump\t// in\n    tag_405:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10466:10511  ERC721Storage storage $ = _getERC721Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10521:10533  address from */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10536:10553  _ownerOf(tokenId) */\n      tag_406\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10545:10552  tokenId */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10536:10544  _ownerOf */\n      tag_237\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10536:10553  _ownerOf(tokenId) */\n      jump\t// in\n    tag_406:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10521:10553  address from = _ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10629:10630  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10613:10631  auth != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10613:10617  auth */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10613:10631  auth != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10609:10695  if (auth != address(0)) {... */\n      tag_407\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10647:10684  _checkAuthorized(from, auth, tokenId) */\n      tag_408\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10664:10668  from */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10670:10674  auth */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10676:10683  tokenId */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10647:10663  _checkAuthorized */\n      tag_409\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10647:10684  _checkAuthorized(from, auth, tokenId) */\n      jump\t// in\n    tag_408:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10609:10695  if (auth != address(0)) {... */\n    tag_407:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10755:10756  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10739:10757  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10739:10743  from */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10739:10757  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10735:10993  if (from != address(0)) {... */\n      tag_410\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10855:10903  _approve(address(0), tokenId, address(0), false) */\n      tag_411\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10872:10873  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10876:10883  tokenId */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10893:10894  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10897:10902  false */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10855:10863  _approve */\n      tag_245\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10855:10903  _approve(address(0), tokenId, address(0), false) */\n      jump\t// in\n    tag_411:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10967:10968  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10946:10947  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10946:10957  $._balances */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10946:10963  $._balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10958:10962  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10946:10963  $._balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10946:10968  $._balances[from] -= 1 */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10735:10993  if (from != address(0)) {... */\n    tag_410:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11021:11022  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11007:11023  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11007:11009  to */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11007:11023  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11003:11112  if (to != address(0)) {... */\n      tag_412\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11086:11087  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11067:11068  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11067:11078  $._balances */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11067:11082  $._balances[to] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11079:11081  to */\n      dup9\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11067:11082  $._balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11067:11087  $._balances[to] += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11003:11112  if (to != address(0)) {... */\n    tag_412:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11143:11145  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11122:11123  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11122:11131  $._owners */\n      0x02\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11122:11140  $._owners[tokenId] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11132:11139  tokenId */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11122:11140  $._owners[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11122:11145  $._owners[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11180:11187  tokenId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11176:11178  to */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11161:11188  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11170:11174  from */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11161:11188  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11206:11210  from */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11199:11210  return from */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":10361:11217  function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11539:11866  function _mint(address to, uint256 tokenId) internal {... */\n    tag_361:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11620:11621  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11606:11622  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11606:11608  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11606:11622  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11602:11689  if (to == address(0)) {... */\n      tag_414\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11675:11676  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11645:11678  ERC721InvalidReceiver(address(0)) */\n      mload(0x40)\n      0x64a0ae9200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_415\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_415:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11602:11689  if (to == address(0)) {... */\n    tag_414:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11698:11719  address previousOwner */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11722:11754  _update(to, tokenId, address(0)) */\n      tag_416\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11730:11732  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11734:11741  tokenId */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11751:11752  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11722:11729  _update */\n      tag_138\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11722:11754  _update(to, tokenId, address(0)) */\n      jump\t// in\n    tag_416:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11698:11754  address previousOwner = _update(to, tokenId, address(0)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11793:11794  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11768:11795  previousOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11768:11781  previousOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11768:11795  previousOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11764:11860  if (previousOwner != address(0)) {... */\n      tag_417\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11846:11847  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11818:11849  ERC721InvalidSender(address(0)) */\n      mload(0x40)\n      0x73c6ac6e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_418\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_418:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11764:11860  if (previousOwner != address(0)) {... */\n    tag_417:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11592:11866  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":11539:11866  function _mint(address to, uint256 tokenId) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8487:8607  function _isInitializing() internal view returns (bool) {... */\n    tag_365:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8537:8541  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8586  _getInitializableStorage() */\n      tag_420\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8584  _getInitializableStorage */\n      tag_197\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8586  _getInitializableStorage() */\n      jump\t// in\n    tag_420:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8600  _getInitializableStorage()._initializing */\n      0x00\n      add\n      0x08\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8553:8600  return _getInitializableStorage()._initializing */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8487:8607  function _isInitializing() internal view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8548:8916  function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {... */\n    tag_409:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8660:8698  _isAuthorized(owner, spender, tokenId) */\n      tag_422\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8674:8679  owner */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8681:8688  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8690:8697  tokenId */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8660:8673  _isAuthorized */\n      tag_423\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8660:8698  _isAuthorized(owner, spender, tokenId) */\n      jump\t// in\n    tag_422:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8655:8910  if (!_isAuthorized(owner, spender, tokenId)) {... */\n      tag_424\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8735:8736  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8718:8737  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8718:8723  owner */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8718:8737  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8714:8900  if (owner == address(0)) {... */\n      tag_425\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8787:8794  tokenId */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8764:8795  ERC721NonexistentToken(tokenId) */\n      mload(0x40)\n      0x7e27328900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_426\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n    tag_426:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8714:8900  if (owner == address(0)) {... */\n    tag_425:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8868:8875  spender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8877:8884  tokenId */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8841:8885  ERC721InsufficientApproval(spender, tokenId) */\n      mload(0x40)\n      0x177e802f00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_428\n      swap3\n      swap2\n      swap1\n      tag_429\n      jump\t// in\n    tag_428:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8655:8910  if (!_isAuthorized(owner, spender, tokenId)) {... */\n    tag_424:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8548:8916  function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7842:8114  function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_423:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7945:7949  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7999:8000  0 */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7980:8001  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7980:7987  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7980:8001  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7980:8107  spender != address(0) &&... */\n      dup1\n      iszero\n      tag_431\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8027:8034  spender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8018:8034  owner == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8018:8023  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8018:8034  owner == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8018:8070  owner == spender || isApprovedForAll(owner, spender) */\n      dup1\n      tag_432\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8038:8070  isApprovedForAll(owner, spender) */\n      tag_433\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8055:8060  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8062:8069  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8038:8054  isApprovedForAll */\n      tag_104\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8038:8070  isApprovedForAll(owner, spender) */\n      jump\t// in\n    tag_433:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8018:8070  owner == spender || isApprovedForAll(owner, spender) */\n    tag_432:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8018:8106  owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender */\n      dup1\n      tag_434\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8099:8106  spender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8074:8106  _getApproved(tokenId) == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8074:8095  _getApproved(tokenId) */\n      tag_435\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8087:8094  tokenId */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8074:8086  _getApproved */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8074:8095  _getApproved(tokenId) */\n      jump\t// in\n    tag_435:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8074:8106  _getApproved(tokenId) == spender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":8018:8106  owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender */\n    tag_434:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7980:8107  spender != address(0) &&... */\n    tag_431:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7961:8107  return... */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":7842:8114  function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:82   */\n    tag_436:\n        /* \"#utility.yul\":40:46   */\n      0x00\n        /* \"#utility.yul\":73:75   */\n      0x40\n        /* \"#utility.yul\":67:76   */\n      mload\n        /* \"#utility.yul\":57:76   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:82   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_437:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_438:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:483   */\n    tag_439:\n        /* \"#utility.yul\":370:377   */\n      0x00\n        /* \"#utility.yul\":410:476   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":403:408   */\n      dup3\n        /* \"#utility.yul\":399:477   */\n      and\n        /* \"#utility.yul\":388:477   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:483   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":489:609   */\n    tag_440:\n        /* \"#utility.yul\":561:584   */\n      tag_500\n        /* \"#utility.yul\":578:583   */\n      dup2\n        /* \"#utility.yul\":561:584   */\n      tag_439\n      jump\t// in\n    tag_500:\n        /* \"#utility.yul\":554:559   */\n      dup2\n        /* \"#utility.yul\":551:585   */\n      eq\n        /* \"#utility.yul\":541:603   */\n      tag_501\n      jumpi\n        /* \"#utility.yul\":599:600   */\n      0x00\n        /* \"#utility.yul\":596:597   */\n      dup1\n        /* \"#utility.yul\":589:601   */\n      revert\n        /* \"#utility.yul\":541:603   */\n    tag_501:\n        /* \"#utility.yul\":489:609   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":615:752   */\n    tag_441:\n        /* \"#utility.yul\":660:665   */\n      0x00\n        /* \"#utility.yul\":698:704   */\n      dup2\n        /* \"#utility.yul\":685:705   */\n      calldataload\n        /* \"#utility.yul\":676:705   */\n      swap1\n      pop\n        /* \"#utility.yul\":714:746   */\n      tag_503\n        /* \"#utility.yul\":740:745   */\n      dup2\n        /* \"#utility.yul\":714:746   */\n      tag_440\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":615:752   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":758:1085   */\n    tag_30:\n        /* \"#utility.yul\":816:822   */\n      0x00\n        /* \"#utility.yul\":865:867   */\n      0x20\n        /* \"#utility.yul\":853:862   */\n      dup3\n        /* \"#utility.yul\":844:851   */\n      dup5\n        /* \"#utility.yul\":840:863   */\n      sub\n        /* \"#utility.yul\":836:868   */\n      slt\n        /* \"#utility.yul\":833:952   */\n      iszero\n      tag_505\n      jumpi\n        /* \"#utility.yul\":871:950   */\n      tag_506\n      tag_437\n      jump\t// in\n    tag_506:\n        /* \"#utility.yul\":833:952   */\n    tag_505:\n        /* \"#utility.yul\":991:992   */\n      0x00\n        /* \"#utility.yul\":1016:1068   */\n      tag_507\n        /* \"#utility.yul\":1060:1067   */\n      dup5\n        /* \"#utility.yul\":1051:1057   */\n      dup3\n        /* \"#utility.yul\":1040:1049   */\n      dup6\n        /* \"#utility.yul\":1036:1058   */\n      add\n        /* \"#utility.yul\":1016:1068   */\n      tag_441\n      jump\t// in\n    tag_507:\n        /* \"#utility.yul\":1006:1068   */\n      swap2\n      pop\n        /* \"#utility.yul\":962:1078   */\n      pop\n        /* \"#utility.yul\":758:1085   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1091:1181   */\n    tag_442:\n        /* \"#utility.yul\":1125:1132   */\n      0x00\n        /* \"#utility.yul\":1168:1173   */\n      dup2\n        /* \"#utility.yul\":1161:1174   */\n      iszero\n        /* \"#utility.yul\":1154:1175   */\n      iszero\n        /* \"#utility.yul\":1143:1175   */\n      swap1\n      pop\n        /* \"#utility.yul\":1091:1181   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1187:1296   */\n    tag_443:\n        /* \"#utility.yul\":1268:1289   */\n      tag_510\n        /* \"#utility.yul\":1283:1288   */\n      dup2\n        /* \"#utility.yul\":1268:1289   */\n      tag_442\n      jump\t// in\n    tag_510:\n        /* \"#utility.yul\":1263:1266   */\n      dup3\n        /* \"#utility.yul\":1256:1290   */\n      mstore\n        /* \"#utility.yul\":1187:1296   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1302:1512   */\n    tag_33:\n        /* \"#utility.yul\":1389:1393   */\n      0x00\n        /* \"#utility.yul\":1427:1429   */\n      0x20\n        /* \"#utility.yul\":1416:1425   */\n      dup3\n        /* \"#utility.yul\":1412:1430   */\n      add\n        /* \"#utility.yul\":1404:1430   */\n      swap1\n      pop\n        /* \"#utility.yul\":1440:1505   */\n      tag_512\n        /* \"#utility.yul\":1502:1503   */\n      0x00\n        /* \"#utility.yul\":1491:1500   */\n      dup4\n        /* \"#utility.yul\":1487:1504   */\n      add\n        /* \"#utility.yul\":1478:1484   */\n      dup5\n        /* \"#utility.yul\":1440:1505   */\n      tag_443\n      jump\t// in\n    tag_512:\n        /* \"#utility.yul\":1302:1512   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1518:1617   */\n    tag_444:\n        /* \"#utility.yul\":1570:1576   */\n      0x00\n        /* \"#utility.yul\":1604:1609   */\n      dup2\n        /* \"#utility.yul\":1598:1610   */\n      mload\n        /* \"#utility.yul\":1588:1610   */\n      swap1\n      pop\n        /* \"#utility.yul\":1518:1617   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1623:1792   */\n    tag_445:\n        /* \"#utility.yul\":1707:1718   */\n      0x00\n        /* \"#utility.yul\":1741:1747   */\n      dup3\n        /* \"#utility.yul\":1736:1739   */\n      dup3\n        /* \"#utility.yul\":1729:1748   */\n      mstore\n        /* \"#utility.yul\":1781:1785   */\n      0x20\n        /* \"#utility.yul\":1776:1779   */\n      dup3\n        /* \"#utility.yul\":1772:1786   */\n      add\n        /* \"#utility.yul\":1757:1786   */\n      swap1\n      pop\n        /* \"#utility.yul\":1623:1792   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1798:2044   */\n    tag_446:\n        /* \"#utility.yul\":1879:1880   */\n      0x00\n        /* \"#utility.yul\":1889:2002   */\n    tag_516:\n        /* \"#utility.yul\":1903:1909   */\n      dup4\n        /* \"#utility.yul\":1900:1901   */\n      dup2\n        /* \"#utility.yul\":1897:1910   */\n      lt\n        /* \"#utility.yul\":1889:2002   */\n      iszero\n      tag_518\n      jumpi\n        /* \"#utility.yul\":1988:1989   */\n      dup1\n        /* \"#utility.yul\":1983:1986   */\n      dup3\n        /* \"#utility.yul\":1979:1990   */\n      add\n        /* \"#utility.yul\":1973:1991   */\n      mload\n        /* \"#utility.yul\":1969:1970   */\n      dup2\n        /* \"#utility.yul\":1964:1967   */\n      dup5\n        /* \"#utility.yul\":1960:1971   */\n      add\n        /* \"#utility.yul\":1953:1992   */\n      mstore\n        /* \"#utility.yul\":1925:1927   */\n      0x20\n        /* \"#utility.yul\":1922:1923   */\n      dup2\n        /* \"#utility.yul\":1918:1928   */\n      add\n        /* \"#utility.yul\":1913:1928   */\n      swap1\n      pop\n        /* \"#utility.yul\":1889:2002   */\n      jump(tag_516)\n    tag_518:\n        /* \"#utility.yul\":2036:2037   */\n      0x00\n        /* \"#utility.yul\":2027:2033   */\n      dup5\n        /* \"#utility.yul\":2022:2025   */\n      dup5\n        /* \"#utility.yul\":2018:2034   */\n      add\n        /* \"#utility.yul\":2011:2038   */\n      mstore\n        /* \"#utility.yul\":1860:2044   */\n      pop\n        /* \"#utility.yul\":1798:2044   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2050:2152   */\n    tag_447:\n        /* \"#utility.yul\":2091:2097   */\n      0x00\n        /* \"#utility.yul\":2142:2144   */\n      0x1f\n        /* \"#utility.yul\":2138:2145   */\n      not\n        /* \"#utility.yul\":2133:2135   */\n      0x1f\n        /* \"#utility.yul\":2126:2131   */\n      dup4\n        /* \"#utility.yul\":2122:2136   */\n      add\n        /* \"#utility.yul\":2118:2146   */\n      and\n        /* \"#utility.yul\":2108:2146   */\n      swap1\n      pop\n        /* \"#utility.yul\":2050:2152   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2158:2535   */\n    tag_448:\n        /* \"#utility.yul\":2246:2249   */\n      0x00\n        /* \"#utility.yul\":2274:2313   */\n      tag_521\n        /* \"#utility.yul\":2307:2312   */\n      dup3\n        /* \"#utility.yul\":2274:2313   */\n      tag_444\n      jump\t// in\n    tag_521:\n        /* \"#utility.yul\":2329:2400   */\n      tag_522\n        /* \"#utility.yul\":2393:2399   */\n      dup2\n        /* \"#utility.yul\":2388:2391   */\n      dup6\n        /* \"#utility.yul\":2329:2400   */\n      tag_445\n      jump\t// in\n    tag_522:\n        /* \"#utility.yul\":2322:2400   */\n      swap4\n      pop\n        /* \"#utility.yul\":2409:2474   */\n      tag_523\n        /* \"#utility.yul\":2467:2473   */\n      dup2\n        /* \"#utility.yul\":2462:2465   */\n      dup6\n        /* \"#utility.yul\":2455:2459   */\n      0x20\n        /* \"#utility.yul\":2448:2453   */\n      dup7\n        /* \"#utility.yul\":2444:2460   */\n      add\n        /* \"#utility.yul\":2409:2474   */\n      tag_446\n      jump\t// in\n    tag_523:\n        /* \"#utility.yul\":2499:2528   */\n      tag_524\n        /* \"#utility.yul\":2521:2527   */\n      dup2\n        /* \"#utility.yul\":2499:2528   */\n      tag_447\n      jump\t// in\n    tag_524:\n        /* \"#utility.yul\":2494:2497   */\n      dup5\n        /* \"#utility.yul\":2490:2529   */\n      add\n        /* \"#utility.yul\":2483:2529   */\n      swap2\n      pop\n        /* \"#utility.yul\":2250:2535   */\n      pop\n        /* \"#utility.yul\":2158:2535   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2541:2854   */\n    tag_37:\n        /* \"#utility.yul\":2654:2658   */\n      0x00\n        /* \"#utility.yul\":2692:2694   */\n      0x20\n        /* \"#utility.yul\":2681:2690   */\n      dup3\n        /* \"#utility.yul\":2677:2695   */\n      add\n        /* \"#utility.yul\":2669:2695   */\n      swap1\n      pop\n        /* \"#utility.yul\":2741:2750   */\n      dup2\n        /* \"#utility.yul\":2735:2739   */\n      dup2\n        /* \"#utility.yul\":2731:2751   */\n      sub\n        /* \"#utility.yul\":2727:2728   */\n      0x00\n        /* \"#utility.yul\":2716:2725   */\n      dup4\n        /* \"#utility.yul\":2712:2729   */\n      add\n        /* \"#utility.yul\":2705:2752   */\n      mstore\n        /* \"#utility.yul\":2769:2847   */\n      tag_526\n        /* \"#utility.yul\":2842:2846   */\n      dup2\n        /* \"#utility.yul\":2833:2839   */\n      dup5\n        /* \"#utility.yul\":2769:2847   */\n      tag_448\n      jump\t// in\n    tag_526:\n        /* \"#utility.yul\":2761:2847   */\n      swap1\n      pop\n        /* \"#utility.yul\":2541:2854   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2860:2937   */\n    tag_449:\n        /* \"#utility.yul\":2897:2904   */\n      0x00\n        /* \"#utility.yul\":2926:2931   */\n      dup2\n        /* \"#utility.yul\":2915:2931   */\n      swap1\n      pop\n        /* \"#utility.yul\":2860:2937   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2943:3065   */\n    tag_450:\n        /* \"#utility.yul\":3016:3040   */\n      tag_529\n        /* \"#utility.yul\":3034:3039   */\n      dup2\n        /* \"#utility.yul\":3016:3040   */\n      tag_449\n      jump\t// in\n    tag_529:\n        /* \"#utility.yul\":3009:3014   */\n      dup2\n        /* \"#utility.yul\":3006:3041   */\n      eq\n        /* \"#utility.yul\":2996:3059   */\n      tag_530\n      jumpi\n        /* \"#utility.yul\":3055:3056   */\n      0x00\n        /* \"#utility.yul\":3052:3053   */\n      dup1\n        /* \"#utility.yul\":3045:3057   */\n      revert\n        /* \"#utility.yul\":2996:3059   */\n    tag_530:\n        /* \"#utility.yul\":2943:3065   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3071:3210   */\n    tag_451:\n        /* \"#utility.yul\":3117:3122   */\n      0x00\n        /* \"#utility.yul\":3155:3161   */\n      dup2\n        /* \"#utility.yul\":3142:3162   */\n      calldataload\n        /* \"#utility.yul\":3133:3162   */\n      swap1\n      pop\n        /* \"#utility.yul\":3171:3204   */\n      tag_532\n        /* \"#utility.yul\":3198:3203   */\n      dup2\n        /* \"#utility.yul\":3171:3204   */\n      tag_450\n      jump\t// in\n    tag_532:\n        /* \"#utility.yul\":3071:3210   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3216:3545   */\n    tag_40:\n        /* \"#utility.yul\":3275:3281   */\n      0x00\n        /* \"#utility.yul\":3324:3326   */\n      0x20\n        /* \"#utility.yul\":3312:3321   */\n      dup3\n        /* \"#utility.yul\":3303:3310   */\n      dup5\n        /* \"#utility.yul\":3299:3322   */\n      sub\n        /* \"#utility.yul\":3295:3327   */\n      slt\n        /* \"#utility.yul\":3292:3411   */\n      iszero\n      tag_534\n      jumpi\n        /* \"#utility.yul\":3330:3409   */\n      tag_535\n      tag_437\n      jump\t// in\n    tag_535:\n        /* \"#utility.yul\":3292:3411   */\n    tag_534:\n        /* \"#utility.yul\":3450:3451   */\n      0x00\n        /* \"#utility.yul\":3475:3528   */\n      tag_536\n        /* \"#utility.yul\":3520:3527   */\n      dup5\n        /* \"#utility.yul\":3511:3517   */\n      dup3\n        /* \"#utility.yul\":3500:3509   */\n      dup6\n        /* \"#utility.yul\":3496:3518   */\n      add\n        /* \"#utility.yul\":3475:3528   */\n      tag_451\n      jump\t// in\n    tag_536:\n        /* \"#utility.yul\":3465:3528   */\n      swap2\n      pop\n        /* \"#utility.yul\":3421:3538   */\n      pop\n        /* \"#utility.yul\":3216:3545   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3551:3677   */\n    tag_452:\n        /* \"#utility.yul\":3588:3595   */\n      0x00\n        /* \"#utility.yul\":3628:3670   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3621:3626   */\n      dup3\n        /* \"#utility.yul\":3617:3671   */\n      and\n        /* \"#utility.yul\":3606:3671   */\n      swap1\n      pop\n        /* \"#utility.yul\":3551:3677   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3683:3779   */\n    tag_453:\n        /* \"#utility.yul\":3720:3727   */\n      0x00\n        /* \"#utility.yul\":3749:3773   */\n      tag_539\n        /* \"#utility.yul\":3767:3772   */\n      dup3\n        /* \"#utility.yul\":3749:3773   */\n      tag_452\n      jump\t// in\n    tag_539:\n        /* \"#utility.yul\":3738:3773   */\n      swap1\n      pop\n        /* \"#utility.yul\":3683:3779   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3785:3903   */\n    tag_454:\n        /* \"#utility.yul\":3872:3896   */\n      tag_541\n        /* \"#utility.yul\":3890:3895   */\n      dup2\n        /* \"#utility.yul\":3872:3896   */\n      tag_453\n      jump\t// in\n    tag_541:\n        /* \"#utility.yul\":3867:3870   */\n      dup3\n        /* \"#utility.yul\":3860:3897   */\n      mstore\n        /* \"#utility.yul\":3785:3903   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3909:4131   */\n    tag_43:\n        /* \"#utility.yul\":4002:4006   */\n      0x00\n        /* \"#utility.yul\":4040:4042   */\n      0x20\n        /* \"#utility.yul\":4029:4038   */\n      dup3\n        /* \"#utility.yul\":4025:4043   */\n      add\n        /* \"#utility.yul\":4017:4043   */\n      swap1\n      pop\n        /* \"#utility.yul\":4053:4124   */\n      tag_543\n        /* \"#utility.yul\":4121:4122   */\n      0x00\n        /* \"#utility.yul\":4110:4119   */\n      dup4\n        /* \"#utility.yul\":4106:4123   */\n      add\n        /* \"#utility.yul\":4097:4103   */\n      dup5\n        /* \"#utility.yul\":4053:4124   */\n      tag_454\n      jump\t// in\n    tag_543:\n        /* \"#utility.yul\":3909:4131   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4137:4259   */\n    tag_455:\n        /* \"#utility.yul\":4210:4234   */\n      tag_545\n        /* \"#utility.yul\":4228:4233   */\n      dup2\n        /* \"#utility.yul\":4210:4234   */\n      tag_453\n      jump\t// in\n    tag_545:\n        /* \"#utility.yul\":4203:4208   */\n      dup2\n        /* \"#utility.yul\":4200:4235   */\n      eq\n        /* \"#utility.yul\":4190:4253   */\n      tag_546\n      jumpi\n        /* \"#utility.yul\":4249:4250   */\n      0x00\n        /* \"#utility.yul\":4246:4247   */\n      dup1\n        /* \"#utility.yul\":4239:4251   */\n      revert\n        /* \"#utility.yul\":4190:4253   */\n    tag_546:\n        /* \"#utility.yul\":4137:4259   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4265:4404   */\n    tag_456:\n        /* \"#utility.yul\":4311:4316   */\n      0x00\n        /* \"#utility.yul\":4349:4355   */\n      dup2\n        /* \"#utility.yul\":4336:4356   */\n      calldataload\n        /* \"#utility.yul\":4327:4356   */\n      swap1\n      pop\n        /* \"#utility.yul\":4365:4398   */\n      tag_548\n        /* \"#utility.yul\":4392:4397   */\n      dup2\n        /* \"#utility.yul\":4365:4398   */\n      tag_455\n      jump\t// in\n    tag_548:\n        /* \"#utility.yul\":4265:4404   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4410:4884   */\n    tag_46:\n        /* \"#utility.yul\":4478:4484   */\n      0x00\n        /* \"#utility.yul\":4486:4492   */\n      dup1\n        /* \"#utility.yul\":4535:4537   */\n      0x40\n        /* \"#utility.yul\":4523:4532   */\n      dup4\n        /* \"#utility.yul\":4514:4521   */\n      dup6\n        /* \"#utility.yul\":4510:4533   */\n      sub\n        /* \"#utility.yul\":4506:4538   */\n      slt\n        /* \"#utility.yul\":4503:4622   */\n      iszero\n      tag_550\n      jumpi\n        /* \"#utility.yul\":4541:4620   */\n      tag_551\n      tag_437\n      jump\t// in\n    tag_551:\n        /* \"#utility.yul\":4503:4622   */\n    tag_550:\n        /* \"#utility.yul\":4661:4662   */\n      0x00\n        /* \"#utility.yul\":4686:4739   */\n      tag_552\n        /* \"#utility.yul\":4731:4738   */\n      dup6\n        /* \"#utility.yul\":4722:4728   */\n      dup3\n        /* \"#utility.yul\":4711:4720   */\n      dup7\n        /* \"#utility.yul\":4707:4729   */\n      add\n        /* \"#utility.yul\":4686:4739   */\n      tag_456\n      jump\t// in\n    tag_552:\n        /* \"#utility.yul\":4676:4739   */\n      swap3\n      pop\n        /* \"#utility.yul\":4632:4749   */\n      pop\n        /* \"#utility.yul\":4788:4790   */\n      0x20\n        /* \"#utility.yul\":4814:4867   */\n      tag_553\n        /* \"#utility.yul\":4859:4866   */\n      dup6\n        /* \"#utility.yul\":4850:4856   */\n      dup3\n        /* \"#utility.yul\":4839:4848   */\n      dup7\n        /* \"#utility.yul\":4835:4857   */\n      add\n        /* \"#utility.yul\":4814:4867   */\n      tag_451\n      jump\t// in\n    tag_553:\n        /* \"#utility.yul\":4804:4867   */\n      swap2\n      pop\n        /* \"#utility.yul\":4759:4877   */\n      pop\n        /* \"#utility.yul\":4410:4884   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4890:5509   */\n    tag_50:\n        /* \"#utility.yul\":4967:4973   */\n      0x00\n        /* \"#utility.yul\":4975:4981   */\n      dup1\n        /* \"#utility.yul\":4983:4989   */\n      0x00\n        /* \"#utility.yul\":5032:5034   */\n      0x60\n        /* \"#utility.yul\":5020:5029   */\n      dup5\n        /* \"#utility.yul\":5011:5018   */\n      dup7\n        /* \"#utility.yul\":5007:5030   */\n      sub\n        /* \"#utility.yul\":5003:5035   */\n      slt\n        /* \"#utility.yul\":5000:5119   */\n      iszero\n      tag_555\n      jumpi\n        /* \"#utility.yul\":5038:5117   */\n      tag_556\n      tag_437\n      jump\t// in\n    tag_556:\n        /* \"#utility.yul\":5000:5119   */\n    tag_555:\n        /* \"#utility.yul\":5158:5159   */\n      0x00\n        /* \"#utility.yul\":5183:5236   */\n      tag_557\n        /* \"#utility.yul\":5228:5235   */\n      dup7\n        /* \"#utility.yul\":5219:5225   */\n      dup3\n        /* \"#utility.yul\":5208:5217   */\n      dup8\n        /* \"#utility.yul\":5204:5226   */\n      add\n        /* \"#utility.yul\":5183:5236   */\n      tag_456\n      jump\t// in\n    tag_557:\n        /* \"#utility.yul\":5173:5236   */\n      swap4\n      pop\n        /* \"#utility.yul\":5129:5246   */\n      pop\n        /* \"#utility.yul\":5285:5287   */\n      0x20\n        /* \"#utility.yul\":5311:5364   */\n      tag_558\n        /* \"#utility.yul\":5356:5363   */\n      dup7\n        /* \"#utility.yul\":5347:5353   */\n      dup3\n        /* \"#utility.yul\":5336:5345   */\n      dup8\n        /* \"#utility.yul\":5332:5354   */\n      add\n        /* \"#utility.yul\":5311:5364   */\n      tag_456\n      jump\t// in\n    tag_558:\n        /* \"#utility.yul\":5301:5364   */\n      swap3\n      pop\n        /* \"#utility.yul\":5256:5374   */\n      pop\n        /* \"#utility.yul\":5413:5415   */\n      0x40\n        /* \"#utility.yul\":5439:5492   */\n      tag_559\n        /* \"#utility.yul\":5484:5491   */\n      dup7\n        /* \"#utility.yul\":5475:5481   */\n      dup3\n        /* \"#utility.yul\":5464:5473   */\n      dup8\n        /* \"#utility.yul\":5460:5482   */\n      add\n        /* \"#utility.yul\":5439:5492   */\n      tag_451\n      jump\t// in\n    tag_559:\n        /* \"#utility.yul\":5429:5492   */\n      swap2\n      pop\n        /* \"#utility.yul\":5384:5502   */\n      pop\n        /* \"#utility.yul\":4890:5509   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":5515:5844   */\n    tag_69:\n        /* \"#utility.yul\":5574:5580   */\n      0x00\n        /* \"#utility.yul\":5623:5625   */\n      0x20\n        /* \"#utility.yul\":5611:5620   */\n      dup3\n        /* \"#utility.yul\":5602:5609   */\n      dup5\n        /* \"#utility.yul\":5598:5621   */\n      sub\n        /* \"#utility.yul\":5594:5626   */\n      slt\n        /* \"#utility.yul\":5591:5710   */\n      iszero\n      tag_561\n      jumpi\n        /* \"#utility.yul\":5629:5708   */\n      tag_562\n      tag_437\n      jump\t// in\n    tag_562:\n        /* \"#utility.yul\":5591:5710   */\n    tag_561:\n        /* \"#utility.yul\":5749:5750   */\n      0x00\n        /* \"#utility.yul\":5774:5827   */\n      tag_563\n        /* \"#utility.yul\":5819:5826   */\n      dup5\n        /* \"#utility.yul\":5810:5816   */\n      dup3\n        /* \"#utility.yul\":5799:5808   */\n      dup6\n        /* \"#utility.yul\":5795:5817   */\n      add\n        /* \"#utility.yul\":5774:5827   */\n      tag_456\n      jump\t// in\n    tag_563:\n        /* \"#utility.yul\":5764:5827   */\n      swap2\n      pop\n        /* \"#utility.yul\":5720:5837   */\n      pop\n        /* \"#utility.yul\":5515:5844   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5850:5968   */\n    tag_457:\n        /* \"#utility.yul\":5937:5961   */\n      tag_565\n        /* \"#utility.yul\":5955:5960   */\n      dup2\n        /* \"#utility.yul\":5937:5961   */\n      tag_449\n      jump\t// in\n    tag_565:\n        /* \"#utility.yul\":5932:5935   */\n      dup3\n        /* \"#utility.yul\":5925:5962   */\n      mstore\n        /* \"#utility.yul\":5850:5968   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5974:6196   */\n    tag_72:\n        /* \"#utility.yul\":6067:6071   */\n      0x00\n        /* \"#utility.yul\":6105:6107   */\n      0x20\n        /* \"#utility.yul\":6094:6103   */\n      dup3\n        /* \"#utility.yul\":6090:6108   */\n      add\n        /* \"#utility.yul\":6082:6108   */\n      swap1\n      pop\n        /* \"#utility.yul\":6118:6189   */\n      tag_567\n        /* \"#utility.yul\":6186:6187   */\n      0x00\n        /* \"#utility.yul\":6175:6184   */\n      dup4\n        /* \"#utility.yul\":6171:6188   */\n      add\n        /* \"#utility.yul\":6162:6168   */\n      dup5\n        /* \"#utility.yul\":6118:6189   */\n      tag_457\n      jump\t// in\n    tag_567:\n        /* \"#utility.yul\":5974:6196   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6202:6318   */\n    tag_458:\n        /* \"#utility.yul\":6272:6293   */\n      tag_569\n        /* \"#utility.yul\":6287:6292   */\n      dup2\n        /* \"#utility.yul\":6272:6293   */\n      tag_442\n      jump\t// in\n    tag_569:\n        /* \"#utility.yul\":6265:6270   */\n      dup2\n        /* \"#utility.yul\":6262:6294   */\n      eq\n        /* \"#utility.yul\":6252:6312   */\n      tag_570\n      jumpi\n        /* \"#utility.yul\":6308:6309   */\n      0x00\n        /* \"#utility.yul\":6305:6306   */\n      dup1\n        /* \"#utility.yul\":6298:6310   */\n      revert\n        /* \"#utility.yul\":6252:6312   */\n    tag_570:\n        /* \"#utility.yul\":6202:6318   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6324:6457   */\n    tag_459:\n        /* \"#utility.yul\":6367:6372   */\n      0x00\n        /* \"#utility.yul\":6405:6411   */\n      dup2\n        /* \"#utility.yul\":6392:6412   */\n      calldataload\n        /* \"#utility.yul\":6383:6412   */\n      swap1\n      pop\n        /* \"#utility.yul\":6421:6451   */\n      tag_572\n        /* \"#utility.yul\":6445:6450   */\n      dup2\n        /* \"#utility.yul\":6421:6451   */\n      tag_458\n      jump\t// in\n    tag_572:\n        /* \"#utility.yul\":6324:6457   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6463:6931   */\n    tag_88:\n        /* \"#utility.yul\":6528:6534   */\n      0x00\n        /* \"#utility.yul\":6536:6542   */\n      dup1\n        /* \"#utility.yul\":6585:6587   */\n      0x40\n        /* \"#utility.yul\":6573:6582   */\n      dup4\n        /* \"#utility.yul\":6564:6571   */\n      dup6\n        /* \"#utility.yul\":6560:6583   */\n      sub\n        /* \"#utility.yul\":6556:6588   */\n      slt\n        /* \"#utility.yul\":6553:6672   */\n      iszero\n      tag_574\n      jumpi\n        /* \"#utility.yul\":6591:6670   */\n      tag_575\n      tag_437\n      jump\t// in\n    tag_575:\n        /* \"#utility.yul\":6553:6672   */\n    tag_574:\n        /* \"#utility.yul\":6711:6712   */\n      0x00\n        /* \"#utility.yul\":6736:6789   */\n      tag_576\n        /* \"#utility.yul\":6781:6788   */\n      dup6\n        /* \"#utility.yul\":6772:6778   */\n      dup3\n        /* \"#utility.yul\":6761:6770   */\n      dup7\n        /* \"#utility.yul\":6757:6779   */\n      add\n        /* \"#utility.yul\":6736:6789   */\n      tag_456\n      jump\t// in\n    tag_576:\n        /* \"#utility.yul\":6726:6789   */\n      swap3\n      pop\n        /* \"#utility.yul\":6682:6799   */\n      pop\n        /* \"#utility.yul\":6838:6840   */\n      0x20\n        /* \"#utility.yul\":6864:6914   */\n      tag_577\n        /* \"#utility.yul\":6906:6913   */\n      dup6\n        /* \"#utility.yul\":6897:6903   */\n      dup3\n        /* \"#utility.yul\":6886:6895   */\n      dup7\n        /* \"#utility.yul\":6882:6904   */\n      add\n        /* \"#utility.yul\":6864:6914   */\n      tag_459\n      jump\t// in\n    tag_577:\n        /* \"#utility.yul\":6854:6914   */\n      swap2\n      pop\n        /* \"#utility.yul\":6809:6924   */\n      pop\n        /* \"#utility.yul\":6463:6931   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6937:7054   */\n    tag_460:\n        /* \"#utility.yul\":7046:7047   */\n      0x00\n        /* \"#utility.yul\":7043:7044   */\n      dup1\n        /* \"#utility.yul\":7036:7048   */\n      revert\n        /* \"#utility.yul\":7060:7177   */\n    tag_461:\n        /* \"#utility.yul\":7169:7170   */\n      0x00\n        /* \"#utility.yul\":7166:7167   */\n      dup1\n        /* \"#utility.yul\":7159:7171   */\n      revert\n        /* \"#utility.yul\":7183:7363   */\n    tag_327:\n        /* \"#utility.yul\":7231:7308   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7228:7229   */\n      0x00\n        /* \"#utility.yul\":7221:7309   */\n      mstore\n        /* \"#utility.yul\":7328:7332   */\n      0x41\n        /* \"#utility.yul\":7325:7326   */\n      0x04\n        /* \"#utility.yul\":7318:7333   */\n      mstore\n        /* \"#utility.yul\":7352:7356   */\n      0x24\n        /* \"#utility.yul\":7349:7350   */\n      0x00\n        /* \"#utility.yul\":7342:7357   */\n      revert\n        /* \"#utility.yul\":7369:7650   */\n    tag_462:\n        /* \"#utility.yul\":7452:7479   */\n      tag_582\n        /* \"#utility.yul\":7474:7478   */\n      dup3\n        /* \"#utility.yul\":7452:7479   */\n      tag_447\n      jump\t// in\n    tag_582:\n        /* \"#utility.yul\":7444:7450   */\n      dup2\n        /* \"#utility.yul\":7440:7480   */\n      add\n        /* \"#utility.yul\":7582:7588   */\n      dup2\n        /* \"#utility.yul\":7570:7580   */\n      dup2\n        /* \"#utility.yul\":7567:7589   */\n      lt\n        /* \"#utility.yul\":7546:7564   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7534:7544   */\n      dup3\n        /* \"#utility.yul\":7531:7565   */\n      gt\n        /* \"#utility.yul\":7528:7590   */\n      or\n        /* \"#utility.yul\":7525:7613   */\n      iszero\n      tag_583\n      jumpi\n        /* \"#utility.yul\":7593:7611   */\n      tag_584\n      tag_327\n      jump\t// in\n    tag_584:\n        /* \"#utility.yul\":7525:7613   */\n    tag_583:\n        /* \"#utility.yul\":7633:7643   */\n      dup1\n        /* \"#utility.yul\":7629:7631   */\n      0x40\n        /* \"#utility.yul\":7622:7644   */\n      mstore\n        /* \"#utility.yul\":7412:7650   */\n      pop\n        /* \"#utility.yul\":7369:7650   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7656:7785   */\n    tag_463:\n        /* \"#utility.yul\":7690:7696   */\n      0x00\n        /* \"#utility.yul\":7717:7737   */\n      tag_586\n      tag_436\n      jump\t// in\n    tag_586:\n        /* \"#utility.yul\":7707:7737   */\n      swap1\n      pop\n        /* \"#utility.yul\":7746:7779   */\n      tag_587\n        /* \"#utility.yul\":7774:7778   */\n      dup3\n        /* \"#utility.yul\":7766:7772   */\n      dup3\n        /* \"#utility.yul\":7746:7779   */\n      tag_462\n      jump\t// in\n    tag_587:\n        /* \"#utility.yul\":7656:7785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7791:8098   */\n    tag_464:\n        /* \"#utility.yul\":7852:7856   */\n      0x00\n        /* \"#utility.yul\":7942:7960   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7934:7940   */\n      dup3\n        /* \"#utility.yul\":7931:7961   */\n      gt\n        /* \"#utility.yul\":7928:7984   */\n      iszero\n      tag_589\n      jumpi\n        /* \"#utility.yul\":7964:7982   */\n      tag_590\n      tag_327\n      jump\t// in\n    tag_590:\n        /* \"#utility.yul\":7928:7984   */\n    tag_589:\n        /* \"#utility.yul\":8002:8031   */\n      tag_591\n        /* \"#utility.yul\":8024:8030   */\n      dup3\n        /* \"#utility.yul\":8002:8031   */\n      tag_447\n      jump\t// in\n    tag_591:\n        /* \"#utility.yul\":7994:8031   */\n      swap1\n      pop\n        /* \"#utility.yul\":8086:8090   */\n      0x20\n        /* \"#utility.yul\":8080:8084   */\n      dup2\n        /* \"#utility.yul\":8076:8091   */\n      add\n        /* \"#utility.yul\":8068:8091   */\n      swap1\n      pop\n        /* \"#utility.yul\":7791:8098   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8104:8250   */\n    tag_465:\n        /* \"#utility.yul\":8201:8207   */\n      dup3\n        /* \"#utility.yul\":8196:8199   */\n      dup2\n        /* \"#utility.yul\":8191:8194   */\n      dup4\n        /* \"#utility.yul\":8178:8208   */\n      calldatacopy\n        /* \"#utility.yul\":8242:8243   */\n      0x00\n        /* \"#utility.yul\":8233:8239   */\n      dup4\n        /* \"#utility.yul\":8228:8231   */\n      dup4\n        /* \"#utility.yul\":8224:8240   */\n      add\n        /* \"#utility.yul\":8217:8244   */\n      mstore\n        /* \"#utility.yul\":8104:8250   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8256:8679   */\n    tag_466:\n        /* \"#utility.yul\":8333:8338   */\n      0x00\n        /* \"#utility.yul\":8358:8423   */\n      tag_594\n        /* \"#utility.yul\":8374:8422   */\n      tag_595\n        /* \"#utility.yul\":8415:8421   */\n      dup5\n        /* \"#utility.yul\":8374:8422   */\n      tag_464\n      jump\t// in\n    tag_595:\n        /* \"#utility.yul\":8358:8423   */\n      tag_463\n      jump\t// in\n    tag_594:\n        /* \"#utility.yul\":8349:8423   */\n      swap1\n      pop\n        /* \"#utility.yul\":8446:8452   */\n      dup3\n        /* \"#utility.yul\":8439:8444   */\n      dup2\n        /* \"#utility.yul\":8432:8453   */\n      mstore\n        /* \"#utility.yul\":8484:8488   */\n      0x20\n        /* \"#utility.yul\":8477:8482   */\n      dup2\n        /* \"#utility.yul\":8473:8489   */\n      add\n        /* \"#utility.yul\":8522:8525   */\n      dup5\n        /* \"#utility.yul\":8513:8519   */\n      dup5\n        /* \"#utility.yul\":8508:8511   */\n      dup5\n        /* \"#utility.yul\":8504:8520   */\n      add\n        /* \"#utility.yul\":8501:8526   */\n      gt\n        /* \"#utility.yul\":8498:8610   */\n      iszero\n      tag_596\n      jumpi\n        /* \"#utility.yul\":8529:8608   */\n      tag_597\n      tag_461\n      jump\t// in\n    tag_597:\n        /* \"#utility.yul\":8498:8610   */\n    tag_596:\n        /* \"#utility.yul\":8619:8673   */\n      tag_598\n        /* \"#utility.yul\":8666:8672   */\n      dup5\n        /* \"#utility.yul\":8661:8664   */\n      dup3\n        /* \"#utility.yul\":8656:8659   */\n      dup6\n        /* \"#utility.yul\":8619:8673   */\n      tag_465\n      jump\t// in\n    tag_598:\n        /* \"#utility.yul\":8339:8679   */\n      pop\n        /* \"#utility.yul\":8256:8679   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8698:9036   */\n    tag_467:\n        /* \"#utility.yul\":8753:8758   */\n      0x00\n        /* \"#utility.yul\":8802:8805   */\n      dup3\n        /* \"#utility.yul\":8795:8799   */\n      0x1f\n        /* \"#utility.yul\":8787:8793   */\n      dup4\n        /* \"#utility.yul\":8783:8800   */\n      add\n        /* \"#utility.yul\":8779:8806   */\n      slt\n        /* \"#utility.yul\":8769:8891   */\n      tag_600\n      jumpi\n        /* \"#utility.yul\":8810:8889   */\n      tag_601\n      tag_460\n      jump\t// in\n    tag_601:\n        /* \"#utility.yul\":8769:8891   */\n    tag_600:\n        /* \"#utility.yul\":8927:8933   */\n      dup2\n        /* \"#utility.yul\":8914:8934   */\n      calldataload\n        /* \"#utility.yul\":8952:9030   */\n      tag_602\n        /* \"#utility.yul\":9026:9029   */\n      dup5\n        /* \"#utility.yul\":9018:9024   */\n      dup3\n        /* \"#utility.yul\":9011:9015   */\n      0x20\n        /* \"#utility.yul\":9003:9009   */\n      dup7\n        /* \"#utility.yul\":8999:9016   */\n      add\n        /* \"#utility.yul\":8952:9030   */\n      tag_466\n      jump\t// in\n    tag_602:\n        /* \"#utility.yul\":8943:9030   */\n      swap2\n      pop\n        /* \"#utility.yul\":8759:9036   */\n      pop\n        /* \"#utility.yul\":8698:9036   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9042:9985   */\n    tag_92:\n        /* \"#utility.yul\":9137:9143   */\n      0x00\n        /* \"#utility.yul\":9145:9151   */\n      dup1\n        /* \"#utility.yul\":9153:9159   */\n      0x00\n        /* \"#utility.yul\":9161:9167   */\n      dup1\n        /* \"#utility.yul\":9210:9213   */\n      0x80\n        /* \"#utility.yul\":9198:9207   */\n      dup6\n        /* \"#utility.yul\":9189:9196   */\n      dup8\n        /* \"#utility.yul\":9185:9208   */\n      sub\n        /* \"#utility.yul\":9181:9214   */\n      slt\n        /* \"#utility.yul\":9178:9298   */\n      iszero\n      tag_604\n      jumpi\n        /* \"#utility.yul\":9217:9296   */\n      tag_605\n      tag_437\n      jump\t// in\n    tag_605:\n        /* \"#utility.yul\":9178:9298   */\n    tag_604:\n        /* \"#utility.yul\":9337:9338   */\n      0x00\n        /* \"#utility.yul\":9362:9415   */\n      tag_606\n        /* \"#utility.yul\":9407:9414   */\n      dup8\n        /* \"#utility.yul\":9398:9404   */\n      dup3\n        /* \"#utility.yul\":9387:9396   */\n      dup9\n        /* \"#utility.yul\":9383:9405   */\n      add\n        /* \"#utility.yul\":9362:9415   */\n      tag_456\n      jump\t// in\n    tag_606:\n        /* \"#utility.yul\":9352:9415   */\n      swap5\n      pop\n        /* \"#utility.yul\":9308:9425   */\n      pop\n        /* \"#utility.yul\":9464:9466   */\n      0x20\n        /* \"#utility.yul\":9490:9543   */\n      tag_607\n        /* \"#utility.yul\":9535:9542   */\n      dup8\n        /* \"#utility.yul\":9526:9532   */\n      dup3\n        /* \"#utility.yul\":9515:9524   */\n      dup9\n        /* \"#utility.yul\":9511:9533   */\n      add\n        /* \"#utility.yul\":9490:9543   */\n      tag_456\n      jump\t// in\n    tag_607:\n        /* \"#utility.yul\":9480:9543   */\n      swap4\n      pop\n        /* \"#utility.yul\":9435:9553   */\n      pop\n        /* \"#utility.yul\":9592:9594   */\n      0x40\n        /* \"#utility.yul\":9618:9671   */\n      tag_608\n        /* \"#utility.yul\":9663:9670   */\n      dup8\n        /* \"#utility.yul\":9654:9660   */\n      dup3\n        /* \"#utility.yul\":9643:9652   */\n      dup9\n        /* \"#utility.yul\":9639:9661   */\n      add\n        /* \"#utility.yul\":9618:9671   */\n      tag_451\n      jump\t// in\n    tag_608:\n        /* \"#utility.yul\":9608:9671   */\n      swap3\n      pop\n        /* \"#utility.yul\":9563:9681   */\n      pop\n        /* \"#utility.yul\":9748:9750   */\n      0x60\n        /* \"#utility.yul\":9737:9746   */\n      dup6\n        /* \"#utility.yul\":9733:9751   */\n      add\n        /* \"#utility.yul\":9720:9752   */\n      calldataload\n        /* \"#utility.yul\":9779:9797   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":9771:9777   */\n      dup2\n        /* \"#utility.yul\":9768:9798   */\n      gt\n        /* \"#utility.yul\":9765:9882   */\n      iszero\n      tag_609\n      jumpi\n        /* \"#utility.yul\":9801:9880   */\n      tag_610\n      tag_438\n      jump\t// in\n    tag_610:\n        /* \"#utility.yul\":9765:9882   */\n    tag_609:\n        /* \"#utility.yul\":9906:9968   */\n      tag_611\n        /* \"#utility.yul\":9960:9967   */\n      dup8\n        /* \"#utility.yul\":9951:9957   */\n      dup3\n        /* \"#utility.yul\":9940:9949   */\n      dup9\n        /* \"#utility.yul\":9936:9958   */\n      add\n        /* \"#utility.yul\":9906:9968   */\n      tag_467\n      jump\t// in\n    tag_611:\n        /* \"#utility.yul\":9896:9968   */\n      swap2\n      pop\n        /* \"#utility.yul\":9691:9978   */\n      pop\n        /* \"#utility.yul\":9042:9985   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9991:10465   */\n    tag_103:\n        /* \"#utility.yul\":10059:10065   */\n      0x00\n        /* \"#utility.yul\":10067:10073   */\n      dup1\n        /* \"#utility.yul\":10116:10118   */\n      0x40\n        /* \"#utility.yul\":10104:10113   */\n      dup4\n        /* \"#utility.yul\":10095:10102   */\n      dup6\n        /* \"#utility.yul\":10091:10114   */\n      sub\n        /* \"#utility.yul\":10087:10119   */\n      slt\n        /* \"#utility.yul\":10084:10203   */\n      iszero\n      tag_613\n      jumpi\n        /* \"#utility.yul\":10122:10201   */\n      tag_614\n      tag_437\n      jump\t// in\n    tag_614:\n        /* \"#utility.yul\":10084:10203   */\n    tag_613:\n        /* \"#utility.yul\":10242:10243   */\n      0x00\n        /* \"#utility.yul\":10267:10320   */\n      tag_615\n        /* \"#utility.yul\":10312:10319   */\n      dup6\n        /* \"#utility.yul\":10303:10309   */\n      dup3\n        /* \"#utility.yul\":10292:10301   */\n      dup7\n        /* \"#utility.yul\":10288:10310   */\n      add\n        /* \"#utility.yul\":10267:10320   */\n      tag_456\n      jump\t// in\n    tag_615:\n        /* \"#utility.yul\":10257:10320   */\n      swap3\n      pop\n        /* \"#utility.yul\":10213:10330   */\n      pop\n        /* \"#utility.yul\":10369:10371   */\n      0x20\n        /* \"#utility.yul\":10395:10448   */\n      tag_616\n        /* \"#utility.yul\":10440:10447   */\n      dup6\n        /* \"#utility.yul\":10431:10437   */\n      dup3\n        /* \"#utility.yul\":10420:10429   */\n      dup7\n        /* \"#utility.yul\":10416:10438   */\n      add\n        /* \"#utility.yul\":10395:10448   */\n      tag_456\n      jump\t// in\n    tag_616:\n        /* \"#utility.yul\":10385:10448   */\n      swap2\n      pop\n        /* \"#utility.yul\":10340:10458   */\n      pop\n        /* \"#utility.yul\":9991:10465   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10471:10651   */\n    tag_468:\n        /* \"#utility.yul\":10519:10596   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10516:10517   */\n      0x00\n        /* \"#utility.yul\":10509:10597   */\n      mstore\n        /* \"#utility.yul\":10616:10620   */\n      0x22\n        /* \"#utility.yul\":10613:10614   */\n      0x04\n        /* \"#utility.yul\":10606:10621   */\n      mstore\n        /* \"#utility.yul\":10640:10644   */\n      0x24\n        /* \"#utility.yul\":10637:10638   */\n      0x00\n        /* \"#utility.yul\":10630:10645   */\n      revert\n        /* \"#utility.yul\":10657:10977   */\n    tag_118:\n        /* \"#utility.yul\":10701:10707   */\n      0x00\n        /* \"#utility.yul\":10738:10739   */\n      0x02\n        /* \"#utility.yul\":10732:10736   */\n      dup3\n        /* \"#utility.yul\":10728:10740   */\n      div\n        /* \"#utility.yul\":10718:10740   */\n      swap1\n      pop\n        /* \"#utility.yul\":10785:10786   */\n      0x01\n        /* \"#utility.yul\":10779:10783   */\n      dup3\n        /* \"#utility.yul\":10775:10787   */\n      and\n        /* \"#utility.yul\":10806:10824   */\n      dup1\n        /* \"#utility.yul\":10796:10877   */\n      tag_619\n      jumpi\n        /* \"#utility.yul\":10862:10866   */\n      0x7f\n        /* \"#utility.yul\":10854:10860   */\n      dup3\n        /* \"#utility.yul\":10850:10867   */\n      and\n        /* \"#utility.yul\":10840:10867   */\n      swap2\n      pop\n        /* \"#utility.yul\":10796:10877   */\n    tag_619:\n        /* \"#utility.yul\":10924:10926   */\n      0x20\n        /* \"#utility.yul\":10916:10922   */\n      dup3\n        /* \"#utility.yul\":10913:10927   */\n      lt\n        /* \"#utility.yul\":10893:10911   */\n      dup2\n        /* \"#utility.yul\":10890:10928   */\n      sub\n        /* \"#utility.yul\":10887:10971   */\n      tag_620\n      jumpi\n        /* \"#utility.yul\":10943:10961   */\n      tag_621\n      tag_468\n      jump\t// in\n    tag_621:\n        /* \"#utility.yul\":10887:10971   */\n    tag_620:\n        /* \"#utility.yul\":10708:10977   */\n      pop\n        /* \"#utility.yul\":10657:10977   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10983:11425   */\n    tag_141:\n        /* \"#utility.yul\":11132:11136   */\n      0x00\n        /* \"#utility.yul\":11170:11172   */\n      0x60\n        /* \"#utility.yul\":11159:11168   */\n      dup3\n        /* \"#utility.yul\":11155:11173   */\n      add\n        /* \"#utility.yul\":11147:11173   */\n      swap1\n      pop\n        /* \"#utility.yul\":11183:11254   */\n      tag_623\n        /* \"#utility.yul\":11251:11252   */\n      0x00\n        /* \"#utility.yul\":11240:11249   */\n      dup4\n        /* \"#utility.yul\":11236:11253   */\n      add\n        /* \"#utility.yul\":11227:11233   */\n      dup7\n        /* \"#utility.yul\":11183:11254   */\n      tag_454\n      jump\t// in\n    tag_623:\n        /* \"#utility.yul\":11264:11336   */\n      tag_624\n        /* \"#utility.yul\":11332:11334   */\n      0x20\n        /* \"#utility.yul\":11321:11330   */\n      dup4\n        /* \"#utility.yul\":11317:11335   */\n      add\n        /* \"#utility.yul\":11308:11314   */\n      dup6\n        /* \"#utility.yul\":11264:11336   */\n      tag_457\n      jump\t// in\n    tag_624:\n        /* \"#utility.yul\":11346:11418   */\n      tag_625\n        /* \"#utility.yul\":11414:11416   */\n      0x40\n        /* \"#utility.yul\":11403:11412   */\n      dup4\n        /* \"#utility.yul\":11399:11417   */\n      add\n        /* \"#utility.yul\":11390:11396   */\n      dup5\n        /* \"#utility.yul\":11346:11418   */\n      tag_454\n      jump\t// in\n    tag_625:\n        /* \"#utility.yul\":10983:11425   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11431:11516   */\n    tag_469:\n        /* \"#utility.yul\":11476:11483   */\n      0x00\n        /* \"#utility.yul\":11505:11510   */\n      dup2\n        /* \"#utility.yul\":11494:11510   */\n      swap1\n      pop\n        /* \"#utility.yul\":11431:11516   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11522:11623   */\n    tag_470:\n        /* \"#utility.yul\":11558:11565   */\n      0x00\n        /* \"#utility.yul\":11598:11616   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":11591:11596   */\n      dup3\n        /* \"#utility.yul\":11587:11617   */\n      and\n        /* \"#utility.yul\":11576:11617   */\n      swap1\n      pop\n        /* \"#utility.yul\":11522:11623   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11629:11689   */\n    tag_471:\n        /* \"#utility.yul\":11657:11660   */\n      0x00\n        /* \"#utility.yul\":11678:11683   */\n      dup2\n        /* \"#utility.yul\":11671:11683   */\n      swap1\n      pop\n        /* \"#utility.yul\":11629:11689   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11695:11851   */\n    tag_472:\n        /* \"#utility.yul\":11752:11761   */\n      0x00\n        /* \"#utility.yul\":11785:11845   */\n      tag_630\n        /* \"#utility.yul\":11802:11844   */\n      tag_631\n        /* \"#utility.yul\":11811:11843   */\n      tag_632\n        /* \"#utility.yul\":11837:11842   */\n      dup5\n        /* \"#utility.yul\":11811:11843   */\n      tag_469\n      jump\t// in\n    tag_632:\n        /* \"#utility.yul\":11802:11844   */\n      tag_471\n      jump\t// in\n    tag_631:\n        /* \"#utility.yul\":11785:11845   */\n      tag_470\n      jump\t// in\n    tag_630:\n        /* \"#utility.yul\":11772:11845   */\n      swap1\n      pop\n        /* \"#utility.yul\":11695:11851   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11857:12002   */\n    tag_473:\n        /* \"#utility.yul\":11951:11995   */\n      tag_634\n        /* \"#utility.yul\":11989:11994   */\n      dup2\n        /* \"#utility.yul\":11951:11995   */\n      tag_472\n      jump\t// in\n    tag_634:\n        /* \"#utility.yul\":11946:11949   */\n      dup3\n        /* \"#utility.yul\":11939:11996   */\n      mstore\n        /* \"#utility.yul\":11857:12002   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12008:12244   */\n    tag_214:\n        /* \"#utility.yul\":12108:12112   */\n      0x00\n        /* \"#utility.yul\":12146:12148   */\n      0x20\n        /* \"#utility.yul\":12135:12144   */\n      dup3\n        /* \"#utility.yul\":12131:12149   */\n      add\n        /* \"#utility.yul\":12123:12149   */\n      swap1\n      pop\n        /* \"#utility.yul\":12159:12237   */\n      tag_636\n        /* \"#utility.yul\":12234:12235   */\n      0x00\n        /* \"#utility.yul\":12223:12232   */\n      dup4\n        /* \"#utility.yul\":12219:12236   */\n      add\n        /* \"#utility.yul\":12210:12216   */\n      dup5\n        /* \"#utility.yul\":12159:12237   */\n      tag_473\n      jump\t// in\n    tag_636:\n        /* \"#utility.yul\":12008:12244   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12250:12398   */\n    tag_474:\n        /* \"#utility.yul\":12352:12363   */\n      0x00\n        /* \"#utility.yul\":12389:12392   */\n      dup2\n        /* \"#utility.yul\":12374:12392   */\n      swap1\n      pop\n        /* \"#utility.yul\":12250:12398   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12404:12794   */\n    tag_475:\n        /* \"#utility.yul\":12510:12513   */\n      0x00\n        /* \"#utility.yul\":12538:12577   */\n      tag_639\n        /* \"#utility.yul\":12571:12576   */\n      dup3\n        /* \"#utility.yul\":12538:12577   */\n      tag_444\n      jump\t// in\n    tag_639:\n        /* \"#utility.yul\":12593:12682   */\n      tag_640\n        /* \"#utility.yul\":12675:12681   */\n      dup2\n        /* \"#utility.yul\":12670:12673   */\n      dup6\n        /* \"#utility.yul\":12593:12682   */\n      tag_474\n      jump\t// in\n    tag_640:\n        /* \"#utility.yul\":12586:12682   */\n      swap4\n      pop\n        /* \"#utility.yul\":12691:12756   */\n      tag_641\n        /* \"#utility.yul\":12749:12755   */\n      dup2\n        /* \"#utility.yul\":12744:12747   */\n      dup6\n        /* \"#utility.yul\":12737:12741   */\n      0x20\n        /* \"#utility.yul\":12730:12735   */\n      dup7\n        /* \"#utility.yul\":12726:12742   */\n      add\n        /* \"#utility.yul\":12691:12756   */\n      tag_446\n      jump\t// in\n    tag_641:\n        /* \"#utility.yul\":12781:12787   */\n      dup1\n        /* \"#utility.yul\":12776:12779   */\n      dup5\n        /* \"#utility.yul\":12772:12788   */\n      add\n        /* \"#utility.yul\":12765:12788   */\n      swap2\n      pop\n        /* \"#utility.yul\":12514:12794   */\n      pop\n        /* \"#utility.yul\":12404:12794   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12800:13235   */\n    tag_224:\n        /* \"#utility.yul\":12980:12983   */\n      0x00\n        /* \"#utility.yul\":13002:13097   */\n      tag_643\n        /* \"#utility.yul\":13093:13096   */\n      dup3\n        /* \"#utility.yul\":13084:13090   */\n      dup6\n        /* \"#utility.yul\":13002:13097   */\n      tag_475\n      jump\t// in\n    tag_643:\n        /* \"#utility.yul\":12995:13097   */\n      swap2\n      pop\n        /* \"#utility.yul\":13114:13209   */\n      tag_644\n        /* \"#utility.yul\":13205:13208   */\n      dup3\n        /* \"#utility.yul\":13196:13202   */\n      dup5\n        /* \"#utility.yul\":13114:13209   */\n      tag_475\n      jump\t// in\n    tag_644:\n        /* \"#utility.yul\":13107:13209   */\n      swap2\n      pop\n        /* \"#utility.yul\":13226:13229   */\n      dup2\n        /* \"#utility.yul\":13219:13229   */\n      swap1\n      pop\n        /* \"#utility.yul\":12800:13235   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13241:13339   */\n    tag_476:\n        /* \"#utility.yul\":13292:13298   */\n      0x00\n        /* \"#utility.yul\":13326:13331   */\n      dup2\n        /* \"#utility.yul\":13320:13332   */\n      mload\n        /* \"#utility.yul\":13310:13332   */\n      swap1\n      pop\n        /* \"#utility.yul\":13241:13339   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13345:13513   */\n    tag_477:\n        /* \"#utility.yul\":13428:13439   */\n      0x00\n        /* \"#utility.yul\":13462:13468   */\n      dup3\n        /* \"#utility.yul\":13457:13460   */\n      dup3\n        /* \"#utility.yul\":13450:13469   */\n      mstore\n        /* \"#utility.yul\":13502:13506   */\n      0x20\n        /* \"#utility.yul\":13497:13500   */\n      dup3\n        /* \"#utility.yul\":13493:13507   */\n      add\n        /* \"#utility.yul\":13478:13507   */\n      swap1\n      pop\n        /* \"#utility.yul\":13345:13513   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13519:13892   */\n    tag_478:\n        /* \"#utility.yul\":13605:13608   */\n      0x00\n        /* \"#utility.yul\":13633:13671   */\n      tag_648\n        /* \"#utility.yul\":13665:13670   */\n      dup3\n        /* \"#utility.yul\":13633:13671   */\n      tag_476\n      jump\t// in\n    tag_648:\n        /* \"#utility.yul\":13687:13757   */\n      tag_649\n        /* \"#utility.yul\":13750:13756   */\n      dup2\n        /* \"#utility.yul\":13745:13748   */\n      dup6\n        /* \"#utility.yul\":13687:13757   */\n      tag_477\n      jump\t// in\n    tag_649:\n        /* \"#utility.yul\":13680:13757   */\n      swap4\n      pop\n        /* \"#utility.yul\":13766:13831   */\n      tag_650\n        /* \"#utility.yul\":13824:13830   */\n      dup2\n        /* \"#utility.yul\":13819:13822   */\n      dup6\n        /* \"#utility.yul\":13812:13816   */\n      0x20\n        /* \"#utility.yul\":13805:13810   */\n      dup7\n        /* \"#utility.yul\":13801:13817   */\n      add\n        /* \"#utility.yul\":13766:13831   */\n      tag_446\n      jump\t// in\n    tag_650:\n        /* \"#utility.yul\":13856:13885   */\n      tag_651\n        /* \"#utility.yul\":13878:13884   */\n      dup2\n        /* \"#utility.yul\":13856:13885   */\n      tag_447\n      jump\t// in\n    tag_651:\n        /* \"#utility.yul\":13851:13854   */\n      dup5\n        /* \"#utility.yul\":13847:13886   */\n      add\n        /* \"#utility.yul\":13840:13886   */\n      swap2\n      pop\n        /* \"#utility.yul\":13609:13892   */\n      pop\n        /* \"#utility.yul\":13519:13892   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13898:14538   */\n    tag_285:\n        /* \"#utility.yul\":14093:14097   */\n      0x00\n        /* \"#utility.yul\":14131:14134   */\n      0x80\n        /* \"#utility.yul\":14120:14129   */\n      dup3\n        /* \"#utility.yul\":14116:14135   */\n      add\n        /* \"#utility.yul\":14108:14135   */\n      swap1\n      pop\n        /* \"#utility.yul\":14145:14216   */\n      tag_653\n        /* \"#utility.yul\":14213:14214   */\n      0x00\n        /* \"#utility.yul\":14202:14211   */\n      dup4\n        /* \"#utility.yul\":14198:14215   */\n      add\n        /* \"#utility.yul\":14189:14195   */\n      dup8\n        /* \"#utility.yul\":14145:14216   */\n      tag_454\n      jump\t// in\n    tag_653:\n        /* \"#utility.yul\":14226:14298   */\n      tag_654\n        /* \"#utility.yul\":14294:14296   */\n      0x20\n        /* \"#utility.yul\":14283:14292   */\n      dup4\n        /* \"#utility.yul\":14279:14297   */\n      add\n        /* \"#utility.yul\":14270:14276   */\n      dup7\n        /* \"#utility.yul\":14226:14298   */\n      tag_454\n      jump\t// in\n    tag_654:\n        /* \"#utility.yul\":14308:14380   */\n      tag_655\n        /* \"#utility.yul\":14376:14378   */\n      0x40\n        /* \"#utility.yul\":14365:14374   */\n      dup4\n        /* \"#utility.yul\":14361:14379   */\n      add\n        /* \"#utility.yul\":14352:14358   */\n      dup6\n        /* \"#utility.yul\":14308:14380   */\n      tag_457\n      jump\t// in\n    tag_655:\n        /* \"#utility.yul\":14427:14436   */\n      dup2\n        /* \"#utility.yul\":14421:14425   */\n      dup2\n        /* \"#utility.yul\":14417:14437   */\n      sub\n        /* \"#utility.yul\":14412:14414   */\n      0x60\n        /* \"#utility.yul\":14401:14410   */\n      dup4\n        /* \"#utility.yul\":14397:14415   */\n      add\n        /* \"#utility.yul\":14390:14438   */\n      mstore\n        /* \"#utility.yul\":14455:14531   */\n      tag_656\n        /* \"#utility.yul\":14526:14530   */\n      dup2\n        /* \"#utility.yul\":14517:14523   */\n      dup5\n        /* \"#utility.yul\":14455:14531   */\n      tag_478\n      jump\t// in\n    tag_656:\n        /* \"#utility.yul\":14447:14531   */\n      swap1\n      pop\n        /* \"#utility.yul\":13898:14538   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14544:14685   */\n    tag_479:\n        /* \"#utility.yul\":14600:14605   */\n      0x00\n        /* \"#utility.yul\":14631:14637   */\n      dup2\n        /* \"#utility.yul\":14625:14638   */\n      mload\n        /* \"#utility.yul\":14616:14638   */\n      swap1\n      pop\n        /* \"#utility.yul\":14647:14679   */\n      tag_658\n        /* \"#utility.yul\":14673:14678   */\n      dup2\n        /* \"#utility.yul\":14647:14679   */\n      tag_440\n      jump\t// in\n    tag_658:\n        /* \"#utility.yul\":14544:14685   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14691:15040   */\n    tag_288:\n        /* \"#utility.yul\":14760:14766   */\n      0x00\n        /* \"#utility.yul\":14809:14811   */\n      0x20\n        /* \"#utility.yul\":14797:14806   */\n      dup3\n        /* \"#utility.yul\":14788:14795   */\n      dup5\n        /* \"#utility.yul\":14784:14807   */\n      sub\n        /* \"#utility.yul\":14780:14812   */\n      slt\n        /* \"#utility.yul\":14777:14896   */\n      iszero\n      tag_660\n      jumpi\n        /* \"#utility.yul\":14815:14894   */\n      tag_661\n      tag_437\n      jump\t// in\n    tag_661:\n        /* \"#utility.yul\":14777:14896   */\n    tag_660:\n        /* \"#utility.yul\":14935:14936   */\n      0x00\n        /* \"#utility.yul\":14960:15023   */\n      tag_662\n        /* \"#utility.yul\":15015:15022   */\n      dup5\n        /* \"#utility.yul\":15006:15012   */\n      dup3\n        /* \"#utility.yul\":14995:15004   */\n      dup6\n        /* \"#utility.yul\":14991:15013   */\n      add\n        /* \"#utility.yul\":14960:15023   */\n      tag_479\n      jump\t// in\n    tag_662:\n        /* \"#utility.yul\":14950:15023   */\n      swap2\n      pop\n        /* \"#utility.yul\":14906:15033   */\n      pop\n        /* \"#utility.yul\":14691:15040   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15046:15226   */\n    tag_333:\n        /* \"#utility.yul\":15094:15171   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15091:15092   */\n      0x00\n        /* \"#utility.yul\":15084:15172   */\n      mstore\n        /* \"#utility.yul\":15191:15195   */\n      0x12\n        /* \"#utility.yul\":15188:15189   */\n      0x04\n        /* \"#utility.yul\":15181:15196   */\n      mstore\n        /* \"#utility.yul\":15215:15219   */\n      0x24\n        /* \"#utility.yul\":15212:15213   */\n      0x00\n        /* \"#utility.yul\":15205:15220   */\n      revert\n        /* \"#utility.yul\":15232:15373   */\n    tag_480:\n        /* \"#utility.yul\":15281:15285   */\n      0x00\n        /* \"#utility.yul\":15304:15307   */\n      dup2\n        /* \"#utility.yul\":15296:15307   */\n      swap1\n      pop\n        /* \"#utility.yul\":15327:15330   */\n      dup2\n        /* \"#utility.yul\":15324:15325   */\n      0x00\n        /* \"#utility.yul\":15317:15331   */\n      mstore\n        /* \"#utility.yul\":15361:15365   */\n      0x20\n        /* \"#utility.yul\":15358:15359   */\n      0x00\n        /* \"#utility.yul\":15348:15366   */\n      keccak256\n        /* \"#utility.yul\":15340:15366   */\n      swap1\n      pop\n        /* \"#utility.yul\":15232:15373   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15379:15472   */\n    tag_481:\n        /* \"#utility.yul\":15416:15422   */\n      0x00\n        /* \"#utility.yul\":15463:15465   */\n      0x20\n        /* \"#utility.yul\":15458:15460   */\n      0x1f\n        /* \"#utility.yul\":15451:15456   */\n      dup4\n        /* \"#utility.yul\":15447:15461   */\n      add\n        /* \"#utility.yul\":15443:15466   */\n      div\n        /* \"#utility.yul\":15433:15466   */\n      swap1\n      pop\n        /* \"#utility.yul\":15379:15472   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15478:15585   */\n    tag_482:\n        /* \"#utility.yul\":15522:15530   */\n      0x00\n        /* \"#utility.yul\":15572:15577   */\n      dup3\n        /* \"#utility.yul\":15566:15570   */\n      dup3\n        /* \"#utility.yul\":15562:15578   */\n      shl\n        /* \"#utility.yul\":15541:15578   */\n      swap1\n      pop\n        /* \"#utility.yul\":15478:15585   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15591:15984   */\n    tag_483:\n        /* \"#utility.yul\":15660:15666   */\n      0x00\n        /* \"#utility.yul\":15710:15711   */\n      0x08\n        /* \"#utility.yul\":15698:15708   */\n      dup4\n        /* \"#utility.yul\":15694:15712   */\n      mul\n        /* \"#utility.yul\":15733:15830   */\n      tag_668\n        /* \"#utility.yul\":15763:15829   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":15752:15761   */\n      dup3\n        /* \"#utility.yul\":15733:15830   */\n      tag_482\n      jump\t// in\n    tag_668:\n        /* \"#utility.yul\":15851:15890   */\n      tag_669\n        /* \"#utility.yul\":15881:15889   */\n      dup7\n        /* \"#utility.yul\":15870:15879   */\n      dup4\n        /* \"#utility.yul\":15851:15890   */\n      tag_482\n      jump\t// in\n    tag_669:\n        /* \"#utility.yul\":15839:15890   */\n      swap6\n      pop\n        /* \"#utility.yul\":15923:15927   */\n      dup1\n        /* \"#utility.yul\":15919:15928   */\n      not\n        /* \"#utility.yul\":15912:15917   */\n      dup5\n        /* \"#utility.yul\":15908:15929   */\n      and\n        /* \"#utility.yul\":15899:15929   */\n      swap4\n      pop\n        /* \"#utility.yul\":15972:15976   */\n      dup1\n        /* \"#utility.yul\":15962:15970   */\n      dup7\n        /* \"#utility.yul\":15958:15977   */\n      and\n        /* \"#utility.yul\":15951:15956   */\n      dup5\n        /* \"#utility.yul\":15948:15978   */\n      or\n        /* \"#utility.yul\":15938:15978   */\n      swap3\n      pop\n        /* \"#utility.yul\":15667:15984   */\n      pop\n      pop\n        /* \"#utility.yul\":15591:15984   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15990:16132   */\n    tag_484:\n        /* \"#utility.yul\":16040:16049   */\n      0x00\n        /* \"#utility.yul\":16073:16126   */\n      tag_671\n        /* \"#utility.yul\":16091:16125   */\n      tag_672\n        /* \"#utility.yul\":16100:16124   */\n      tag_673\n        /* \"#utility.yul\":16118:16123   */\n      dup5\n        /* \"#utility.yul\":16100:16124   */\n      tag_449\n      jump\t// in\n    tag_673:\n        /* \"#utility.yul\":16091:16125   */\n      tag_471\n      jump\t// in\n    tag_672:\n        /* \"#utility.yul\":16073:16126   */\n      tag_449\n      jump\t// in\n    tag_671:\n        /* \"#utility.yul\":16060:16126   */\n      swap1\n      pop\n        /* \"#utility.yul\":15990:16132   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16138:16213   */\n    tag_485:\n        /* \"#utility.yul\":16181:16184   */\n      0x00\n        /* \"#utility.yul\":16202:16207   */\n      dup2\n        /* \"#utility.yul\":16195:16207   */\n      swap1\n      pop\n        /* \"#utility.yul\":16138:16213   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16219:16488   */\n    tag_486:\n        /* \"#utility.yul\":16329:16368   */\n      tag_676\n        /* \"#utility.yul\":16360:16367   */\n      dup4\n        /* \"#utility.yul\":16329:16368   */\n      tag_484\n      jump\t// in\n    tag_676:\n        /* \"#utility.yul\":16390:16481   */\n      tag_677\n        /* \"#utility.yul\":16439:16480   */\n      tag_678\n        /* \"#utility.yul\":16463:16479   */\n      dup3\n        /* \"#utility.yul\":16439:16480   */\n      tag_485\n      jump\t// in\n    tag_678:\n        /* \"#utility.yul\":16431:16437   */\n      dup5\n        /* \"#utility.yul\":16424:16428   */\n      dup5\n        /* \"#utility.yul\":16418:16429   */\n      sload\n        /* \"#utility.yul\":16390:16481   */\n      tag_483\n      jump\t// in\n    tag_677:\n        /* \"#utility.yul\":16384:16388   */\n      dup3\n        /* \"#utility.yul\":16377:16482   */\n      sstore\n        /* \"#utility.yul\":16295:16488   */\n      pop\n        /* \"#utility.yul\":16219:16488   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16494:16567   */\n    tag_487:\n        /* \"#utility.yul\":16539:16542   */\n      0x00\n        /* \"#utility.yul\":16494:16567   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":16573:16762   */\n    tag_488:\n        /* \"#utility.yul\":16650:16682   */\n      tag_681\n      tag_487\n      jump\t// in\n    tag_681:\n        /* \"#utility.yul\":16691:16756   */\n      tag_682\n        /* \"#utility.yul\":16749:16755   */\n      dup2\n        /* \"#utility.yul\":16741:16747   */\n      dup5\n        /* \"#utility.yul\":16735:16739   */\n      dup5\n        /* \"#utility.yul\":16691:16756   */\n      tag_486\n      jump\t// in\n    tag_682:\n        /* \"#utility.yul\":16626:16762   */\n      pop\n        /* \"#utility.yul\":16573:16762   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16768:16954   */\n    tag_489:\n        /* \"#utility.yul\":16828:16948   */\n    tag_684:\n        /* \"#utility.yul\":16845:16848   */\n      dup2\n        /* \"#utility.yul\":16838:16843   */\n      dup2\n        /* \"#utility.yul\":16835:16849   */\n      lt\n        /* \"#utility.yul\":16828:16948   */\n      iszero\n      tag_686\n      jumpi\n        /* \"#utility.yul\":16899:16938   */\n      tag_687\n        /* \"#utility.yul\":16936:16937   */\n      0x00\n        /* \"#utility.yul\":16929:16934   */\n      dup3\n        /* \"#utility.yul\":16899:16938   */\n      tag_488\n      jump\t// in\n    tag_687:\n        /* \"#utility.yul\":16872:16873   */\n      0x01\n        /* \"#utility.yul\":16865:16870   */\n      dup2\n        /* \"#utility.yul\":16861:16874   */\n      add\n        /* \"#utility.yul\":16852:16874   */\n      swap1\n      pop\n        /* \"#utility.yul\":16828:16948   */\n      jump(tag_684)\n    tag_686:\n        /* \"#utility.yul\":16768:16954   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16960:17503   */\n    tag_490:\n        /* \"#utility.yul\":17061:17063   */\n      0x1f\n        /* \"#utility.yul\":17056:17059   */\n      dup3\n        /* \"#utility.yul\":17053:17064   */\n      gt\n        /* \"#utility.yul\":17050:17496   */\n      iszero\n      tag_689\n      jumpi\n        /* \"#utility.yul\":17095:17133   */\n      tag_690\n        /* \"#utility.yul\":17127:17132   */\n      dup2\n        /* \"#utility.yul\":17095:17133   */\n      tag_480\n      jump\t// in\n    tag_690:\n        /* \"#utility.yul\":17179:17208   */\n      tag_691\n        /* \"#utility.yul\":17197:17207   */\n      dup5\n        /* \"#utility.yul\":17179:17208   */\n      tag_481\n      jump\t// in\n    tag_691:\n        /* \"#utility.yul\":17169:17177   */\n      dup2\n        /* \"#utility.yul\":17165:17209   */\n      add\n        /* \"#utility.yul\":17362:17364   */\n      0x20\n        /* \"#utility.yul\":17350:17360   */\n      dup6\n        /* \"#utility.yul\":17347:17365   */\n      lt\n        /* \"#utility.yul\":17344:17393   */\n      iszero\n      tag_692\n      jumpi\n        /* \"#utility.yul\":17383:17391   */\n      dup2\n        /* \"#utility.yul\":17368:17391   */\n      swap1\n      pop\n        /* \"#utility.yul\":17344:17393   */\n    tag_692:\n        /* \"#utility.yul\":17406:17486   */\n      tag_693\n        /* \"#utility.yul\":17462:17484   */\n      tag_694\n        /* \"#utility.yul\":17480:17483   */\n      dup6\n        /* \"#utility.yul\":17462:17484   */\n      tag_481\n      jump\t// in\n    tag_694:\n        /* \"#utility.yul\":17452:17460   */\n      dup4\n        /* \"#utility.yul\":17448:17485   */\n      add\n        /* \"#utility.yul\":17435:17446   */\n      dup3\n        /* \"#utility.yul\":17406:17486   */\n      tag_489\n      jump\t// in\n    tag_693:\n        /* \"#utility.yul\":17065:17496   */\n      pop\n      pop\n        /* \"#utility.yul\":17050:17496   */\n    tag_689:\n        /* \"#utility.yul\":16960:17503   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17509:17626   */\n    tag_491:\n        /* \"#utility.yul\":17563:17571   */\n      0x00\n        /* \"#utility.yul\":17613:17618   */\n      dup3\n        /* \"#utility.yul\":17607:17611   */\n      dup3\n        /* \"#utility.yul\":17603:17619   */\n      shr\n        /* \"#utility.yul\":17582:17619   */\n      swap1\n      pop\n        /* \"#utility.yul\":17509:17626   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17632:17801   */\n    tag_492:\n        /* \"#utility.yul\":17676:17682   */\n      0x00\n        /* \"#utility.yul\":17709:17760   */\n      tag_697\n        /* \"#utility.yul\":17757:17758   */\n      0x00\n        /* \"#utility.yul\":17753:17759   */\n      not\n        /* \"#utility.yul\":17745:17750   */\n      dup5\n        /* \"#utility.yul\":17742:17743   */\n      0x08\n        /* \"#utility.yul\":17738:17751   */\n      mul\n        /* \"#utility.yul\":17709:17760   */\n      tag_491\n      jump\t// in\n    tag_697:\n        /* \"#utility.yul\":17705:17761   */\n      not\n        /* \"#utility.yul\":17790:17794   */\n      dup1\n        /* \"#utility.yul\":17784:17788   */\n      dup4\n        /* \"#utility.yul\":17780:17795   */\n      and\n        /* \"#utility.yul\":17770:17795   */\n      swap2\n      pop\n        /* \"#utility.yul\":17683:17801   */\n      pop\n        /* \"#utility.yul\":17632:17801   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17806:18101   */\n    tag_493:\n        /* \"#utility.yul\":17882:17886   */\n      0x00\n        /* \"#utility.yul\":18028:18057   */\n      tag_699\n        /* \"#utility.yul\":18053:18056   */\n      dup4\n        /* \"#utility.yul\":18047:18051   */\n      dup4\n        /* \"#utility.yul\":18028:18057   */\n      tag_492\n      jump\t// in\n    tag_699:\n        /* \"#utility.yul\":18020:18057   */\n      swap2\n      pop\n        /* \"#utility.yul\":18090:18093   */\n      dup3\n        /* \"#utility.yul\":18087:18088   */\n      0x02\n        /* \"#utility.yul\":18083:18094   */\n      mul\n        /* \"#utility.yul\":18077:18081   */\n      dup3\n        /* \"#utility.yul\":18074:18095   */\n      or\n        /* \"#utility.yul\":18066:18095   */\n      swap1\n      pop\n        /* \"#utility.yul\":17806:18101   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18106:19501   */\n    tag_372:\n        /* \"#utility.yul\":18223:18260   */\n      tag_701\n        /* \"#utility.yul\":18256:18259   */\n      dup3\n        /* \"#utility.yul\":18223:18260   */\n      tag_444\n      jump\t// in\n    tag_701:\n        /* \"#utility.yul\":18325:18343   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":18317:18323   */\n      dup2\n        /* \"#utility.yul\":18314:18344   */\n      gt\n        /* \"#utility.yul\":18311:18367   */\n      iszero\n      tag_702\n      jumpi\n        /* \"#utility.yul\":18347:18365   */\n      tag_703\n      tag_327\n      jump\t// in\n    tag_703:\n        /* \"#utility.yul\":18311:18367   */\n    tag_702:\n        /* \"#utility.yul\":18391:18429   */\n      tag_704\n        /* \"#utility.yul\":18423:18427   */\n      dup3\n        /* \"#utility.yul\":18417:18428   */\n      sload\n        /* \"#utility.yul\":18391:18429   */\n      tag_118\n      jump\t// in\n    tag_704:\n        /* \"#utility.yul\":18476:18543   */\n      tag_705\n        /* \"#utility.yul\":18536:18542   */\n      dup3\n        /* \"#utility.yul\":18528:18534   */\n      dup3\n        /* \"#utility.yul\":18522:18526   */\n      dup6\n        /* \"#utility.yul\":18476:18543   */\n      tag_490\n      jump\t// in\n    tag_705:\n        /* \"#utility.yul\":18570:18571   */\n      0x00\n        /* \"#utility.yul\":18594:18598   */\n      0x20\n        /* \"#utility.yul\":18581:18598   */\n      swap1\n      pop\n        /* \"#utility.yul\":18626:18628   */\n      0x1f\n        /* \"#utility.yul\":18618:18624   */\n      dup4\n        /* \"#utility.yul\":18615:18629   */\n      gt\n        /* \"#utility.yul\":18643:18644   */\n      0x01\n        /* \"#utility.yul\":18638:19256   */\n      dup2\n      eq\n      tag_707\n      jumpi\n        /* \"#utility.yul\":19300:19301   */\n      0x00\n        /* \"#utility.yul\":19317:19323   */\n      dup5\n        /* \"#utility.yul\":19314:19391   */\n      iszero\n      tag_708\n      jumpi\n        /* \"#utility.yul\":19366:19375   */\n      dup3\n        /* \"#utility.yul\":19361:19364   */\n      dup8\n        /* \"#utility.yul\":19357:19376   */\n      add\n        /* \"#utility.yul\":19351:19377   */\n      mload\n        /* \"#utility.yul\":19342:19377   */\n      swap1\n      pop\n        /* \"#utility.yul\":19314:19391   */\n    tag_708:\n        /* \"#utility.yul\":19417:19484   */\n      tag_709\n        /* \"#utility.yul\":19477:19483   */\n      dup6\n        /* \"#utility.yul\":19470:19475   */\n      dup3\n        /* \"#utility.yul\":19417:19484   */\n      tag_493\n      jump\t// in\n    tag_709:\n        /* \"#utility.yul\":19411:19415   */\n      dup7\n        /* \"#utility.yul\":19404:19485   */\n      sstore\n        /* \"#utility.yul\":19273:19495   */\n      pop\n        /* \"#utility.yul\":18608:19495   */\n      jump(tag_706)\n        /* \"#utility.yul\":18638:19256   */\n    tag_707:\n        /* \"#utility.yul\":18690:18694   */\n      0x1f\n        /* \"#utility.yul\":18686:18695   */\n      not\n        /* \"#utility.yul\":18678:18684   */\n      dup5\n        /* \"#utility.yul\":18674:18696   */\n      and\n        /* \"#utility.yul\":18724:18761   */\n      tag_710\n        /* \"#utility.yul\":18756:18760   */\n      dup7\n        /* \"#utility.yul\":18724:18761   */\n      tag_480\n      jump\t// in\n    tag_710:\n        /* \"#utility.yul\":18783:18784   */\n      0x00\n        /* \"#utility.yul\":18797:19005   */\n    tag_711:\n        /* \"#utility.yul\":18811:18818   */\n      dup3\n        /* \"#utility.yul\":18808:18809   */\n      dup2\n        /* \"#utility.yul\":18805:18819   */\n      lt\n        /* \"#utility.yul\":18797:19005   */\n      iszero\n      tag_713\n      jumpi\n        /* \"#utility.yul\":18890:18899   */\n      dup5\n        /* \"#utility.yul\":18885:18888   */\n      dup10\n        /* \"#utility.yul\":18881:18900   */\n      add\n        /* \"#utility.yul\":18875:18901   */\n      mload\n        /* \"#utility.yul\":18867:18873   */\n      dup3\n        /* \"#utility.yul\":18860:18902   */\n      sstore\n        /* \"#utility.yul\":18941:18942   */\n      0x01\n        /* \"#utility.yul\":18933:18939   */\n      dup3\n        /* \"#utility.yul\":18929:18943   */\n      add\n        /* \"#utility.yul\":18919:18943   */\n      swap2\n      pop\n        /* \"#utility.yul\":18988:18990   */\n      0x20\n        /* \"#utility.yul\":18977:18986   */\n      dup6\n        /* \"#utility.yul\":18973:18991   */\n      add\n        /* \"#utility.yul\":18960:18991   */\n      swap5\n      pop\n        /* \"#utility.yul\":18834:18838   */\n      0x20\n        /* \"#utility.yul\":18831:18832   */\n      dup2\n        /* \"#utility.yul\":18827:18839   */\n      add\n        /* \"#utility.yul\":18822:18839   */\n      swap1\n      pop\n        /* \"#utility.yul\":18797:19005   */\n      jump(tag_711)\n    tag_713:\n        /* \"#utility.yul\":19033:19039   */\n      dup7\n        /* \"#utility.yul\":19024:19031   */\n      dup4\n        /* \"#utility.yul\":19021:19040   */\n      lt\n        /* \"#utility.yul\":19018:19197   */\n      iszero\n      tag_714\n      jumpi\n        /* \"#utility.yul\":19091:19100   */\n      dup5\n        /* \"#utility.yul\":19086:19089   */\n      dup10\n        /* \"#utility.yul\":19082:19101   */\n      add\n        /* \"#utility.yul\":19076:19102   */\n      mload\n        /* \"#utility.yul\":19134:19182   */\n      tag_715\n        /* \"#utility.yul\":19176:19180   */\n      0x1f\n        /* \"#utility.yul\":19168:19174   */\n      dup10\n        /* \"#utility.yul\":19164:19181   */\n      and\n        /* \"#utility.yul\":19153:19162   */\n      dup3\n        /* \"#utility.yul\":19134:19182   */\n      tag_492\n      jump\t// in\n    tag_715:\n        /* \"#utility.yul\":19126:19132   */\n      dup4\n        /* \"#utility.yul\":19119:19183   */\n      sstore\n        /* \"#utility.yul\":19041:19197   */\n      pop\n        /* \"#utility.yul\":19018:19197   */\n    tag_714:\n        /* \"#utility.yul\":19243:19244   */\n      0x01\n        /* \"#utility.yul\":19239:19240   */\n      0x02\n        /* \"#utility.yul\":19231:19237   */\n      dup9\n        /* \"#utility.yul\":19227:19241   */\n      mul\n        /* \"#utility.yul\":19223:19245   */\n      add\n        /* \"#utility.yul\":19217:19221   */\n      dup9\n        /* \"#utility.yul\":19210:19246   */\n      sstore\n        /* \"#utility.yul\":18645:19256   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":18608:19495   */\n    tag_706:\n      pop\n        /* \"#utility.yul\":18198:19501   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":18106:19501   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19507:19839   */\n    tag_429:\n        /* \"#utility.yul\":19628:19632   */\n      0x00\n        /* \"#utility.yul\":19666:19668   */\n      0x40\n        /* \"#utility.yul\":19655:19664   */\n      dup3\n        /* \"#utility.yul\":19651:19669   */\n      add\n        /* \"#utility.yul\":19643:19669   */\n      swap1\n      pop\n        /* \"#utility.yul\":19679:19750   */\n      tag_717\n        /* \"#utility.yul\":19747:19748   */\n      0x00\n        /* \"#utility.yul\":19736:19745   */\n      dup4\n        /* \"#utility.yul\":19732:19749   */\n      add\n        /* \"#utility.yul\":19723:19729   */\n      dup6\n        /* \"#utility.yul\":19679:19750   */\n      tag_454\n      jump\t// in\n    tag_717:\n        /* \"#utility.yul\":19760:19832   */\n      tag_718\n        /* \"#utility.yul\":19828:19830   */\n      0x20\n        /* \"#utility.yul\":19817:19826   */\n      dup4\n        /* \"#utility.yul\":19813:19831   */\n      add\n        /* \"#utility.yul\":19804:19810   */\n      dup5\n        /* \"#utility.yul\":19760:19832   */\n      tag_457\n      jump\t// in\n    tag_718:\n        /* \"#utility.yul\":19507:19839   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122028237963563a8506ce114772263af5debfcd548065c726dabbdea1e859044d5f64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_3692": {
									"entryPoint": null,
									"id": 3692,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_disableInitializers_416": {
									"entryPoint": 39,
									"id": 416,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getInitializableStorage_447": {
									"entryPoint": 299,
									"id": 447,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_t_uint64_to_t_uint64_fromStack": {
									"entryPoint": 357,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
									"entryPoint": 374,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_uint64": {
									"entryPoint": 338,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:456:17",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "51:57:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "61:41:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "76:5:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "83:18:17",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "72:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "72:30:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "61:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "33:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "43:7:17",
														"type": ""
													}
												],
												"src": "7:101:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:52:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "194:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "216:5:17"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint64",
																			"nodeType": "YulIdentifier",
																			"src": "199:16:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "199:23:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:36:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:36:17"
														}
													]
												},
												"name": "abi_encode_t_uint64_to_t_uint64_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "165:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "172:3:17",
														"type": ""
													}
												],
												"src": "114:115:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "331:122:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "341:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "353:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "364:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "349:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "349:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "341:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "419:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "432:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "443:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "428:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "428:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint64_to_t_uint64_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "377:41:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "377:69:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "377:69:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "303:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "315:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "326:4:17",
														"type": ""
													}
												],
												"src": "235:218:17"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
									"id": 17,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801562000010575f80fd5b50620000216200002760201b60201c565b62000191565b5f620000386200012b60201b60201c565b9050805f0160089054906101000a900460ff161562000083576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1614620001285767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff6040516200011f919062000176565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f67ffffffffffffffff82169050919050565b620001708162000152565b82525050565b5f6020820190506200018b5f83018462000165565b92915050565b6129f3806200019f5f395ff3fe608060405234801561000f575f80fd5b5060043610610140575f3560e01c8063715018a6116100b6578063a22cb4651161007a578063a22cb46514610326578063b88d4fde14610342578063c4d66de81461035e578063c87b56dd1461037a578063e985e9c5146103aa578063f2fde38b146103da57610140565b8063715018a6146102ba5780638456cb59146102c45780638da5cb5b146102ce57806395d89b41146102ec578063a14481941461030a57610140565b80633f4ba83a116101085780633f4ba83a146101fa57806342842e0e1461020457806342966c68146102205780635c975abb1461023c5780636352211e1461025a57806370a082311461028a57610140565b806301ffc9a71461014457806306fdde0314610174578063081812fc14610192578063095ea7b3146101c257806323b872dd146101de575b5f80fd5b61015e60048036038101906101599190611fb3565b6103f6565b60405161016b9190611ff8565b60405180910390f35b61017c6104d7565b604051610189919061209b565b60405180910390f35b6101ac60048036038101906101a791906120ee565b610574565b6040516101b99190612158565b60405180910390f35b6101dc60048036038101906101d7919061219b565b61058f565b005b6101f860048036038101906101f391906121d9565b6105a5565b005b6102026106a4565b005b61021e600480360381019061021991906121d9565b6106b6565b005b61023a600480360381019061023591906120ee565b6106d5565b005b6102446106eb565b6040516102519190611ff8565b60405180910390f35b610274600480360381019061026f91906120ee565b61070d565b6040516102819190612158565b60405180910390f35b6102a4600480360381019061029f9190612229565b61071e565b6040516102b19190612263565b60405180910390f35b6102c26107e2565b005b6102cc6107f5565b005b6102d6610807565b6040516102e39190612158565b60405180910390f35b6102f461083c565b604051610301919061209b565b60405180910390f35b610324600480360381019061031f919061219b565b6108da565b005b610340600480360381019061033b91906122a6565b6108f0565b005b61035c60048036038101906103579190612410565b610906565b005b61037860048036038101906103739190612229565b610923565b005b610394600480360381019061038f91906120ee565b610b28565b6040516103a1919061209b565b60405180910390f35b6103c460048036038101906103bf9190612490565b610b8e565b6040516103d19190611ff8565b60405180910390f35b6103f460048036038101906103ef9190612229565b610c2a565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104c057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104d057506104cf82610cae565b5b9050919050565b60605f6104e2610d17565b9050805f0180546104f2906124fb565b80601f016020809104026020016040519081016040528092919081815260200182805461051e906124fb565b80156105695780601f1061054057610100808354040283529160200191610569565b820191905f5260205f20905b81548152906001019060200180831161054c57829003601f168201915b505050505091505090565b5f61057e82610d3e565b5061058882610dc4565b9050919050565b6105a1828261059c610e0b565b610e12565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610615575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161060c9190612158565b60405180910390fd5b5f6106288383610623610e0b565b610e24565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461069e578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016106959392919061252b565b60405180910390fd5b50505050565b6106ac610e39565b6106b4610ec0565b565b6106d083838360405180602001604052805f815250610906565b505050565b6106e75f826106e2610e0b565b610e24565b5050565b5f806106f5610f2e565b9050805f015f9054906101000a900460ff1691505090565b5f61071782610d3e565b9050919050565b5f80610728610d17565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361079a575f6040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016107919190612158565b60405180910390fd5b806003015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054915050919050565b6107ea610e39565b6107f35f610f55565b565b6107fd610e39565b610805611026565b565b5f80610811611095565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60605f610847610d17565b9050806001018054610858906124fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610884906124fb565b80156108cf5780601f106108a6576101008083540402835291602001916108cf565b820191905f5260205f20905b8154815290600101906020018083116108b257829003601f168201915b505050505091505090565b6108e2610e39565b6108ec82826110bc565b5050565b6109026108fb610e0b565b83836110d9565b5050565b6109118484846105a5565b61091d84848484611250565b50505050565b5f61092c611402565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156109745750825b90505f60018367ffffffffffffffff161480156109a757505f3073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156109b5575080155b156109ec576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610a39576001855f0160086101000a81548160ff0219169083151502179055505b610aad6040518060400160405280600781526020017f4d79546f6b656e000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544b0000000000000000000000000000000000000000000000000000000000815250611429565b610ab561143f565b610abe86611451565b610ac6611465565b8315610b20575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610b1791906125b5565b60405180910390a15b505050505050565b6060610b3382610d3e565b505f610b3d61146f565b90505f815111610b5b5760405180602001604052805f815250610b86565b80610b6584611485565b604051602001610b76929190612608565b6040516020818303038152906040525b915050919050565b5f80610b98610d17565b9050806005015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1691505092915050565b610c32610e39565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ca2575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610c999190612158565b60405180910390fd5b610cab81610f55565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300905090565b5f80610d498361154f565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dbb57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610db29190612263565b60405180910390fd5b80915050919050565b5f80610dce610d17565b9050806004015f8481526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b5f33905090565b610e1f8383836001611596565b505050565b5f610e30848484611763565b90509392505050565b610e41610e0b565b73ffffffffffffffffffffffffffffffffffffffff16610e5f610807565b73ffffffffffffffffffffffffffffffffffffffff1614610ebe57610e82610e0b565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610eb59190612158565b60405180910390fd5b565b610ec8611780565b5f610ed1610f2e565b90505f815f015f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610f16610e0b565b604051610f239190612158565b60405180910390a150565b5f7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300905090565b5f610f5e611095565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b61102e6117c0565b5f611037610f2e565b90506001815f015f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861107d610e0b565b60405161108a9190612158565b60405180910390a150565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b6110d5828260405180602001604052805f815250611801565b5050565b5f6110e2610d17565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361115457826040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161114b9190612158565b60405180910390fd5b81816005015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516112429190611ff8565b60405180910390a350505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b11156113fc578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611293610e0b565b8685856040518563ffffffff1660e01b81526004016112b5949392919061267d565b6020604051808303815f875af19250505080156112f057506040513d601f19601f820116820180604052508101906112ed91906126db565b60015b611371573d805f811461131e576040519150601f19603f3d011682016040523d82523d5f602084013e611323565b606091505b505f81510361136957836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113609190612158565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146113fa57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113f19190612158565b60405180910390fd5b505b50505050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b61143161181c565b61143b828261185c565b5050565b61144761181c565b61144f611897565b565b61145961181c565b611462816118c7565b50565b61146d61181c565b565b606060405180602001604052805f815250905090565b60605f60016114938461194b565b0190505f8167ffffffffffffffff8111156114b1576114b06122ec565b5b6040519080825280601f01601f1916602001820160405280156114e35781602001600182028036833780820191505090505b5090505f82602001820190505b600115611544578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161153957611538612706565b5b0494505f85036114f0575b819350505050919050565b5f80611559610d17565b9050806002015f8481526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b5f61159f610d17565b905081806115d957505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561170b575f6115e885610d3e565b90505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561165257508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561166557506116638185610b8e565b155b156116a757836040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161169e9190612158565b60405180910390fd5b821561170957848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b84816004015f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b5f61176c6117c0565b611777848484611a9c565b90509392505050565b6117886106eb565b6117be576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6117c86106eb565b156117ff576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61180b8383611cb9565b6118175f848484611250565b505050565b611824611dac565b61185a576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61186461181c565b5f61186d610d17565b905082815f01908161187f91906128c7565b508181600101908161189191906128c7565b50505050565b61189f61181c565b5f6118a8610f2e565b90505f815f015f6101000a81548160ff02191690831515021790555050565b6118cf61181c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361193f575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016119369190612158565b60405180910390fd5b61194881610f55565b50565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106119a7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161199d5761199c612706565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106119e4576d04ee2d6d415b85acef810000000083816119da576119d9612706565b5b0492506020810190505b662386f26fc100008310611a1357662386f26fc100008381611a0957611a08612706565b5b0492506010810190505b6305f5e1008310611a3c576305f5e1008381611a3257611a31612706565b5b0492506008810190505b6127108310611a61576127108381611a5757611a56612706565b5b0492506004810190505b60648310611a845760648381611a7a57611a79612706565b5b0492506002810190505b600a8310611a93576001810190505b80915050919050565b5f80611aa6610d17565b90505f611ab28561154f565b90505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611af357611af2818587611dca565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611b8057611b325f865f80611596565b6001826003015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611c01576001826003015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b85826002015f8781526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480925050509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d29575f6040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611d209190612158565b60405180910390fd5b5f611d3583835f610e24565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611da7575f6040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611d9e9190612158565b60405180910390fd5b505050565b5f611db5611402565b5f0160089054906101000a900460ff16905090565b611dd5838383611e8d565b611e88575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611e4957806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611e409190612263565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611e7f929190612996565b60405180910390fd5b505050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611f4457508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f055750611f048484610b8e565b5b80611f4357508273ffffffffffffffffffffffffffffffffffffffff16611f2b83610dc4565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f9281611f5e565b8114611f9c575f80fd5b50565b5f81359050611fad81611f89565b92915050565b5f60208284031215611fc857611fc7611f56565b5b5f611fd584828501611f9f565b91505092915050565b5f8115159050919050565b611ff281611fde565b82525050565b5f60208201905061200b5f830184611fe9565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561204857808201518184015260208101905061202d565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61206d82612011565b612077818561201b565b935061208781856020860161202b565b61209081612053565b840191505092915050565b5f6020820190508181035f8301526120b38184612063565b905092915050565b5f819050919050565b6120cd816120bb565b81146120d7575f80fd5b50565b5f813590506120e8816120c4565b92915050565b5f6020828403121561210357612102611f56565b5b5f612110848285016120da565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61214282612119565b9050919050565b61215281612138565b82525050565b5f60208201905061216b5f830184612149565b92915050565b61217a81612138565b8114612184575f80fd5b50565b5f8135905061219581612171565b92915050565b5f80604083850312156121b1576121b0611f56565b5b5f6121be85828601612187565b92505060206121cf858286016120da565b9150509250929050565b5f805f606084860312156121f0576121ef611f56565b5b5f6121fd86828701612187565b935050602061220e86828701612187565b925050604061221f868287016120da565b9150509250925092565b5f6020828403121561223e5761223d611f56565b5b5f61224b84828501612187565b91505092915050565b61225d816120bb565b82525050565b5f6020820190506122765f830184612254565b92915050565b61228581611fde565b811461228f575f80fd5b50565b5f813590506122a08161227c565b92915050565b5f80604083850312156122bc576122bb611f56565b5b5f6122c985828601612187565b92505060206122da85828601612292565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61232282612053565b810181811067ffffffffffffffff82111715612341576123406122ec565b5b80604052505050565b5f612353611f4d565b905061235f8282612319565b919050565b5f67ffffffffffffffff82111561237e5761237d6122ec565b5b61238782612053565b9050602081019050919050565b828183375f83830152505050565b5f6123b46123af84612364565b61234a565b9050828152602081018484840111156123d0576123cf6122e8565b5b6123db848285612394565b509392505050565b5f82601f8301126123f7576123f66122e4565b5b81356124078482602086016123a2565b91505092915050565b5f805f806080858703121561242857612427611f56565b5b5f61243587828801612187565b945050602061244687828801612187565b9350506040612457878288016120da565b925050606085013567ffffffffffffffff81111561247857612477611f5a565b5b612484878288016123e3565b91505092959194509250565b5f80604083850312156124a6576124a5611f56565b5b5f6124b385828601612187565b92505060206124c485828601612187565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061251257607f821691505b602082108103612525576125246124ce565b5b50919050565b5f60608201905061253e5f830186612149565b61254b6020830185612254565b6125586040830184612149565b949350505050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f819050919050565b5f61259f61259a61259584612560565b61257c565b612569565b9050919050565b6125af81612585565b82525050565b5f6020820190506125c85f8301846125a6565b92915050565b5f81905092915050565b5f6125e282612011565b6125ec81856125ce565b93506125fc81856020860161202b565b80840191505092915050565b5f61261382856125d8565b915061261f82846125d8565b91508190509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f61264f8261262b565b6126598185612635565b935061266981856020860161202b565b61267281612053565b840191505092915050565b5f6080820190506126905f830187612149565b61269d6020830186612149565b6126aa6040830185612254565b81810360608301526126bc8184612645565b905095945050505050565b5f815190506126d581611f89565b92915050565b5f602082840312156126f0576126ef611f56565b5b5f6126fd848285016126c7565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261278f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612754565b6127998683612754565b95508019841693508086168417925050509392505050565b5f6127cb6127c66127c1846120bb565b61257c565b6120bb565b9050919050565b5f819050919050565b6127e4836127b1565b6127f86127f0826127d2565b848454612760565b825550505050565b5f90565b61280c612800565b6128178184846127db565b505050565b5b8181101561283a5761282f5f82612804565b60018101905061281d565b5050565b601f82111561287f5761285081612733565b61285984612745565b81016020851015612868578190505b61287c61287485612745565b83018261281c565b50505b505050565b5f82821c905092915050565b5f61289f5f1984600802612884565b1980831691505092915050565b5f6128b78383612890565b9150826002028217905092915050565b6128d082612011565b67ffffffffffffffff8111156128e9576128e86122ec565b5b6128f382546124fb565b6128fe82828561283e565b5f60209050601f83116001811461292f575f841561291d578287015190505b61292785826128ac565b86555061298e565b601f19841661293d86612733565b5f5b828110156129645784890151825560018201915060208501945060208101905061293f565b86831015612981578489015161297d601f891682612890565b8355505b6001600288020188555050505b505050505050565b5f6040820190506129a95f830185612149565b6129b66020830184612254565b939250505056fea264697066735822122028237963563a8506ce114772263af5debfcd548065c726dabbdea1e859044d5f64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH3 0x21 PUSH3 0x27 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x191 JUMP JUMPDEST PUSH0 PUSH3 0x38 PUSH3 0x12B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x83 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 AND DUP2 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH3 0x128 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD PUSH3 0x11F SWAP2 SWAP1 PUSH3 0x176 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x170 DUP2 PUSH3 0x152 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x18B PUSH0 DUP4 ADD DUP5 PUSH3 0x165 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29F3 DUP1 PUSH3 0x19F PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x140 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3AA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3DA JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0xA1448194 EQ PUSH2 0x30A JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x28A JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1DE JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x15E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x159 SWAP2 SWAP1 PUSH2 0x1FB3 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17C PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x209B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x574 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x219B JUMP JUMPDEST PUSH2 0x58F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST PUSH2 0x5A5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x202 PUSH2 0x6A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x21E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x6D5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x244 PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x274 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26F SWAP2 SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x70D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C2 PUSH2 0x7E2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CC PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D6 PUSH2 0x807 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F4 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x209B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x324 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x219B JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x340 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33B SWAP2 SWAP1 PUSH2 0x22A6 JUMP JUMPDEST PUSH2 0x8F0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x35C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x357 SWAP2 SWAP1 PUSH2 0x2410 JUMP JUMPDEST PUSH2 0x906 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x378 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x923 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x394 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38F SWAP2 SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0xB28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x209B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x2490 JUMP JUMPDEST PUSH2 0xB8E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D1 SWAP2 SWAP1 PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EF SWAP2 SWAP1 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST STOP JUMPDEST PUSH0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4C0 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x4D0 JUMPI POP PUSH2 0x4CF DUP3 PUSH2 0xCAE JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x4E2 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD DUP1 SLOAD PUSH2 0x4F2 SWAP1 PUSH2 0x24FB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x51E SWAP1 PUSH2 0x24FB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x569 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x540 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x569 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x54C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x57E DUP3 PUSH2 0xD3E JUMP JUMPDEST POP PUSH2 0x588 DUP3 PUSH2 0xDC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP3 DUP3 PUSH2 0x59C PUSH2 0xE0B JUMP JUMPDEST PUSH2 0xE12 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x615 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60C SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x628 DUP4 DUP4 PUSH2 0x623 PUSH2 0xE0B JUMP JUMPDEST PUSH2 0xE24 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x69E JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x695 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x252B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x6AC PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x6B4 PUSH2 0xEC0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6D0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x906 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x6E7 PUSH0 DUP3 PUSH2 0x6E2 PUSH2 0xE0B JUMP JUMPDEST PUSH2 0xE24 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x6F5 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x717 DUP3 PUSH2 0xD3E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x728 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x79A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x791 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7EA PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x7F3 PUSH0 PUSH2 0xF55 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x7FD PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x805 PUSH2 0x1026 JUMP JUMPDEST JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x811 PUSH2 0x1095 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x847 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x858 SWAP1 PUSH2 0x24FB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x884 SWAP1 PUSH2 0x24FB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8CF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8A6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8CF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8B2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x8E2 PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x8EC DUP3 DUP3 PUSH2 0x10BC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x902 PUSH2 0x8FB PUSH2 0xE0B JUMP JUMPDEST DUP4 DUP4 PUSH2 0x10D9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x911 DUP5 DUP5 DUP5 PUSH2 0x5A5 JUMP JUMPDEST PUSH2 0x91D DUP5 DUP5 DUP5 DUP5 PUSH2 0x1250 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x92C PUSH2 0x1402 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH0 DUP3 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x974 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x9A7 JUMPI POP PUSH0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x9B5 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0xA39 JUMPI PUSH1 0x1 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xAAD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D79546F6B656E00000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D544B0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1429 JUMP JUMPDEST PUSH2 0xAB5 PUSH2 0x143F JUMP JUMPDEST PUSH2 0xABE DUP7 PUSH2 0x1451 JUMP JUMPDEST PUSH2 0xAC6 PUSH2 0x1465 JUMP JUMPDEST DUP4 ISZERO PUSH2 0xB20 JUMPI PUSH0 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xB17 SWAP2 SWAP1 PUSH2 0x25B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB33 DUP3 PUSH2 0xD3E JUMP JUMPDEST POP PUSH0 PUSH2 0xB3D PUSH2 0x146F JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT PUSH2 0xB5B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0xB86 JUMP JUMPDEST DUP1 PUSH2 0xB65 DUP5 PUSH2 0x1485 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB76 SWAP3 SWAP2 SWAP1 PUSH2 0x2608 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB98 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x5 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC32 PUSH2 0xE39 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCA2 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC99 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCAB DUP2 PUSH2 0xF55 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xD49 DUP4 PUSH2 0x154F JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDBB JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDB2 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xDCE PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 ADD PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xE1F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1596 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE30 DUP5 DUP5 DUP5 PUSH2 0x1763 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE41 PUSH2 0xE0B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE5F PUSH2 0x807 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEBE JUMPI PUSH2 0xE82 PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEB5 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xEC8 PUSH2 0x1780 JUMP JUMPDEST PUSH0 PUSH2 0xED1 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xF16 PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF23 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH32 0xCD5ED15C6E187E77E9AEE88184C21F4F2182AB5827CB3B7E07FBEDCD63F03300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xF5E PUSH2 0x1095 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 DUP3 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x102E PUSH2 0x17C0 JUMP JUMPDEST PUSH0 PUSH2 0x1037 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x107D PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x108A SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x10D5 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x1801 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x10E2 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1154 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x5 ADD PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1242 SWAP2 SWAP1 PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x13FC JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1293 PUSH2 0xE0B JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12B5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x267D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x12F0 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12ED SWAP2 SWAP1 PUSH2 0x26DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1371 JUMPI RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x131E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH0 DUP2 MLOAD SUB PUSH2 0x1369 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1360 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x13FA JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F1 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1431 PUSH2 0x181C JUMP JUMPDEST PUSH2 0x143B DUP3 DUP3 PUSH2 0x185C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1447 PUSH2 0x181C JUMP JUMPDEST PUSH2 0x144F PUSH2 0x1897 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1459 PUSH2 0x181C JUMP JUMPDEST PUSH2 0x1462 DUP2 PUSH2 0x18C7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x146D PUSH2 0x181C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH1 0x1 PUSH2 0x1493 DUP5 PUSH2 0x194B JUMP JUMPDEST ADD SWAP1 POP PUSH0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14B1 JUMPI PUSH2 0x14B0 PUSH2 0x22EC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14E3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1544 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1539 JUMPI PUSH2 0x1538 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH0 DUP6 SUB PUSH2 0x14F0 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1559 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x159F PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP2 DUP1 PUSH2 0x15D9 JUMPI POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x170B JUMPI PUSH0 PUSH2 0x15E8 DUP6 PUSH2 0xD3E JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1652 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1665 JUMPI POP PUSH2 0x1663 DUP2 DUP6 PUSH2 0xB8E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x16A7 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x169E SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 ISZERO PUSH2 0x1709 JUMPI DUP5 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP5 DUP2 PUSH1 0x4 ADD PUSH0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x176C PUSH2 0x17C0 JUMP JUMPDEST PUSH2 0x1777 DUP5 DUP5 DUP5 PUSH2 0x1A9C JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1788 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x17BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x17C8 PUSH2 0x6EB JUMP JUMPDEST ISZERO PUSH2 0x17FF JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x180B DUP4 DUP4 PUSH2 0x1CB9 JUMP JUMPDEST PUSH2 0x1817 PUSH0 DUP5 DUP5 DUP5 PUSH2 0x1250 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1824 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x185A JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1864 PUSH2 0x181C JUMP JUMPDEST PUSH0 PUSH2 0x186D PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH0 ADD SWAP1 DUP2 PUSH2 0x187F SWAP2 SWAP1 PUSH2 0x28C7 JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x1 ADD SWAP1 DUP2 PUSH2 0x1891 SWAP2 SWAP1 PUSH2 0x28C7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x189F PUSH2 0x181C JUMP JUMPDEST PUSH0 PUSH2 0x18A8 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x18CF PUSH2 0x181C JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x193F JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1936 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1948 DUP2 PUSH2 0xF55 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x19A7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x199D JUMPI PUSH2 0x199C PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x19E4 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x19DA JUMPI PUSH2 0x19D9 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1A13 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1A09 JUMPI PUSH2 0x1A08 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1A3C JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1A32 JUMPI PUSH2 0x1A31 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1A61 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1A57 JUMPI PUSH2 0x1A56 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1A84 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1A7A JUMPI PUSH2 0x1A79 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1A93 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1AA6 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x1AB2 DUP6 PUSH2 0x154F JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1AF3 JUMPI PUSH2 0x1AF2 DUP2 DUP6 DUP8 PUSH2 0x1DCA JUMP JUMPDEST JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B80 JUMPI PUSH2 0x1B32 PUSH0 DUP7 PUSH0 DUP1 PUSH2 0x1596 JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C01 JUMPI PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP6 DUP3 PUSH1 0x2 ADD PUSH0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D29 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D20 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x1D35 DUP4 DUP4 PUSH0 PUSH2 0xE24 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1DA7 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D9E SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1DB5 PUSH2 0x1402 JUMP JUMPDEST PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1DD5 DUP4 DUP4 DUP4 PUSH2 0x1E8D JUMP JUMPDEST PUSH2 0x1E88 JUMPI PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1E49 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E40 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E7F SWAP3 SWAP2 SWAP1 PUSH2 0x2996 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1F44 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1F05 JUMPI POP PUSH2 0x1F04 DUP5 DUP5 PUSH2 0xB8E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1F43 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1F2B DUP4 PUSH2 0xDC4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F92 DUP2 PUSH2 0x1F5E JUMP JUMPDEST DUP2 EQ PUSH2 0x1F9C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FAD DUP2 PUSH2 0x1F89 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FC8 JUMPI PUSH2 0x1FC7 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FD5 DUP5 DUP3 DUP6 ADD PUSH2 0x1F9F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FF2 DUP2 PUSH2 0x1FDE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x200B PUSH0 DUP4 ADD DUP5 PUSH2 0x1FE9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2048 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x202D JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x206D DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH2 0x2077 DUP2 DUP6 PUSH2 0x201B JUMP JUMPDEST SWAP4 POP PUSH2 0x2087 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x202B JUMP JUMPDEST PUSH2 0x2090 DUP2 PUSH2 0x2053 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x20B3 DUP2 DUP5 PUSH2 0x2063 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20CD DUP2 PUSH2 0x20BB JUMP JUMPDEST DUP2 EQ PUSH2 0x20D7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20E8 DUP2 PUSH2 0x20C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2103 JUMPI PUSH2 0x2102 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2110 DUP5 DUP3 DUP6 ADD PUSH2 0x20DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2142 DUP3 PUSH2 0x2119 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2152 DUP2 PUSH2 0x2138 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x216B PUSH0 DUP4 ADD DUP5 PUSH2 0x2149 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x217A DUP2 PUSH2 0x2138 JUMP JUMPDEST DUP2 EQ PUSH2 0x2184 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2195 DUP2 PUSH2 0x2171 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21B1 JUMPI PUSH2 0x21B0 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x21BE DUP6 DUP3 DUP7 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x21CF DUP6 DUP3 DUP7 ADD PUSH2 0x20DA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x21F0 JUMPI PUSH2 0x21EF PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x21FD DUP7 DUP3 DUP8 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x220E DUP7 DUP3 DUP8 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x221F DUP7 DUP3 DUP8 ADD PUSH2 0x20DA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223E JUMPI PUSH2 0x223D PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x224B DUP5 DUP3 DUP6 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x225D DUP2 PUSH2 0x20BB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2276 PUSH0 DUP4 ADD DUP5 PUSH2 0x2254 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2285 DUP2 PUSH2 0x1FDE JUMP JUMPDEST DUP2 EQ PUSH2 0x228F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22A0 DUP2 PUSH2 0x227C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22BC JUMPI PUSH2 0x22BB PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x22C9 DUP6 DUP3 DUP7 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22DA DUP6 DUP3 DUP7 ADD PUSH2 0x2292 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x2322 DUP3 PUSH2 0x2053 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2341 JUMPI PUSH2 0x2340 PUSH2 0x22EC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2353 PUSH2 0x1F4D JUMP JUMPDEST SWAP1 POP PUSH2 0x235F DUP3 DUP3 PUSH2 0x2319 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x237E JUMPI PUSH2 0x237D PUSH2 0x22EC JUMP JUMPDEST JUMPDEST PUSH2 0x2387 DUP3 PUSH2 0x2053 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x23B4 PUSH2 0x23AF DUP5 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0x234A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x23D0 JUMPI PUSH2 0x23CF PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH2 0x23DB DUP5 DUP3 DUP6 PUSH2 0x2394 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x23F7 JUMPI PUSH2 0x23F6 PUSH2 0x22E4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2407 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x23A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2428 JUMPI PUSH2 0x2427 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2435 DUP8 DUP3 DUP9 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2446 DUP8 DUP3 DUP9 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2457 DUP8 DUP3 DUP9 ADD PUSH2 0x20DA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2478 JUMPI PUSH2 0x2477 PUSH2 0x1F5A JUMP JUMPDEST JUMPDEST PUSH2 0x2484 DUP8 DUP3 DUP9 ADD PUSH2 0x23E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24A6 JUMPI PUSH2 0x24A5 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x24B3 DUP6 DUP3 DUP7 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24C4 DUP6 DUP3 DUP7 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2512 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2525 JUMPI PUSH2 0x2524 PUSH2 0x24CE JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x253E PUSH0 DUP4 ADD DUP7 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x254B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x2558 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2149 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x259F PUSH2 0x259A PUSH2 0x2595 DUP5 PUSH2 0x2560 JUMP JUMPDEST PUSH2 0x257C JUMP JUMPDEST PUSH2 0x2569 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25AF DUP2 PUSH2 0x2585 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25C8 PUSH0 DUP4 ADD DUP5 PUSH2 0x25A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x25E2 DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH2 0x25EC DUP2 DUP6 PUSH2 0x25CE JUMP JUMPDEST SWAP4 POP PUSH2 0x25FC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x202B JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2613 DUP3 DUP6 PUSH2 0x25D8 JUMP JUMPDEST SWAP2 POP PUSH2 0x261F DUP3 DUP5 PUSH2 0x25D8 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x264F DUP3 PUSH2 0x262B JUMP JUMPDEST PUSH2 0x2659 DUP2 DUP6 PUSH2 0x2635 JUMP JUMPDEST SWAP4 POP PUSH2 0x2669 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x202B JUMP JUMPDEST PUSH2 0x2672 DUP2 PUSH2 0x2053 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2690 PUSH0 DUP4 ADD DUP8 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x269D PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x26AA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2254 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x26BC DUP2 DUP5 PUSH2 0x2645 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x26D5 DUP2 PUSH2 0x1F89 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26F0 JUMPI PUSH2 0x26EF PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x26FD DUP5 DUP3 DUP6 ADD PUSH2 0x26C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x278F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2754 JUMP JUMPDEST PUSH2 0x2799 DUP7 DUP4 PUSH2 0x2754 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x27CB PUSH2 0x27C6 PUSH2 0x27C1 DUP5 PUSH2 0x20BB JUMP JUMPDEST PUSH2 0x257C JUMP JUMPDEST PUSH2 0x20BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27E4 DUP4 PUSH2 0x27B1 JUMP JUMPDEST PUSH2 0x27F8 PUSH2 0x27F0 DUP3 PUSH2 0x27D2 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2760 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x280C PUSH2 0x2800 JUMP JUMPDEST PUSH2 0x2817 DUP2 DUP5 DUP5 PUSH2 0x27DB JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x283A JUMPI PUSH2 0x282F PUSH0 DUP3 PUSH2 0x2804 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x281D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x287F JUMPI PUSH2 0x2850 DUP2 PUSH2 0x2733 JUMP JUMPDEST PUSH2 0x2859 DUP5 PUSH2 0x2745 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2868 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x287C PUSH2 0x2874 DUP6 PUSH2 0x2745 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x281C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x289F PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x2884 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x28B7 DUP4 DUP4 PUSH2 0x2890 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x28D0 DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28E9 JUMPI PUSH2 0x28E8 PUSH2 0x22EC JUMP JUMPDEST JUMPDEST PUSH2 0x28F3 DUP3 SLOAD PUSH2 0x24FB JUMP JUMPDEST PUSH2 0x28FE DUP3 DUP3 DUP6 PUSH2 0x283E JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x292F JUMPI PUSH0 DUP5 ISZERO PUSH2 0x291D JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x2927 DUP6 DUP3 PUSH2 0x28AC JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x298E JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x293D DUP7 PUSH2 0x2733 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2964 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x293F JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x2981 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x297D PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x2890 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x29A9 PUSH0 DUP4 ADD DUP6 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x29B6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2254 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 0x23 PUSH26 0x63563A8506CE114772263AF5DEBFCD548065C726DABBDEA1E859 DIV 0x4D PUSH0 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "492:1003:16:-:0;;;678:53;;;;;;;;;;702:22;:20;;;:22;;:::i;:::-;492:1003;;7711:422:1;7826:30;7859:26;:24;;;:26;;:::i;:::-;7826:59;;7900:1;:15;;;;;;;;;;;;7896:76;;;7938:23;;;;;;;;;;;;;;7896:76;8003:16;7985:34;;:1;:14;;;;;;;;;;;;:34;;;7981:146;;8052:16;8035:1;:14;;;:33;;;;;;;;;;;;;;;;;;8087:29;8099:16;8087:29;;;;;;:::i;:::-;;;;;;;;7981:146;7760:373;7711:422::o;8737:170::-;8795:30;8870:21;8860:31;;8737:170;:::o;7:101:17:-;43:7;83:18;76:5;72:30;61:41;;7:101;;;:::o;114:115::-;199:23;216:5;199:23;:::i;:::-;194:3;187:36;114:115;;:::o;235:218::-;326:4;364:2;353:9;349:18;341:26;;377:69;443:1;432:9;428:17;419:6;377:69;:::i;:::-;235:218;;;;:::o;492:1003:16:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__ERC721Burnable_init_1601": {
									"entryPoint": 5221,
									"id": 1601,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__ERC721Pausable_init_1649": {
									"entryPoint": 5183,
									"id": 1649,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__ERC721_init_535": {
									"entryPoint": 5161,
									"id": 535,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC721_init_unchained_563": {
									"entryPoint": 6236,
									"id": 563,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__Ownable_init_54": {
									"entryPoint": 5201,
									"id": 54,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_81": {
									"entryPoint": 6343,
									"id": 81,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__Pausable_init_unchained_1795": {
									"entryPoint": 6295,
									"id": 1795,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_approve_1367": {
									"entryPoint": 3602,
									"id": 1367,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1441": {
									"entryPoint": 5526,
									"id": 1441,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_baseURI_719": {
									"entryPoint": 5231,
									"id": 719,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_checkAuthorized_995": {
									"entryPoint": 7626,
									"id": 995,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_checkInitializing_370": {
									"entryPoint": 6172,
									"id": 370,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOnERC721Received_1579": {
									"entryPoint": 4688,
									"id": 1579,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkOwner_122": {
									"entryPoint": 3641,
									"id": 122,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getApproved_922": {
									"entryPoint": 3524,
									"id": 922,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_getERC721Storage_519": {
									"entryPoint": 3351,
									"id": 519,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getInitializableStorage_447": {
									"entryPoint": 5122,
									"id": 447,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getOwnableStorage_25": {
									"entryPoint": 4245,
									"id": 25,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getPausableStorage_1751": {
									"entryPoint": 3886,
									"id": 1751,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_isAuthorized_958": {
									"entryPoint": 7821,
									"id": 958,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@_isInitializing_438": {
									"entryPoint": 7596,
									"id": 438,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_1171": {
									"entryPoint": 7353,
									"id": 1171,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1707": {
									"entryPoint": 3595,
									"id": 1707,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownerOf_902": {
									"entryPoint": 5455,
									"id": 902,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_pause_1876": {
									"entryPoint": 4134,
									"id": 1876,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_1839": {
									"entryPoint": 6080,
									"id": 1839,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireOwned_1515": {
									"entryPoint": 3390,
									"id": 1515,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_requirePaused_1852": {
									"entryPoint": 6016,
									"id": 1852,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_safeMint_1186": {
									"entryPoint": 4284,
									"id": 1186,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_safeMint_1212": {
									"entryPoint": 6145,
									"id": 1212,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_setApprovalForAll_1486": {
									"entryPoint": 4313,
									"id": 1486,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_193": {
									"entryPoint": 3925,
									"id": 193,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_unpause_1900": {
									"entryPoint": 3776,
									"id": 1900,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_update_1121": {
									"entryPoint": 6812,
									"id": 1121,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@_update_1678": {
									"entryPoint": 5987,
									"id": 1678,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@_update_3770": {
									"entryPoint": 3620,
									"id": 3770,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@approve_735": {
									"entryPoint": 1423,
									"id": 735,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_629": {
									"entryPoint": 1822,
									"id": 629,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burn_1624": {
									"entryPoint": 1749,
									"id": 1624,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@getApproved_752": {
									"entryPoint": 1396,
									"id": 752,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@initialize_3715": {
									"entryPoint": 2339,
									"id": 3715,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@isApprovedForAll_792": {
									"entryPoint": 2958,
									"id": 792,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@log10_3382": {
									"entryPoint": 6475,
									"id": 3382,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_658": {
									"entryPoint": 1239,
									"id": 658,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_642": {
									"entryPoint": 1805,
									"id": 642,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_105": {
									"entryPoint": 2055,
									"id": 105,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_3724": {
									"entryPoint": 2037,
									"id": 3724,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_1827": {
									"entryPoint": 1771,
									"id": 1827,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_136": {
									"entryPoint": 2018,
									"id": 136,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeMint_3748": {
									"entryPoint": 2266,
									"id": 3748,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@safeTransferFrom_856": {
									"entryPoint": 1718,
									"id": 856,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_882": {
									"entryPoint": 2310,
									"id": 882,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_768": {
									"entryPoint": 2288,
									"id": 768,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_1940": {
									"entryPoint": 3246,
									"id": 1940,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_594": {
									"entryPoint": 1014,
									"id": 594,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_674": {
									"entryPoint": 2108,
									"id": 674,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_2309": {
									"entryPoint": 5253,
									"id": 2309,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_710": {
									"entryPoint": 2856,
									"id": 710,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@transferFrom_838": {
									"entryPoint": 1445,
									"id": 838,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@transferOwnership_164": {
									"entryPoint": 3114,
									"id": 164,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@unpause_3733": {
									"entryPoint": 1700,
									"id": 3733,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_bytes_memory_ptr": {
									"entryPoint": 9122,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 8583,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool": {
									"entryPoint": 8850,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4": {
									"entryPoint": 8095,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4_fromMemory": {
									"entryPoint": 9927,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes_memory_ptr": {
									"entryPoint": 9187,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 8410,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 8745,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 9360,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 8665,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 9232,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 8870,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 8603,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 8115,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 9947,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 8430,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 8521,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 8169,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 9797,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack": {
									"entryPoint": 9638,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8291,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9688,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 8788,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 9736,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 8536,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 9853,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 10646,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": 9515,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 8184,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
									"entryPoint": 9653,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8347,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 8803,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 9034,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 8013,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_bytes_memory_ptr": {
									"entryPoint": 9060,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 10035,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 9771,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 8209,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 9781,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 8219,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9678,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 10302,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 8504,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 8158,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 8030,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_rational_1_by_1": {
									"entryPoint": 9568,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 8473,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 8379,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint64": {
									"entryPoint": 9577,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 10268,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_rational_1_by_1_to_t_uint64": {
									"entryPoint": 9605,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 10161,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 10439,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_calldata_to_memory_with_cleanup": {
									"entryPoint": 9108,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 8235,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 10053,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 9467,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 10412,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 8985,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"identity": {
									"entryPoint": 9596,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 10384,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x12": {
									"entryPoint": 9990,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 9422,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 8940,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 10194,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 8932,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 8936,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 8026,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 8022,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 8275,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 10068,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 10372,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 10244,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 10080,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 10203,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 8561,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 8828,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes4": {
									"entryPoint": 8073,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 8388,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 10240,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:19842:17",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:17"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:17"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:17",
														"type": ""
													}
												],
												"src": "7:75:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:17",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:17"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:17",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:17"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "378:105:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "388:89:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "403:5:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "410:66:17",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "399:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "399:78:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "388:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "360:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "370:7:17",
														"type": ""
													}
												],
												"src": "334:149:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "531:78:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "587:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "596:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "599:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "589:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "589:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "589:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "554:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "578:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes4",
																					"nodeType": "YulIdentifier",
																					"src": "561:16:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "561:23:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "551:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "551:34:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "544:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "544:42:17"
															},
															"nodeType": "YulIf",
															"src": "541:62:17"
														}
													]
												},
												"name": "validator_revert_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "524:5:17",
														"type": ""
													}
												],
												"src": "489:120:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "666:86:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "676:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "698:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "685:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "685:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "676:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "740:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "714:25:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "714:32:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "714:32:17"
														}
													]
												},
												"name": "abi_decode_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "652:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "660:5:17",
														"type": ""
													}
												],
												"src": "615:137:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "823:262:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "869:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "871:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "871:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "871:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "844:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "853:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "840:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "840:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "865:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "836:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "836:32:17"
															},
															"nodeType": "YulIf",
															"src": "833:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "962:116:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "977:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "991:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "981:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1006:62:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1040:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1051:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1036:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1036:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1060:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "1016:19:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1016:52:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1006:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "793:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "804:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "816:6:17",
														"type": ""
													}
												],
												"src": "758:327:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1133:48:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1143:32:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1168:5:17"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1161:6:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1161:13:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1154:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1154:21:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1143:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1115:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1125:7:17",
														"type": ""
													}
												],
												"src": "1091:90:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1246:50:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1263:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1283:5:17"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "1268:14:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1268:21:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1256:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1256:34:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1256:34:17"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1234:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1241:3:17",
														"type": ""
													}
												],
												"src": "1187:109:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1394:118:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1404:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1416:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1427:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1412:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1412:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1404:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1478:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1491:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1502:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1487:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1487:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1440:37:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:65:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1440:65:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1366:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1378:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1389:4:17",
														"type": ""
													}
												],
												"src": "1302:210:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1577:40:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1588:22:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1604:5:17"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1598:5:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1598:12:17"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1588:6:17"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1560:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1570:6:17",
														"type": ""
													}
												],
												"src": "1518:99:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1719:73:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1736:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1741:6:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1729:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1729:19:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1729:19:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1757:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1776:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1781:4:17",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1772:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1772:14:17"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "1757:11:17"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1691:3:17",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1696:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "1707:11:17",
														"type": ""
													}
												],
												"src": "1623:169:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1860:184:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1870:10:17",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1879:1:17",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1874:1:17",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1939:63:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1964:3:17"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1969:1:17"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1960:3:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1960:11:17"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "1983:3:17"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1988:1:17"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1979:3:17"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1979:11:17"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1973:5:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1973:18:17"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1953:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1953:39:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1953:39:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1900:1:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1903:6:17"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1897:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "1897:13:17"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1911:19:17",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1913:15:17",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1922:1:17"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1925:2:17",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1918:3:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1918:10:17"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1913:1:17"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1893:3:17",
																"statements": []
															},
															"src": "1889:113:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "2022:3:17"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2027:6:17"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2018:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2018:16:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2036:1:17",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2011:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2011:27:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2011:27:17"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1842:3:17",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1847:3:17",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1852:6:17",
														"type": ""
													}
												],
												"src": "1798:246:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2098:54:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2108:38:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2126:5:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2133:2:17",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2122:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2122:14:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2142:2:17",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2138:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2138:7:17"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2118:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2118:28:17"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "2108:6:17"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2081:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "2091:6:17",
														"type": ""
													}
												],
												"src": "2050:102:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2250:285:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2260:53:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2307:5:17"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2274:32:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2274:39:17"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2264:6:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2322:78:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2388:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2393:6:17"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2329:58:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2329:71:17"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2322:3:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2448:5:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2455:4:17",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2444:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2444:16:17"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2462:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2467:6:17"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "2409:34:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2409:65:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2409:65:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2483:46:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2494:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2521:6:17"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2499:21:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2499:29:17"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2490:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2490:39:17"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2483:3:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2231:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2238:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2246:3:17",
														"type": ""
													}
												],
												"src": "2158:377:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2659:195:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2669:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2681:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2692:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2677:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2677:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2669:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2716:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2727:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2712:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2712:17:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2735:4:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2741:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2731:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2731:20:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2705:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2705:47:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2705:47:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2761:86:17",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2833:6:17"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2842:4:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2769:63:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2769:78:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2761:4:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2631:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2643:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2654:4:17",
														"type": ""
													}
												],
												"src": "2541:313:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2905:32:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2915:16:17",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2926:5:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2915:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2887:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2897:7:17",
														"type": ""
													}
												],
												"src": "2860:77:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2986:79:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3043:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3052:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3055:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3045:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3045:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3045:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3009:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3034:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3016:17:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3016:24:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3006:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3006:35:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2999:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "2999:43:17"
															},
															"nodeType": "YulIf",
															"src": "2996:63:17"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2979:5:17",
														"type": ""
													}
												],
												"src": "2943:122:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3123:87:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3133:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3155:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3142:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3142:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3133:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3198:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3171:26:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3171:33:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3171:33:17"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3101:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3109:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3117:5:17",
														"type": ""
													}
												],
												"src": "3071:139:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3282:263:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3328:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3330:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3330:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3330:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3303:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3312:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3299:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3299:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3324:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3295:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3295:32:17"
															},
															"nodeType": "YulIf",
															"src": "3292:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "3421:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3436:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3450:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3440:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3465:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3500:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3511:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3496:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3496:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3520:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3475:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3475:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3465:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3252:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3263:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3275:6:17",
														"type": ""
													}
												],
												"src": "3216:329:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3596:81:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3606:65:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3621:5:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3628:42:17",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3617:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3617:54:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3606:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3578:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3588:7:17",
														"type": ""
													}
												],
												"src": "3551:126:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3728:51:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3738:35:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3767:5:17"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3749:17:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3749:24:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3738:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3710:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3720:7:17",
														"type": ""
													}
												],
												"src": "3683:96:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3850:53:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3867:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3890:5:17"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3872:17:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3872:24:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3860:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "3860:37:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3860:37:17"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3838:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3845:3:17",
														"type": ""
													}
												],
												"src": "3785:118:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4007:124:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4017:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4029:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4040:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4025:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4025:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4017:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4097:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4110:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4121:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4106:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4106:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4053:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4053:71:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4053:71:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3979:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3991:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4002:4:17",
														"type": ""
													}
												],
												"src": "3909:222:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4180:79:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4237:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4246:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4249:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4239:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4239:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4239:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4203:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4228:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "4210:17:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4210:24:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4200:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4200:35:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4193:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4193:43:17"
															},
															"nodeType": "YulIf",
															"src": "4190:63:17"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4173:5:17",
														"type": ""
													}
												],
												"src": "4137:122:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4317:87:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4327:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4349:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4336:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4336:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4327:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4392:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "4365:26:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4365:33:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4365:33:17"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4295:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4303:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4311:5:17",
														"type": ""
													}
												],
												"src": "4265:139:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4493:391:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4539:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4541:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4541:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4541:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4514:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4523:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4510:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4510:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4535:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4506:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4506:32:17"
															},
															"nodeType": "YulIf",
															"src": "4503:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "4632:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4647:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4661:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4651:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4676:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4711:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4722:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4707:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4707:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4731:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4686:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4686:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4676:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4759:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4774:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4788:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4778:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4804:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4839:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4850:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4835:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4835:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4859:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4814:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4814:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4804:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4455:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4466:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4478:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4486:6:17",
														"type": ""
													}
												],
												"src": "4410:474:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4990:519:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5036:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5038:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5038:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5038:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5011:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5020:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5007:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5007:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5032:2:17",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5003:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5003:32:17"
															},
															"nodeType": "YulIf",
															"src": "5000:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "5129:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5144:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5158:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5148:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5173:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5208:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5219:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5204:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5204:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5228:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5183:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5183:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5173:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5256:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5271:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5285:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5275:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5301:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5336:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5347:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5332:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5332:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5356:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5311:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5311:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5301:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5384:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5399:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5413:2:17",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5403:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5429:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5464:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5475:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5460:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5460:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5484:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5439:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5439:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "5429:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4944:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4955:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4967:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4975:6:17",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4983:6:17",
														"type": ""
													}
												],
												"src": "4890:619:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5581:263:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5627:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5629:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5629:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5629:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5602:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5611:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5598:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5598:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5623:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:32:17"
															},
															"nodeType": "YulIf",
															"src": "5591:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "5720:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5735:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5749:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5739:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5764:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5799:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5810:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5795:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5795:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5819:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5774:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5774:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5764:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5551:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5562:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5574:6:17",
														"type": ""
													}
												],
												"src": "5515:329:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5915:53:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5932:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5955:5:17"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5937:17:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5937:24:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5925:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5925:37:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5925:37:17"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5903:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5910:3:17",
														"type": ""
													}
												],
												"src": "5850:118:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6072:124:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6082:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6094:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6105:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6090:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6090:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6082:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6162:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6175:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6186:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6171:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6171:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6118:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:71:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6118:71:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6044:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6056:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6067:4:17",
														"type": ""
													}
												],
												"src": "5974:222:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6242:76:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6296:16:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6305:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6308:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6298:6:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6298:12:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6298:12:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6265:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6287:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "6272:14:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6272:21:17"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6262:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6262:32:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6255:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6255:40:17"
															},
															"nodeType": "YulIf",
															"src": "6252:60:17"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6235:5:17",
														"type": ""
													}
												],
												"src": "6202:116:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6373:84:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6383:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6405:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6392:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6392:20:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6383:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6445:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "6421:23:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6421:30:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6421:30:17"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6351:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6359:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6367:5:17",
														"type": ""
													}
												],
												"src": "6324:133:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6543:388:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6589:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6591:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6591:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6591:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6564:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6573:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6560:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6560:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6585:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6556:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6556:32:17"
															},
															"nodeType": "YulIf",
															"src": "6553:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "6682:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6697:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6711:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6701:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6726:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6761:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6772:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6757:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6757:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6781:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6736:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6736:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6726:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6809:115:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6824:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6838:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6828:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6854:60:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6886:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6897:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6882:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6882:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6906:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "6864:17:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6864:50:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "6854:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6505:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6516:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6528:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6536:6:17",
														"type": ""
													}
												],
												"src": "6463:468:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7026:28:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7043:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7046:1:17",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7036:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7036:12:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7036:12:17"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "6937:117:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7149:28:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7166:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7169:1:17",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7159:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7159:12:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7159:12:17"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "7060:117:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7211:152:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7228:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7231:77:17",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7221:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7221:88:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7221:88:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7325:1:17",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7328:4:17",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7318:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7318:15:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7318:15:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7349:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7352:4:17",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7342:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:15:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7342:15:17"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "7183:180:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7412:238:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7422:58:17",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "7444:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "7474:4:17"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "7452:21:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7452:27:17"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7440:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7440:40:17"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "7426:10:17",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7591:22:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "7593:16:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7593:18:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7593:18:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "7534:10:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7546:18:17",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "7531:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7531:34:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "7570:10:17"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7582:6:17"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "7567:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7567:22:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7528:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7528:62:17"
															},
															"nodeType": "YulIf",
															"src": "7525:88:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7629:2:17",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "7633:10:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7622:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7622:22:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7622:22:17"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7398:6:17",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7406:4:17",
														"type": ""
													}
												],
												"src": "7369:281:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7697:88:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7707:30:17",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "7717:18:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7717:20:17"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "7707:6:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "7766:6:17"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "7774:4:17"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "7746:19:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7746:33:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7746:33:17"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7681:4:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7690:6:17",
														"type": ""
													}
												],
												"src": "7656:129:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7857:241:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7962:22:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "7964:16:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7964:18:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7964:18:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7934:6:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7942:18:17",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7931:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7931:30:17"
															},
															"nodeType": "YulIf",
															"src": "7928:56:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7994:37:17",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8024:6:17"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "8002:21:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8002:29:17"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "7994:4:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8068:23:17",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "8080:4:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8086:4:17",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8076:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8076:15:17"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "8068:4:17"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7841:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7852:4:17",
														"type": ""
													}
												],
												"src": "7791:307:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8168:82:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "8191:3:17"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "8196:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8201:6:17"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "8178:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8178:30:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8178:30:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "8228:3:17"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8233:6:17"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8224:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8224:16:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8242:1:17",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8217:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8217:27:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8217:27:17"
														}
													]
												},
												"name": "copy_calldata_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8150:3:17",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8155:3:17",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8160:6:17",
														"type": ""
													}
												],
												"src": "8104:146:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8339:340:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8349:74:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8415:6:17"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "8374:40:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8374:48:17"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "8358:15:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8358:65:17"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "8349:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "8439:5:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8446:6:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8432:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8432:21:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8432:21:17"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8462:27:17",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "8477:5:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8484:4:17",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8473:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8473:16:17"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "8466:3:17",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8527:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "8529:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8529:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8529:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "8508:3:17"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8513:6:17"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8504:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8504:16:17"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "8522:3:17"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8501:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8501:25:17"
															},
															"nodeType": "YulIf",
															"src": "8498:112:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "8656:3:17"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "8661:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8666:6:17"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "8619:36:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8619:54:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8619:54:17"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8312:3:17",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8317:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8325:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "8333:5:17",
														"type": ""
													}
												],
												"src": "8256:423:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8759:277:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8808:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "8810:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8810:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8810:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8787:6:17"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8795:4:17",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8783:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8783:17:17"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "8802:3:17"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "8779:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8779:27:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8772:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8772:35:17"
															},
															"nodeType": "YulIf",
															"src": "8769:122:17"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8900:34:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "8927:6:17"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8914:12:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8914:20:17"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8904:6:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8943:87:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "9003:6:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9011:4:17",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8999:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8999:17:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9018:6:17"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "9026:3:17"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "8952:46:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8952:78:17"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "8943:5:17"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "8737:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8745:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "8753:5:17",
														"type": ""
													}
												],
												"src": "8698:338:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9168:817:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9215:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "9217:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9217:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9217:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9189:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9198:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9185:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9185:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9210:3:17",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9181:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "9181:33:17"
															},
															"nodeType": "YulIf",
															"src": "9178:120:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "9308:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9323:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9337:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9327:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9352:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9387:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9398:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9383:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9383:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9407:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "9362:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9362:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "9352:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9435:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9450:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9464:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9454:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9480:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9515:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9526:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9511:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9511:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9535:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "9490:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9490:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "9480:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9563:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9578:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9592:2:17",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9582:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9608:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9643:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9654:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9639:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9639:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9663:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9618:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9618:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "9608:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9691:287:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9706:46:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9737:9:17"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9748:2:17",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9733:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9733:18:17"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "9720:12:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9720:32:17"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9710:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "9799:83:17",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "9801:77:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9801:79:17"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "9801:79:17"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "9771:6:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9779:18:17",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "9768:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9768:30:17"
																	},
																	"nodeType": "YulIf",
																	"src": "9765:117:17"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9896:72:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9940:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9951:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9936:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9936:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9960:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "9906:29:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9906:62:17"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "9896:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9114:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9125:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9137:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9145:6:17",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9153:6:17",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "9161:6:17",
														"type": ""
													}
												],
												"src": "9042:943:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10074:391:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10120:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "10122:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10122:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10122:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10095:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10104:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10091:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10091:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10116:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10087:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10087:32:17"
															},
															"nodeType": "YulIf",
															"src": "10084:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "10213:117:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10228:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10242:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10232:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10257:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10292:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10303:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10288:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10288:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10312:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "10267:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10267:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "10257:6:17"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "10340:118:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10355:16:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10369:2:17",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10359:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10385:63:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10420:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10431:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10416:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10416:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10440:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "10395:20:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10395:53:17"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "10385:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10036:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10047:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10059:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10067:6:17",
														"type": ""
													}
												],
												"src": "9991:474:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10499:152:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10516:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10519:77:17",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10509:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10509:88:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10509:88:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10613:1:17",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10616:4:17",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10606:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10606:15:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10606:15:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10637:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10640:4:17",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10630:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10630:15:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10630:15:17"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "10471:180:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10708:269:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10718:22:17",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "10732:4:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10738:1:17",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10728:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10728:12:17"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "10718:6:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10749:38:17",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "10779:4:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10785:1:17",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10775:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10775:12:17"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "10753:18:17",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10826:51:17",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10840:27:17",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "10854:6:17"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10862:4:17",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "10850:3:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10850:17:17"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "10840:6:17"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "10806:18:17"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10799:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10799:26:17"
															},
															"nodeType": "YulIf",
															"src": "10796:81:17"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10929:42:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "10943:16:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10943:18:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10943:18:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "10893:18:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "10916:6:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10924:2:17",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "10913:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10913:14:17"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "10890:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "10890:38:17"
															},
															"nodeType": "YulIf",
															"src": "10887:84:17"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "10692:4:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10701:6:17",
														"type": ""
													}
												],
												"src": "10657:320:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11137:288:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11147:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11159:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11170:2:17",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11155:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11155:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11147:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11227:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11240:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11251:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11236:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11236:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11183:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11183:71:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11183:71:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11308:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11321:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11332:2:17",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11317:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11317:18:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11264:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11264:72:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11264:72:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "11390:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11403:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11414:2:17",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11399:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11399:18:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11346:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11346:72:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11346:72:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11093:9:17",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "11105:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11113:6:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11121:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11132:4:17",
														"type": ""
													}
												],
												"src": "10983:442:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11484:32:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11494:16:17",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "11505:5:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "11494:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_rational_1_by_1",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11466:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "11476:7:17",
														"type": ""
													}
												],
												"src": "11431:85:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11566:57:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11576:41:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11591:5:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11598:18:17",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "11587:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11587:30:17"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "11576:7:17"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11548:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "11558:7:17",
														"type": ""
													}
												],
												"src": "11522:101:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11661:28:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11671:12:17",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "11678:5:17"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "11671:3:17"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11647:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "11657:3:17",
														"type": ""
													}
												],
												"src": "11629:60:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11762:89:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11772:73:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11837:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_rational_1_by_1",
																					"nodeType": "YulIdentifier",
																					"src": "11811:25:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11811:32:17"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "11802:8:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11802:42:17"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint64",
																	"nodeType": "YulIdentifier",
																	"src": "11785:16:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11785:60:17"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "11772:9:17"
																}
															]
														}
													]
												},
												"name": "convert_t_rational_1_by_1_to_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11742:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "11752:9:17",
														"type": ""
													}
												],
												"src": "11695:156:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11929:73:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11946:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11989:5:17"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_rational_1_by_1_to_t_uint64",
																			"nodeType": "YulIdentifier",
																			"src": "11951:37:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11951:44:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11939:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "11939:57:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11939:57:17"
														}
													]
												},
												"name": "abi_encode_t_rational_1_by_1_to_t_uint64_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11917:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11924:3:17",
														"type": ""
													}
												],
												"src": "11857:145:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12113:131:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12123:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12135:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12146:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12131:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "12131:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12123:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12210:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12223:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12234:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12219:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12219:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_rational_1_by_1_to_t_uint64_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12159:50:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "12159:78:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12159:78:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12085:9:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12097:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12108:4:17",
														"type": ""
													}
												],
												"src": "12008:236:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12364:34:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12374:18:17",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "12389:3:17"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "12374:11:17"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12336:3:17",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "12341:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "12352:11:17",
														"type": ""
													}
												],
												"src": "12250:148:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12514:280:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12524:53:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12571:5:17"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "12538:32:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "12538:39:17"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "12528:6:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12586:96:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12670:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12675:6:17"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12593:76:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "12593:89:17"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12586:3:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12730:5:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12737:4:17",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12726:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12726:16:17"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12744:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12749:6:17"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "12691:34:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "12691:65:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12691:65:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12765:23:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12776:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12781:6:17"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12772:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "12772:16:17"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "12765:3:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12495:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12502:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12510:3:17",
														"type": ""
													}
												],
												"src": "12404:390:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12984:251:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12995:102:17",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13084:6:17"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13093:3:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13002:81:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13002:95:17"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12995:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13107:102:17",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13196:6:17"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13205:3:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13114:81:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13114:95:17"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13107:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13219:10:17",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "13226:3:17"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13219:3:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12955:3:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12961:6:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12969:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12980:3:17",
														"type": ""
													}
												],
												"src": "12800:435:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13299:40:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13310:22:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13326:5:17"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13320:5:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13320:12:17"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "13310:6:17"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13282:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13292:6:17",
														"type": ""
													}
												],
												"src": "13241:98:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13440:73:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13457:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13462:6:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13450:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13450:19:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13450:19:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13478:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13497:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13502:4:17",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13493:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13493:14:17"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "13478:11:17"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13412:3:17",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13417:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "13428:11:17",
														"type": ""
													}
												],
												"src": "13345:168:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13609:283:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13619:52:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13665:5:17"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "13633:31:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13633:38:17"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "13623:6:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13680:77:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13745:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13750:6:17"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13687:57:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13687:70:17"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13680:3:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13805:5:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13812:4:17",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13801:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13801:16:17"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13819:3:17"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13824:6:17"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "13766:34:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13766:65:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13766:65:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13840:46:17",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13851:3:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "13878:6:17"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "13856:21:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13856:29:17"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13847:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "13847:39:17"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13840:3:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13590:5:17",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13597:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13605:3:17",
														"type": ""
													}
												],
												"src": "13519:373:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14098:440:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14108:27:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14120:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14131:3:17",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14116:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14116:19:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14108:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "14189:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14202:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14213:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14198:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14198:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14145:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14145:71:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14145:71:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "14270:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14283:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14294:2:17",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14279:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14279:18:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14226:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14226:72:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14226:72:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "14352:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14365:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14376:2:17",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14361:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14361:18:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14308:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14308:72:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14308:72:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14401:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14412:2:17",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14397:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14397:18:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14421:4:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14427:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14417:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14417:20:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14390:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14390:48:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14390:48:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14447:84:17",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "14517:6:17"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14526:4:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14455:61:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14455:76:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14447:4:17"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14046:9:17",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "14058:6:17",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "14066:6:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "14074:6:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14082:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14093:4:17",
														"type": ""
													}
												],
												"src": "13898:640:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14606:79:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14616:22:17",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "14631:6:17"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "14625:5:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14625:13:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "14616:5:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14673:5:17"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "14647:25:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14647:32:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14647:32:17"
														}
													]
												},
												"name": "abi_decode_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "14584:6:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14592:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14600:5:17",
														"type": ""
													}
												],
												"src": "14544:141:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14767:273:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14813:83:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "14815:77:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14815:79:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14815:79:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "14788:7:17"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14797:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14784:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14784:23:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14809:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "14780:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "14780:32:17"
															},
															"nodeType": "YulIf",
															"src": "14777:119:17"
														},
														{
															"nodeType": "YulBlock",
															"src": "14906:127:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "14921:15:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14935:1:17",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "14925:6:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "14950:73:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "14995:9:17"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "15006:6:17"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "14991:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14991:22:17"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "15015:7:17"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "14960:30:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14960:63:17"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "14950:6:17"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14737:9:17",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "14748:7:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14760:6:17",
														"type": ""
													}
												],
												"src": "14691:349:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15074:152:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15091:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15094:77:17",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15084:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15084:88:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15084:88:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15188:1:17",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15191:4:17",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15181:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15181:15:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15181:15:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15212:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15215:4:17",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "15205:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15205:15:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15205:15:17"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "15046:180:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15286:87:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15296:11:17",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "15304:3:17"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "15296:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15324:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "15327:3:17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15317:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15317:14:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15317:14:17"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15340:26:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15358:1:17",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15361:4:17",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "15348:9:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15348:18:17"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "15340:4:17"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "15273:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "15281:4:17",
														"type": ""
													}
												],
												"src": "15232:141:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15423:49:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15433:33:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "15451:5:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15458:2:17",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15447:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15447:14:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15463:2:17",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "15443:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15443:23:17"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "15433:6:17"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15406:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "15416:6:17",
														"type": ""
													}
												],
												"src": "15379:93:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15531:54:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15541:37:17",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "15566:4:17"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15572:5:17"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "15562:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15562:16:17"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "15541:8:17"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "15506:4:17",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15512:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "15522:8:17",
														"type": ""
													}
												],
												"src": "15478:107:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15667:317:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15677:35:17",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nodeType": "YulIdentifier",
																		"src": "15698:10:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15710:1:17",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "15694:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15694:18:17"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nodeType": "YulTypedName",
																	"src": "15681:9:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15721:109:17",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "15752:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15763:66:17",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "15733:18:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15733:97:17"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "15725:4:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15839:51:17",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "15870:9:17"
																	},
																	{
																		"name": "toInsert",
																		"nodeType": "YulIdentifier",
																		"src": "15881:8:17"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "15851:18:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15851:39:17"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nodeType": "YulIdentifier",
																	"src": "15839:8:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15899:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15912:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "15923:4:17"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "15919:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15919:9:17"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "15908:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15908:21:17"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "15899:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15938:40:17",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15951:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nodeType": "YulIdentifier",
																				"src": "15962:8:17"
																			},
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "15972:4:17"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "15958:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15958:19:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "15948:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "15948:30:17"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "15938:6:17"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15628:5:17",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nodeType": "YulTypedName",
														"src": "15635:10:17",
														"type": ""
													},
													{
														"name": "toInsert",
														"nodeType": "YulTypedName",
														"src": "15647:8:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "15660:6:17",
														"type": ""
													}
												],
												"src": "15591:393:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16050:82:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16060:66:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "16118:5:17"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "16100:17:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16100:24:17"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "16091:8:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16091:34:17"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16073:17:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "16073:53:17"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "16060:9:17"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16030:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "16040:9:17",
														"type": ""
													}
												],
												"src": "15990:142:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16185:28:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16195:12:17",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "16202:5:17"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "16195:3:17"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16171:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "16181:3:17",
														"type": ""
													}
												],
												"src": "16138:75:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16295:193:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16305:63:17",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nodeType": "YulIdentifier",
																		"src": "16360:7:17"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16329:30:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "16329:39:17"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nodeType": "YulTypedName",
																	"src": "16309:16:17",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "16384:4:17"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "16424:4:17"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "16418:5:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16418:11:17"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "16431:6:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nodeType": "YulIdentifier",
																						"src": "16463:16:17"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "16439:23:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16439:41:17"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nodeType": "YulIdentifier",
																			"src": "16390:27:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16390:91:17"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "16377:6:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "16377:105:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16377:105:17"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "16272:4:17",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "16278:6:17",
														"type": ""
													},
													{
														"name": "value_0",
														"nodeType": "YulTypedName",
														"src": "16286:7:17",
														"type": ""
													}
												],
												"src": "16219:269:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16543:24:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16553:8:17",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "16560:1:17",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "16553:3:17"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "16539:3:17",
														"type": ""
													}
												],
												"src": "16494:73:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16626:136:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16636:46:17",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16650:30:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "16650:32:17"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nodeType": "YulTypedName",
																	"src": "16640:6:17",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "16735:4:17"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "16741:6:17"
																	},
																	{
																		"name": "zero_0",
																		"nodeType": "YulIdentifier",
																		"src": "16749:6:17"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16691:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "16691:65:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16691:65:17"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "16612:4:17",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "16618:6:17",
														"type": ""
													}
												],
												"src": "16573:189:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16818:136:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16885:63:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "16929:5:17"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16936:1:17",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "16899:29:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16899:39:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16899:39:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nodeType": "YulIdentifier",
																		"src": "16838:5:17"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "16845:3:17"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "16835:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "16835:14:17"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "16850:26:17",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "16852:22:17",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "16865:5:17"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16872:1:17",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16861:3:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16861:13:17"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nodeType": "YulIdentifier",
																				"src": "16852:5:17"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "16832:2:17",
																"statements": []
															},
															"src": "16828:120:17"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nodeType": "YulTypedName",
														"src": "16806:5:17",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "16813:3:17",
														"type": ""
													}
												],
												"src": "16768:186:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17039:464:17",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17065:431:17",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "17079:54:17",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "17127:5:17"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nodeType": "YulIdentifier",
																				"src": "17095:31:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17095:38:17"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nodeType": "YulTypedName",
																				"src": "17083:8:17",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "17146:63:17",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nodeType": "YulIdentifier",
																					"src": "17169:8:17"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nodeType": "YulIdentifier",
																							"src": "17197:10:17"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nodeType": "YulIdentifier",
																						"src": "17179:17:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17179:29:17"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "17165:3:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17165:44:17"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "17150:11:17",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "17366:27:17",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "17368:23:17",
																					"value": {
																						"name": "dataArea",
																						"nodeType": "YulIdentifier",
																						"src": "17383:8:17"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "17368:11:17"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "17350:10:17"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17362:2:17",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "17347:2:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17347:18:17"
																		},
																		"nodeType": "YulIf",
																		"src": "17344:49:17"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nodeType": "YulIdentifier",
																					"src": "17435:11:17"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nodeType": "YulIdentifier",
																							"src": "17452:8:17"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "17480:3:17"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nodeType": "YulIdentifier",
																								"src": "17462:17:17"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "17462:22:17"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "17448:3:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17448:37:17"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nodeType": "YulIdentifier",
																				"src": "17406:28:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17406:80:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17406:80:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "17056:3:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17061:2:17",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "17053:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "17053:11:17"
															},
															"nodeType": "YulIf",
															"src": "17050:446:17"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "17015:5:17",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "17022:3:17",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "17027:10:17",
														"type": ""
													}
												],
												"src": "16960:543:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17572:54:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17582:37:17",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "17607:4:17"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17613:5:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "17603:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "17603:16:17"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "17582:8:17"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "17547:4:17",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17553:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "17563:8:17",
														"type": ""
													}
												],
												"src": "17509:117:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17683:118:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17693:68:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "17742:1:17",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nodeType": "YulIdentifier",
																						"src": "17745:5:17"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "17738:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17738:13:17"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "17757:1:17",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "17753:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17753:6:17"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nodeType": "YulIdentifier",
																			"src": "17709:28:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17709:51:17"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "17705:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "17705:56:17"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "17697:4:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17770:25:17",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "17784:4:17"
																	},
																	{
																		"name": "mask",
																		"nodeType": "YulIdentifier",
																		"src": "17790:4:17"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "17780:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "17780:15:17"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "17770:6:17"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "17660:4:17",
														"type": ""
													},
													{
														"name": "bytes",
														"nodeType": "YulTypedName",
														"src": "17666:5:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "17676:6:17",
														"type": ""
													}
												],
												"src": "17632:169:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17887:214:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18020:37:17",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "18047:4:17"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "18053:3:17"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "18028:18:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "18028:29:17"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "18020:4:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "18066:29:17",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "18077:4:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18087:1:17",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "18090:3:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "18083:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18083:11:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "18074:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "18074:21:17"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "18066:4:17"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "17868:4:17",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "17874:3:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "17882:4:17",
														"type": ""
													}
												],
												"src": "17806:295:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18198:1303:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18209:51:17",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "18256:3:17"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "18223:32:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "18223:37:17"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "18213:6:17",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18345:22:17",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "18347:16:17"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18347:18:17"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18347:18:17"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "18317:6:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18325:18:17",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "18314:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "18314:30:17"
															},
															"nodeType": "YulIf",
															"src": "18311:56:17"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18377:52:17",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nodeType": "YulIdentifier",
																				"src": "18423:4:17"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nodeType": "YulIdentifier",
																			"src": "18417:5:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18417:11:17"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nodeType": "YulIdentifier",
																	"src": "18391:25:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "18391:38:17"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nodeType": "YulTypedName",
																	"src": "18381:6:17",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "18522:4:17"
																	},
																	{
																		"name": "oldLen",
																		"nodeType": "YulIdentifier",
																		"src": "18528:6:17"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "18536:6:17"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "18476:45:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "18476:67:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18476:67:17"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18553:18:17",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "18570:1:17",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "18557:9:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "18581:17:17",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "18594:4:17",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "18581:9:17"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "18645:611:17",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "18659:37:17",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "18678:6:17"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "18690:4:17",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "18686:3:17"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "18686:9:17"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "18674:3:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18674:22:17"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "18663:7:17",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "18710:51:17",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "18756:4:17"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "18724:31:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18724:37:17"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "18714:6:17",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "18774:10:17",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18783:1:17",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "18778:1:17",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "18842:163:17",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "18867:6:17"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "18885:3:17"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "18890:9:17"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "18881:3:17"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "18881:19:17"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "18875:5:17"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "18875:26:17"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "18860:6:17"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "18860:42:17"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "18860:42:17"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "18919:24:17",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "18933:6:17"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "18941:1:17",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "18929:3:17"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "18929:14:17"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "18919:6:17"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "18960:31:17",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "18977:9:17"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "18988:2:17",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "18973:3:17"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "18973:18:17"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "18960:9:17"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "18808:1:17"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "18811:7:17"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "18805:2:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18805:14:17"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "18820:21:17",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "18822:17:17",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "18831:1:17"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "18834:4:17",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "18827:3:17"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "18827:12:17"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "18822:1:17"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "18801:3:17",
																					"statements": []
																				},
																				"src": "18797:208:17"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "19041:156:17",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "19059:43:17",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "19086:3:17"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "19091:9:17"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "19082:3:17"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "19082:19:17"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "19076:5:17"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "19076:26:17"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "19063:9:17",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "19126:6:17"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "19153:9:17"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nodeType": "YulIdentifier",
																														"src": "19168:6:17"
																													},
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "19176:4:17",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nodeType": "YulIdentifier",
																													"src": "19164:3:17"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "19164:17:17"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nodeType": "YulIdentifier",
																											"src": "19134:18:17"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "19134:48:17"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "19119:6:17"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "19119:64:17"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "19119:64:17"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "19024:7:17"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "19033:6:17"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "19021:2:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "19021:19:17"
																				},
																				"nodeType": "YulIf",
																				"src": "19018:179:17"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "19217:4:17"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "19231:6:17"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "19239:1:17",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nodeType": "YulIdentifier",
																										"src": "19227:3:17"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "19227:14:17"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "19243:1:17",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "19223:3:17"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "19223:22:17"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "19210:6:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "19210:36:17"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "19210:36:17"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "18638:618:17",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18643:1:17",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "19273:222:17",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "19287:14:17",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19300:1:17",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "19291:5:17",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "19324:67:17",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "19342:35:17",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "19361:3:17"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "19366:9:17"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "19357:3:17"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "19357:19:17"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "19351:5:17"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "19351:26:17"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "19342:5:17"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "19317:6:17"
																				},
																				"nodeType": "YulIf",
																				"src": "19314:77:17"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "19411:4:17"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "19470:5:17"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "19477:6:17"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "19417:52:17"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "19417:67:17"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "19404:6:17"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "19404:81:17"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "19404:81:17"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "19265:230:17",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "18618:6:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18626:2:17",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "18615:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "18615:14:17"
															},
															"nodeType": "YulSwitch",
															"src": "18608:887:17"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "18187:4:17",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "18193:3:17",
														"type": ""
													}
												],
												"src": "18106:1395:17"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19633:206:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19643:26:17",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19655:9:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19666:2:17",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19651:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "19651:18:17"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19643:4:17"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "19723:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19736:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19747:1:17",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19732:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19732:17:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19679:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "19679:71:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19679:71:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "19804:6:17"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19817:9:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19828:2:17",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19813:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19813:18:17"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19760:43:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "19760:72:17"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19760:72:17"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "19597:9:17",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "19609:6:17",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "19617:6:17",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "19628:4:17",
														"type": ""
													}
												],
												"src": "19507:332:17"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint64(value) -> converted {\n        converted := cleanup_t_uint64(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n",
									"id": 17,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060043610610140575f3560e01c8063715018a6116100b6578063a22cb4651161007a578063a22cb46514610326578063b88d4fde14610342578063c4d66de81461035e578063c87b56dd1461037a578063e985e9c5146103aa578063f2fde38b146103da57610140565b8063715018a6146102ba5780638456cb59146102c45780638da5cb5b146102ce57806395d89b41146102ec578063a14481941461030a57610140565b80633f4ba83a116101085780633f4ba83a146101fa57806342842e0e1461020457806342966c68146102205780635c975abb1461023c5780636352211e1461025a57806370a082311461028a57610140565b806301ffc9a71461014457806306fdde0314610174578063081812fc14610192578063095ea7b3146101c257806323b872dd146101de575b5f80fd5b61015e60048036038101906101599190611fb3565b6103f6565b60405161016b9190611ff8565b60405180910390f35b61017c6104d7565b604051610189919061209b565b60405180910390f35b6101ac60048036038101906101a791906120ee565b610574565b6040516101b99190612158565b60405180910390f35b6101dc60048036038101906101d7919061219b565b61058f565b005b6101f860048036038101906101f391906121d9565b6105a5565b005b6102026106a4565b005b61021e600480360381019061021991906121d9565b6106b6565b005b61023a600480360381019061023591906120ee565b6106d5565b005b6102446106eb565b6040516102519190611ff8565b60405180910390f35b610274600480360381019061026f91906120ee565b61070d565b6040516102819190612158565b60405180910390f35b6102a4600480360381019061029f9190612229565b61071e565b6040516102b19190612263565b60405180910390f35b6102c26107e2565b005b6102cc6107f5565b005b6102d6610807565b6040516102e39190612158565b60405180910390f35b6102f461083c565b604051610301919061209b565b60405180910390f35b610324600480360381019061031f919061219b565b6108da565b005b610340600480360381019061033b91906122a6565b6108f0565b005b61035c60048036038101906103579190612410565b610906565b005b61037860048036038101906103739190612229565b610923565b005b610394600480360381019061038f91906120ee565b610b28565b6040516103a1919061209b565b60405180910390f35b6103c460048036038101906103bf9190612490565b610b8e565b6040516103d19190611ff8565b60405180910390f35b6103f460048036038101906103ef9190612229565b610c2a565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104c057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104d057506104cf82610cae565b5b9050919050565b60605f6104e2610d17565b9050805f0180546104f2906124fb565b80601f016020809104026020016040519081016040528092919081815260200182805461051e906124fb565b80156105695780601f1061054057610100808354040283529160200191610569565b820191905f5260205f20905b81548152906001019060200180831161054c57829003601f168201915b505050505091505090565b5f61057e82610d3e565b5061058882610dc4565b9050919050565b6105a1828261059c610e0b565b610e12565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610615575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161060c9190612158565b60405180910390fd5b5f6106288383610623610e0b565b610e24565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461069e578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016106959392919061252b565b60405180910390fd5b50505050565b6106ac610e39565b6106b4610ec0565b565b6106d083838360405180602001604052805f815250610906565b505050565b6106e75f826106e2610e0b565b610e24565b5050565b5f806106f5610f2e565b9050805f015f9054906101000a900460ff1691505090565b5f61071782610d3e565b9050919050565b5f80610728610d17565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361079a575f6040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016107919190612158565b60405180910390fd5b806003015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054915050919050565b6107ea610e39565b6107f35f610f55565b565b6107fd610e39565b610805611026565b565b5f80610811611095565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60605f610847610d17565b9050806001018054610858906124fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610884906124fb565b80156108cf5780601f106108a6576101008083540402835291602001916108cf565b820191905f5260205f20905b8154815290600101906020018083116108b257829003601f168201915b505050505091505090565b6108e2610e39565b6108ec82826110bc565b5050565b6109026108fb610e0b565b83836110d9565b5050565b6109118484846105a5565b61091d84848484611250565b50505050565b5f61092c611402565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156109745750825b90505f60018367ffffffffffffffff161480156109a757505f3073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156109b5575080155b156109ec576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610a39576001855f0160086101000a81548160ff0219169083151502179055505b610aad6040518060400160405280600781526020017f4d79546f6b656e000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544b0000000000000000000000000000000000000000000000000000000000815250611429565b610ab561143f565b610abe86611451565b610ac6611465565b8315610b20575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610b1791906125b5565b60405180910390a15b505050505050565b6060610b3382610d3e565b505f610b3d61146f565b90505f815111610b5b5760405180602001604052805f815250610b86565b80610b6584611485565b604051602001610b76929190612608565b6040516020818303038152906040525b915050919050565b5f80610b98610d17565b9050806005015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1691505092915050565b610c32610e39565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ca2575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610c999190612158565b60405180910390fd5b610cab81610f55565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300905090565b5f80610d498361154f565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dbb57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610db29190612263565b60405180910390fd5b80915050919050565b5f80610dce610d17565b9050806004015f8481526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b5f33905090565b610e1f8383836001611596565b505050565b5f610e30848484611763565b90509392505050565b610e41610e0b565b73ffffffffffffffffffffffffffffffffffffffff16610e5f610807565b73ffffffffffffffffffffffffffffffffffffffff1614610ebe57610e82610e0b565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610eb59190612158565b60405180910390fd5b565b610ec8611780565b5f610ed1610f2e565b90505f815f015f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610f16610e0b565b604051610f239190612158565b60405180910390a150565b5f7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300905090565b5f610f5e611095565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b61102e6117c0565b5f611037610f2e565b90506001815f015f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861107d610e0b565b60405161108a9190612158565b60405180910390a150565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b6110d5828260405180602001604052805f815250611801565b5050565b5f6110e2610d17565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361115457826040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161114b9190612158565b60405180910390fd5b81816005015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516112429190611ff8565b60405180910390a350505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b11156113fc578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611293610e0b565b8685856040518563ffffffff1660e01b81526004016112b5949392919061267d565b6020604051808303815f875af19250505080156112f057506040513d601f19601f820116820180604052508101906112ed91906126db565b60015b611371573d805f811461131e576040519150601f19603f3d011682016040523d82523d5f602084013e611323565b606091505b505f81510361136957836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113609190612158565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146113fa57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113f19190612158565b60405180910390fd5b505b50505050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b61143161181c565b61143b828261185c565b5050565b61144761181c565b61144f611897565b565b61145961181c565b611462816118c7565b50565b61146d61181c565b565b606060405180602001604052805f815250905090565b60605f60016114938461194b565b0190505f8167ffffffffffffffff8111156114b1576114b06122ec565b5b6040519080825280601f01601f1916602001820160405280156114e35781602001600182028036833780820191505090505b5090505f82602001820190505b600115611544578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161153957611538612706565b5b0494505f85036114f0575b819350505050919050565b5f80611559610d17565b9050806002015f8481526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b5f61159f610d17565b905081806115d957505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561170b575f6115e885610d3e565b90505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561165257508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561166557506116638185610b8e565b155b156116a757836040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161169e9190612158565b60405180910390fd5b821561170957848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b84816004015f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b5f61176c6117c0565b611777848484611a9c565b90509392505050565b6117886106eb565b6117be576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6117c86106eb565b156117ff576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61180b8383611cb9565b6118175f848484611250565b505050565b611824611dac565b61185a576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61186461181c565b5f61186d610d17565b905082815f01908161187f91906128c7565b508181600101908161189191906128c7565b50505050565b61189f61181c565b5f6118a8610f2e565b90505f815f015f6101000a81548160ff02191690831515021790555050565b6118cf61181c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361193f575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016119369190612158565b60405180910390fd5b61194881610f55565b50565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106119a7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161199d5761199c612706565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106119e4576d04ee2d6d415b85acef810000000083816119da576119d9612706565b5b0492506020810190505b662386f26fc100008310611a1357662386f26fc100008381611a0957611a08612706565b5b0492506010810190505b6305f5e1008310611a3c576305f5e1008381611a3257611a31612706565b5b0492506008810190505b6127108310611a61576127108381611a5757611a56612706565b5b0492506004810190505b60648310611a845760648381611a7a57611a79612706565b5b0492506002810190505b600a8310611a93576001810190505b80915050919050565b5f80611aa6610d17565b90505f611ab28561154f565b90505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611af357611af2818587611dca565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611b8057611b325f865f80611596565b6001826003015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611c01576001826003015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b85826002015f8781526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480925050509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d29575f6040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611d209190612158565b60405180910390fd5b5f611d3583835f610e24565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611da7575f6040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611d9e9190612158565b60405180910390fd5b505050565b5f611db5611402565b5f0160089054906101000a900460ff16905090565b611dd5838383611e8d565b611e88575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611e4957806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611e409190612263565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611e7f929190612996565b60405180910390fd5b505050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611f4457508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f055750611f048484610b8e565b5b80611f4357508273ffffffffffffffffffffffffffffffffffffffff16611f2b83610dc4565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f9281611f5e565b8114611f9c575f80fd5b50565b5f81359050611fad81611f89565b92915050565b5f60208284031215611fc857611fc7611f56565b5b5f611fd584828501611f9f565b91505092915050565b5f8115159050919050565b611ff281611fde565b82525050565b5f60208201905061200b5f830184611fe9565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561204857808201518184015260208101905061202d565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61206d82612011565b612077818561201b565b935061208781856020860161202b565b61209081612053565b840191505092915050565b5f6020820190508181035f8301526120b38184612063565b905092915050565b5f819050919050565b6120cd816120bb565b81146120d7575f80fd5b50565b5f813590506120e8816120c4565b92915050565b5f6020828403121561210357612102611f56565b5b5f612110848285016120da565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61214282612119565b9050919050565b61215281612138565b82525050565b5f60208201905061216b5f830184612149565b92915050565b61217a81612138565b8114612184575f80fd5b50565b5f8135905061219581612171565b92915050565b5f80604083850312156121b1576121b0611f56565b5b5f6121be85828601612187565b92505060206121cf858286016120da565b9150509250929050565b5f805f606084860312156121f0576121ef611f56565b5b5f6121fd86828701612187565b935050602061220e86828701612187565b925050604061221f868287016120da565b9150509250925092565b5f6020828403121561223e5761223d611f56565b5b5f61224b84828501612187565b91505092915050565b61225d816120bb565b82525050565b5f6020820190506122765f830184612254565b92915050565b61228581611fde565b811461228f575f80fd5b50565b5f813590506122a08161227c565b92915050565b5f80604083850312156122bc576122bb611f56565b5b5f6122c985828601612187565b92505060206122da85828601612292565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61232282612053565b810181811067ffffffffffffffff82111715612341576123406122ec565b5b80604052505050565b5f612353611f4d565b905061235f8282612319565b919050565b5f67ffffffffffffffff82111561237e5761237d6122ec565b5b61238782612053565b9050602081019050919050565b828183375f83830152505050565b5f6123b46123af84612364565b61234a565b9050828152602081018484840111156123d0576123cf6122e8565b5b6123db848285612394565b509392505050565b5f82601f8301126123f7576123f66122e4565b5b81356124078482602086016123a2565b91505092915050565b5f805f806080858703121561242857612427611f56565b5b5f61243587828801612187565b945050602061244687828801612187565b9350506040612457878288016120da565b925050606085013567ffffffffffffffff81111561247857612477611f5a565b5b612484878288016123e3565b91505092959194509250565b5f80604083850312156124a6576124a5611f56565b5b5f6124b385828601612187565b92505060206124c485828601612187565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061251257607f821691505b602082108103612525576125246124ce565b5b50919050565b5f60608201905061253e5f830186612149565b61254b6020830185612254565b6125586040830184612149565b949350505050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f819050919050565b5f61259f61259a61259584612560565b61257c565b612569565b9050919050565b6125af81612585565b82525050565b5f6020820190506125c85f8301846125a6565b92915050565b5f81905092915050565b5f6125e282612011565b6125ec81856125ce565b93506125fc81856020860161202b565b80840191505092915050565b5f61261382856125d8565b915061261f82846125d8565b91508190509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f61264f8261262b565b6126598185612635565b935061266981856020860161202b565b61267281612053565b840191505092915050565b5f6080820190506126905f830187612149565b61269d6020830186612149565b6126aa6040830185612254565b81810360608301526126bc8184612645565b905095945050505050565b5f815190506126d581611f89565b92915050565b5f602082840312156126f0576126ef611f56565b5b5f6126fd848285016126c7565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261278f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612754565b6127998683612754565b95508019841693508086168417925050509392505050565b5f6127cb6127c66127c1846120bb565b61257c565b6120bb565b9050919050565b5f819050919050565b6127e4836127b1565b6127f86127f0826127d2565b848454612760565b825550505050565b5f90565b61280c612800565b6128178184846127db565b505050565b5b8181101561283a5761282f5f82612804565b60018101905061281d565b5050565b601f82111561287f5761285081612733565b61285984612745565b81016020851015612868578190505b61287c61287485612745565b83018261281c565b50505b505050565b5f82821c905092915050565b5f61289f5f1984600802612884565b1980831691505092915050565b5f6128b78383612890565b9150826002028217905092915050565b6128d082612011565b67ffffffffffffffff8111156128e9576128e86122ec565b5b6128f382546124fb565b6128fe82828561283e565b5f60209050601f83116001811461292f575f841561291d578287015190505b61292785826128ac565b86555061298e565b601f19841661293d86612733565b5f5b828110156129645784890151825560018201915060208501945060208101905061293f565b86831015612981578489015161297d601f891682612890565b8355505b6001600288020188555050505b505050505050565b5f6040820190506129a95f830185612149565b6129b66020830184612254565b939250505056fea264697066735822122028237963563a8506ce114772263af5debfcd548065c726dabbdea1e859044d5f64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x140 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3AA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3DA JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0xA1448194 EQ PUSH2 0x30A JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x28A JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1DE JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x15E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x159 SWAP2 SWAP1 PUSH2 0x1FB3 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17C PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x209B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x574 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x219B JUMP JUMPDEST PUSH2 0x58F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST PUSH2 0x5A5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x202 PUSH2 0x6A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x21E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST PUSH2 0x6B6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x6D5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x244 PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x274 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26F SWAP2 SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x70D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C2 PUSH2 0x7E2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CC PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D6 PUSH2 0x807 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F4 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x209B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x324 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x219B JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x340 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33B SWAP2 SWAP1 PUSH2 0x22A6 JUMP JUMPDEST PUSH2 0x8F0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x35C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x357 SWAP2 SWAP1 PUSH2 0x2410 JUMP JUMPDEST PUSH2 0x906 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x378 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x373 SWAP2 SWAP1 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0x923 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x394 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38F SWAP2 SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0xB28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0x209B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x2490 JUMP JUMPDEST PUSH2 0xB8E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D1 SWAP2 SWAP1 PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EF SWAP2 SWAP1 PUSH2 0x2229 JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST STOP JUMPDEST PUSH0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4C0 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x4D0 JUMPI POP PUSH2 0x4CF DUP3 PUSH2 0xCAE JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x4E2 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD DUP1 SLOAD PUSH2 0x4F2 SWAP1 PUSH2 0x24FB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x51E SWAP1 PUSH2 0x24FB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x569 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x540 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x569 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x54C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x57E DUP3 PUSH2 0xD3E JUMP JUMPDEST POP PUSH2 0x588 DUP3 PUSH2 0xDC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP3 DUP3 PUSH2 0x59C PUSH2 0xE0B JUMP JUMPDEST PUSH2 0xE12 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x615 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60C SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x628 DUP4 DUP4 PUSH2 0x623 PUSH2 0xE0B JUMP JUMPDEST PUSH2 0xE24 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x69E JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x695 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x252B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x6AC PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x6B4 PUSH2 0xEC0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6D0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x906 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x6E7 PUSH0 DUP3 PUSH2 0x6E2 PUSH2 0xE0B JUMP JUMPDEST PUSH2 0xE24 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x6F5 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x717 DUP3 PUSH2 0xD3E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x728 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x79A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x791 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7EA PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x7F3 PUSH0 PUSH2 0xF55 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x7FD PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x805 PUSH2 0x1026 JUMP JUMPDEST JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x811 PUSH2 0x1095 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x847 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x858 SWAP1 PUSH2 0x24FB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x884 SWAP1 PUSH2 0x24FB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8CF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8A6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8CF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8B2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x8E2 PUSH2 0xE39 JUMP JUMPDEST PUSH2 0x8EC DUP3 DUP3 PUSH2 0x10BC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x902 PUSH2 0x8FB PUSH2 0xE0B JUMP JUMPDEST DUP4 DUP4 PUSH2 0x10D9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x911 DUP5 DUP5 DUP5 PUSH2 0x5A5 JUMP JUMPDEST PUSH2 0x91D DUP5 DUP5 DUP5 DUP5 PUSH2 0x1250 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x92C PUSH2 0x1402 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH0 DUP3 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x974 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x9A7 JUMPI POP PUSH0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x9B5 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0xA39 JUMPI PUSH1 0x1 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xAAD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D79546F6B656E00000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D544B0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1429 JUMP JUMPDEST PUSH2 0xAB5 PUSH2 0x143F JUMP JUMPDEST PUSH2 0xABE DUP7 PUSH2 0x1451 JUMP JUMPDEST PUSH2 0xAC6 PUSH2 0x1465 JUMP JUMPDEST DUP4 ISZERO PUSH2 0xB20 JUMPI PUSH0 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xB17 SWAP2 SWAP1 PUSH2 0x25B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB33 DUP3 PUSH2 0xD3E JUMP JUMPDEST POP PUSH0 PUSH2 0xB3D PUSH2 0x146F JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT PUSH2 0xB5B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0xB86 JUMP JUMPDEST DUP1 PUSH2 0xB65 DUP5 PUSH2 0x1485 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB76 SWAP3 SWAP2 SWAP1 PUSH2 0x2608 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB98 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x5 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC32 PUSH2 0xE39 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCA2 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC99 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCAB DUP2 PUSH2 0xF55 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xD49 DUP4 PUSH2 0x154F JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDBB JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDB2 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xDCE PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 ADD PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xE1F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1596 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE30 DUP5 DUP5 DUP5 PUSH2 0x1763 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE41 PUSH2 0xE0B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE5F PUSH2 0x807 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEBE JUMPI PUSH2 0xE82 PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEB5 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xEC8 PUSH2 0x1780 JUMP JUMPDEST PUSH0 PUSH2 0xED1 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xF16 PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF23 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH32 0xCD5ED15C6E187E77E9AEE88184C21F4F2182AB5827CB3B7E07FBEDCD63F03300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xF5E PUSH2 0x1095 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 DUP3 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x102E PUSH2 0x17C0 JUMP JUMPDEST PUSH0 PUSH2 0x1037 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x107D PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x108A SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x10D5 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x1801 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x10E2 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1154 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x5 ADD PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1242 SWAP2 SWAP1 PUSH2 0x1FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x13FC JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1293 PUSH2 0xE0B JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12B5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x267D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x12F0 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12ED SWAP2 SWAP1 PUSH2 0x26DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1371 JUMPI RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x131E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1323 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH0 DUP2 MLOAD SUB PUSH2 0x1369 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1360 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x13FA JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F1 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1431 PUSH2 0x181C JUMP JUMPDEST PUSH2 0x143B DUP3 DUP3 PUSH2 0x185C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1447 PUSH2 0x181C JUMP JUMPDEST PUSH2 0x144F PUSH2 0x1897 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1459 PUSH2 0x181C JUMP JUMPDEST PUSH2 0x1462 DUP2 PUSH2 0x18C7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x146D PUSH2 0x181C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH1 0x1 PUSH2 0x1493 DUP5 PUSH2 0x194B JUMP JUMPDEST ADD SWAP1 POP PUSH0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14B1 JUMPI PUSH2 0x14B0 PUSH2 0x22EC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14E3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1544 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1539 JUMPI PUSH2 0x1538 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH0 DUP6 SUB PUSH2 0x14F0 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1559 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x159F PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP2 DUP1 PUSH2 0x15D9 JUMPI POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x170B JUMPI PUSH0 PUSH2 0x15E8 DUP6 PUSH2 0xD3E JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1652 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1665 JUMPI POP PUSH2 0x1663 DUP2 DUP6 PUSH2 0xB8E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x16A7 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x169E SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 ISZERO PUSH2 0x1709 JUMPI DUP5 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP5 DUP2 PUSH1 0x4 ADD PUSH0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x176C PUSH2 0x17C0 JUMP JUMPDEST PUSH2 0x1777 DUP5 DUP5 DUP5 PUSH2 0x1A9C JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1788 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x17BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x17C8 PUSH2 0x6EB JUMP JUMPDEST ISZERO PUSH2 0x17FF JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x180B DUP4 DUP4 PUSH2 0x1CB9 JUMP JUMPDEST PUSH2 0x1817 PUSH0 DUP5 DUP5 DUP5 PUSH2 0x1250 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1824 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x185A JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1864 PUSH2 0x181C JUMP JUMPDEST PUSH0 PUSH2 0x186D PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH0 ADD SWAP1 DUP2 PUSH2 0x187F SWAP2 SWAP1 PUSH2 0x28C7 JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x1 ADD SWAP1 DUP2 PUSH2 0x1891 SWAP2 SWAP1 PUSH2 0x28C7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x189F PUSH2 0x181C JUMP JUMPDEST PUSH0 PUSH2 0x18A8 PUSH2 0xF2E JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x18CF PUSH2 0x181C JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x193F JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1936 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1948 DUP2 PUSH2 0xF55 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x19A7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x199D JUMPI PUSH2 0x199C PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x19E4 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x19DA JUMPI PUSH2 0x19D9 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1A13 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1A09 JUMPI PUSH2 0x1A08 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1A3C JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1A32 JUMPI PUSH2 0x1A31 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1A61 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1A57 JUMPI PUSH2 0x1A56 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1A84 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1A7A JUMPI PUSH2 0x1A79 PUSH2 0x2706 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1A93 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1AA6 PUSH2 0xD17 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x1AB2 DUP6 PUSH2 0x154F JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1AF3 JUMPI PUSH2 0x1AF2 DUP2 DUP6 DUP8 PUSH2 0x1DCA JUMP JUMPDEST JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1B80 JUMPI PUSH2 0x1B32 PUSH0 DUP7 PUSH0 DUP1 PUSH2 0x1596 JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C01 JUMPI PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP6 DUP3 PUSH1 0x2 ADD PUSH0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D29 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D20 SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x1D35 DUP4 DUP4 PUSH0 PUSH2 0xE24 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1DA7 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D9E SWAP2 SWAP1 PUSH2 0x2158 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1DB5 PUSH2 0x1402 JUMP JUMPDEST PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1DD5 DUP4 DUP4 DUP4 PUSH2 0x1E8D JUMP JUMPDEST PUSH2 0x1E88 JUMPI PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1E49 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E40 SWAP2 SWAP1 PUSH2 0x2263 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E7F SWAP3 SWAP2 SWAP1 PUSH2 0x2996 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1F44 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1F05 JUMPI POP PUSH2 0x1F04 DUP5 DUP5 PUSH2 0xB8E JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1F43 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1F2B DUP4 PUSH2 0xDC4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F92 DUP2 PUSH2 0x1F5E JUMP JUMPDEST DUP2 EQ PUSH2 0x1F9C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FAD DUP2 PUSH2 0x1F89 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FC8 JUMPI PUSH2 0x1FC7 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FD5 DUP5 DUP3 DUP6 ADD PUSH2 0x1F9F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FF2 DUP2 PUSH2 0x1FDE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x200B PUSH0 DUP4 ADD DUP5 PUSH2 0x1FE9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2048 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x202D JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x206D DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH2 0x2077 DUP2 DUP6 PUSH2 0x201B JUMP JUMPDEST SWAP4 POP PUSH2 0x2087 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x202B JUMP JUMPDEST PUSH2 0x2090 DUP2 PUSH2 0x2053 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x20B3 DUP2 DUP5 PUSH2 0x2063 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20CD DUP2 PUSH2 0x20BB JUMP JUMPDEST DUP2 EQ PUSH2 0x20D7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20E8 DUP2 PUSH2 0x20C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2103 JUMPI PUSH2 0x2102 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2110 DUP5 DUP3 DUP6 ADD PUSH2 0x20DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2142 DUP3 PUSH2 0x2119 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2152 DUP2 PUSH2 0x2138 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x216B PUSH0 DUP4 ADD DUP5 PUSH2 0x2149 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x217A DUP2 PUSH2 0x2138 JUMP JUMPDEST DUP2 EQ PUSH2 0x2184 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2195 DUP2 PUSH2 0x2171 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21B1 JUMPI PUSH2 0x21B0 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x21BE DUP6 DUP3 DUP7 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x21CF DUP6 DUP3 DUP7 ADD PUSH2 0x20DA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x21F0 JUMPI PUSH2 0x21EF PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x21FD DUP7 DUP3 DUP8 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x220E DUP7 DUP3 DUP8 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x221F DUP7 DUP3 DUP8 ADD PUSH2 0x20DA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223E JUMPI PUSH2 0x223D PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x224B DUP5 DUP3 DUP6 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x225D DUP2 PUSH2 0x20BB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2276 PUSH0 DUP4 ADD DUP5 PUSH2 0x2254 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2285 DUP2 PUSH2 0x1FDE JUMP JUMPDEST DUP2 EQ PUSH2 0x228F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22A0 DUP2 PUSH2 0x227C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22BC JUMPI PUSH2 0x22BB PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x22C9 DUP6 DUP3 DUP7 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x22DA DUP6 DUP3 DUP7 ADD PUSH2 0x2292 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x2322 DUP3 PUSH2 0x2053 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2341 JUMPI PUSH2 0x2340 PUSH2 0x22EC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2353 PUSH2 0x1F4D JUMP JUMPDEST SWAP1 POP PUSH2 0x235F DUP3 DUP3 PUSH2 0x2319 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x237E JUMPI PUSH2 0x237D PUSH2 0x22EC JUMP JUMPDEST JUMPDEST PUSH2 0x2387 DUP3 PUSH2 0x2053 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x23B4 PUSH2 0x23AF DUP5 PUSH2 0x2364 JUMP JUMPDEST PUSH2 0x234A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x23D0 JUMPI PUSH2 0x23CF PUSH2 0x22E8 JUMP JUMPDEST JUMPDEST PUSH2 0x23DB DUP5 DUP3 DUP6 PUSH2 0x2394 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x23F7 JUMPI PUSH2 0x23F6 PUSH2 0x22E4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2407 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x23A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2428 JUMPI PUSH2 0x2427 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2435 DUP8 DUP3 DUP9 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2446 DUP8 DUP3 DUP9 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2457 DUP8 DUP3 DUP9 ADD PUSH2 0x20DA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2478 JUMPI PUSH2 0x2477 PUSH2 0x1F5A JUMP JUMPDEST JUMPDEST PUSH2 0x2484 DUP8 DUP3 DUP9 ADD PUSH2 0x23E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24A6 JUMPI PUSH2 0x24A5 PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x24B3 DUP6 DUP3 DUP7 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24C4 DUP6 DUP3 DUP7 ADD PUSH2 0x2187 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2512 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2525 JUMPI PUSH2 0x2524 PUSH2 0x24CE JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x253E PUSH0 DUP4 ADD DUP7 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x254B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x2558 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2149 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x259F PUSH2 0x259A PUSH2 0x2595 DUP5 PUSH2 0x2560 JUMP JUMPDEST PUSH2 0x257C JUMP JUMPDEST PUSH2 0x2569 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25AF DUP2 PUSH2 0x2585 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25C8 PUSH0 DUP4 ADD DUP5 PUSH2 0x25A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x25E2 DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH2 0x25EC DUP2 DUP6 PUSH2 0x25CE JUMP JUMPDEST SWAP4 POP PUSH2 0x25FC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x202B JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2613 DUP3 DUP6 PUSH2 0x25D8 JUMP JUMPDEST SWAP2 POP PUSH2 0x261F DUP3 DUP5 PUSH2 0x25D8 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x264F DUP3 PUSH2 0x262B JUMP JUMPDEST PUSH2 0x2659 DUP2 DUP6 PUSH2 0x2635 JUMP JUMPDEST SWAP4 POP PUSH2 0x2669 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x202B JUMP JUMPDEST PUSH2 0x2672 DUP2 PUSH2 0x2053 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2690 PUSH0 DUP4 ADD DUP8 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x269D PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x26AA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2254 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x26BC DUP2 DUP5 PUSH2 0x2645 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x26D5 DUP2 PUSH2 0x1F89 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26F0 JUMPI PUSH2 0x26EF PUSH2 0x1F56 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x26FD DUP5 DUP3 DUP6 ADD PUSH2 0x26C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x278F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2754 JUMP JUMPDEST PUSH2 0x2799 DUP7 DUP4 PUSH2 0x2754 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x27CB PUSH2 0x27C6 PUSH2 0x27C1 DUP5 PUSH2 0x20BB JUMP JUMPDEST PUSH2 0x257C JUMP JUMPDEST PUSH2 0x20BB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27E4 DUP4 PUSH2 0x27B1 JUMP JUMPDEST PUSH2 0x27F8 PUSH2 0x27F0 DUP3 PUSH2 0x27D2 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2760 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x280C PUSH2 0x2800 JUMP JUMPDEST PUSH2 0x2817 DUP2 DUP5 DUP5 PUSH2 0x27DB JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x283A JUMPI PUSH2 0x282F PUSH0 DUP3 PUSH2 0x2804 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x281D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x287F JUMPI PUSH2 0x2850 DUP2 PUSH2 0x2733 JUMP JUMPDEST PUSH2 0x2859 DUP5 PUSH2 0x2745 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2868 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x287C PUSH2 0x2874 DUP6 PUSH2 0x2745 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x281C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x289F PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x2884 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x28B7 DUP4 DUP4 PUSH2 0x2890 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x28D0 DUP3 PUSH2 0x2011 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28E9 JUMPI PUSH2 0x28E8 PUSH2 0x22EC JUMP JUMPDEST JUMPDEST PUSH2 0x28F3 DUP3 SLOAD PUSH2 0x24FB JUMP JUMPDEST PUSH2 0x28FE DUP3 DUP3 DUP6 PUSH2 0x283E JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x292F JUMPI PUSH0 DUP5 ISZERO PUSH2 0x291D JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x2927 DUP6 DUP3 PUSH2 0x28AC JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x298E JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x293D DUP7 PUSH2 0x2733 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2964 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x293F JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x2981 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x297D PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x2890 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x29A9 PUSH0 DUP4 ADD DUP6 PUSH2 0x2149 JUMP JUMPDEST PUSH2 0x29B6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2254 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 0x23 PUSH26 0x63563A8506CE114772263AF5DEBFCD548065C726DABBDEA1E859 DIV 0x4D PUSH0 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "492:1003:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2674:311:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3546:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4792:154;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4618:113;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5495:578;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1021:63:16;;;:::i;:::-;;6139:132:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;876:314:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2692:145:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3366:118:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3044:265;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3155:101:0;;;:::i;:::-;;956:59:16;;;:::i;:::-;;2441:144:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3756:150:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1090:103:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5013:144:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6337:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;737:213:16;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3972:255:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5223:210;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3405:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2674:311:2;2787:4;2837:25;2822:40;;;:11;:40;;;;:104;;;;2893:33;2878:48;;;:11;:48;;;;2822:104;:156;;;;2942:36;2966:11;2942:23;:36::i;:::-;2822:156;2803:175;;2674:311;;;:::o;3546:146::-;3591:13;3616:23;3642:19;:17;:19::i;:::-;3616:45;;3678:1;:7;;3671:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3546:146;:::o;4792:154::-;4859:7;4878:22;4892:7;4878:13;:22::i;:::-;;4918:21;4931:7;4918:12;:21::i;:::-;4911:28;;4792:154;;;:::o;4618:113::-;4689:35;4698:2;4702:7;4711:12;:10;:12::i;:::-;4689:8;:35::i;:::-;4618:113;;:::o;5495:578::-;5603:1;5589:16;;:2;:16;;;5585:87;;5658:1;5628:33;;;;;;;;;;;:::i;:::-;;;;;;;;5585:87;5890:21;5914:34;5922:2;5926:7;5935:12;:10;:12::i;:::-;5914:7;:34::i;:::-;5890:58;;5979:4;5962:21;;:13;:21;;;5958:109;;6027:4;6033:7;6042:13;6006:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;5958:109;5575:498;5495:578;;;:::o;1021:63:16:-;2334:13:0;:11;:13::i;:::-;1067:10:16::1;:8;:10::i;:::-;1021:63::o:0;6139:132:2:-;6225:39;6242:4;6248:2;6252:7;6225:39;;;;;;;;;;;;:16;:39::i;:::-;6139:132;;;:::o;876:314:3:-;1141:42;1157:1;1161:7;1170:12;:10;:12::i;:::-;1141:7;:42::i;:::-;;876:314;:::o;2692:145:6:-;2739:4;2755:25;2783:21;:19;:21::i;:::-;2755:49;;2821:1;:9;;;;;;;;;;;;2814:16;;;2692:145;:::o;3366:118:2:-;3429:7;3455:22;3469:7;3455:13;:22::i;:::-;3448:29;;3366:118;;;:::o;3044:265::-;3107:7;3126:23;3152:19;:17;:19::i;:::-;3126:45;;3202:1;3185:19;;:5;:19;;;3181:87;;3254:1;3227:30;;;;;;;;;;;:::i;:::-;;;;;;;;3181:87;3284:1;:11;;:18;3296:5;3284:18;;;;;;;;;;;;;;;;3277:25;;;3044:265;;;:::o;3155:101:0:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;:::-;3155:101::o:0;956:59:16:-;2334:13:0;:11;:13::i;:::-;1000:8:16::1;:6;:8::i;:::-;956:59::o:0;2441:144:0:-;2487:7;2506:24;2533:20;:18;:20::i;:::-;2506:47;;2570:1;:8;;;;;;;;;;;;2563:15;;;2441:144;:::o;3756:150:2:-;3803:13;3828:23;3854:19;:17;:19::i;:::-;3828:45;;3890:1;:9;;3883:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3756:150;:::o;1090:103:16:-;2334:13:0;:11;:13::i;:::-;1164:22:16::1;1174:2;1178:7;1164:9;:22::i;:::-;1090:103:::0;;:::o;5013:144:2:-;5098:52;5117:12;:10;:12::i;:::-;5131:8;5141;5098:18;:52::i;:::-;5013:144;;:::o;6337:208::-;6450:31;6463:4;6469:2;6473:7;6450:12;:31::i;:::-;6491:47;6514:4;6520:2;6524:7;6533:4;6491:22;:47::i;:::-;6337:208;;;;:::o;737:213:16:-;4158:30:1;4191:26;:24;:26::i;:::-;4158:59;;4279:19;4302:1;:15;;;;;;;;;;;;4301:16;4279:38;;4327:18;4348:1;:14;;;;;;;;;;;;4327:35;;4706:17;4741:1;4726:11;:16;;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4805:1;4790:11;:16;;;:50;;;;;4839:1;4818:4;4810:25;;;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;;;;;;;;;;;;;4851:91;4968:1;4951;:14;;;:18;;;;;;;;;;;;;;;;;;4983:14;4979:67;;;5031:4;5013:1;:15;;;:22;;;;;;;;;;;;;;;;;;4979:67;808:31:16::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;::::0;:13:::1;:31::i;:::-;849:23;:21;:23::i;:::-;882:28;897:12;882:14;:28::i;:::-;920:23;:21;:23::i;:::-;5070:14:1::0;5066:101;;;5118:5;5100:1;:15;;;:23;;;;;;;;;;;;;;;;;;5142:14;5154:1;5142:14;;;;;;:::i;:::-;;;;;;;;5066:101;4092:1081;;;;;737:213:16;:::o;3972:255:2:-;4036:13;4061:22;4075:7;4061:13;:22::i;:::-;;4094:21;4118:10;:8;:10::i;:::-;4094:34;;4169:1;4151:7;4145:21;:25;:75;;;;;;;;;;;;;;;;;4187:7;4196:18;:7;:16;:18::i;:::-;4173:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4145:75;4138:82;;;3972:255;;;:::o;5223:210::-;5311:4;5327:23;5353:19;:17;:19::i;:::-;5327:45;;5389:1;:20;;:27;5410:5;5389:27;;;;;;;;;;;;;;;:37;5417:8;5389:37;;;;;;;;;;;;;;;;;;;;;;;;;5382:44;;;5223:210;;;;:::o;3405:215:0:-;2334:13;:11;:13::i;:::-;3509:1:::1;3489:22;;:8;:22;;::::0;3485:91:::1;;3562:1;3534:31;;;;;;;;;;;:::i;:::-;;;;;;;;3485:91;3585:28;3604:8;3585:18;:28::i;:::-;3405:215:::0;:::o;1034:146:7:-;1110:4;1148:25;1133:40;;;:11;:40;;;;1126:47;;1034:146;;;:::o;1958:156:2:-;2009:23;2077:21;2067:31;;1958:156;:::o;17836:241::-;17899:7;17918:13;17934:17;17943:7;17934:8;:17::i;:::-;17918:33;;17982:1;17965:19;;:5;:19;;;17961:88;;18030:7;18007:31;;;;;;;;;;;:::i;:::-;;;;;;;;17961:88;18065:5;18058:12;;;17836:241;;;:::o;7347:184::-;7417:7;7436:23;7462:19;:17;:19::i;:::-;7436:45;;7498:1;:17;;:26;7516:7;7498:26;;;;;;;;;;;;;;;;;;;;;7491:33;;;7347:184;;;:::o;887:96:5:-;940:7;966:10;959:17;;887:96;:::o;16002:120:2:-;16082:33;16091:2;16095:7;16104:4;16110;16082:8;:33::i;:::-;16002:120;;;:::o;1267:226:16:-;1424:7;1454:32;1468:2;1472:7;1481:4;1454:13;:32::i;:::-;1447:39;;1267:226;;;;;:::o;2658:162:0:-;2728:12;:10;:12::i;:::-;2717:23;;:7;:5;:7::i;:::-;:23;;;2713:101;;2790:12;:10;:12::i;:::-;2763:40;;;;;;;;;;;:::i;:::-;;;;;;;;2713:101;2658:162::o;3674:178:6:-;2563:16;:14;:16::i;:::-;3732:25:::1;3760:21;:19;:21::i;:::-;3732:49;;3803:5;3791:1;:9;;;:17;;;;;;;;;;;;;;;;;;3823:22;3832:12;:10;:12::i;:::-;3823:22;;;;;;:::i;:::-;;;;;;;;3722:130;3674:178::o:0;1147:162::-;1200:25;1270:23;1260:33;;1147:162;:::o;3774:248:0:-;3847:24;3874:20;:18;:20::i;:::-;3847:47;;3904:16;3923:1;:8;;;;;;;;;;;;3904:27;;3952:8;3941:1;:8;;;:19;;;;;;;;;;;;;;;;;;4006:8;3975:40;;3996:8;3975:40;;;;;;;;;;;;3837:185;;3774:248;:::o;3366:176:6:-;2316:19;:17;:19::i;:::-;3425:25:::1;3453:21;:19;:21::i;:::-;3425:49;;3496:4;3484:1;:9;;;:16;;;;;;;;;;;;;;;;;;3515:20;3522:12;:10;:12::i;:::-;3515:20;;;;;;:::i;:::-;;;;;;;;3415:127;3366:176::o:0;1192:159:0:-;1244:24;1313:22;1303:32;;1192:159;:::o;12217:100:2:-;12284:26;12294:2;12298:7;12284:26;;;;;;;;;;;;:9;:26::i;:::-;12217:100;;:::o;17232:369::-;17335:23;17361:19;:17;:19::i;:::-;17335:45;;17414:1;17394:22;;:8;:22;;;17390:91;;17461:8;17439:31;;;;;;;;;;;:::i;:::-;;;;;;;;17390:91;17530:8;17490:1;:20;;:27;17511:5;17490:27;;;;;;;;;;;;;;;:37;17518:8;17490:37;;;;;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;17575:8;17553:41;;17568:5;17553:41;;;17585:8;17553:41;;;;;;:::i;:::-;;;;;;;;17325:276;17232:369;;;:::o;18616:782::-;18749:1;18732:2;:14;;;:18;18728:664;;;18786:2;18770:36;;;18807:12;:10;:12::i;:::-;18821:4;18827:7;18836:4;18770:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;18766:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19096:1;19079:6;:13;:18;19075:293;;19150:2;19128:25;;;;;;;;;;;:::i;:::-;;;;;;;;19075:293;19320:6;19314:13;19305:6;19301:2;19297:15;19290:38;18766:616;18898:41;;;18888:51;;;:6;:51;;;;18884:130;;18992:2;18970:25;;;;;;;;;;;:::i;:::-;;;;;;;;18884:130;18842:186;18728:664;18616:782;;;;:::o;8737:170:1:-;8795:30;8870:21;8860:31;;8737:170;:::o;2233:149:2:-;6931:20:1;:18;:20::i;:::-;2336:39:2::1;2360:5;2367:7;2336:23;:39::i;:::-;2233:149:::0;;:::o;1155:103:4:-;6931:20:1;:18;:20::i;:::-;1224:27:4::1;:25;:27::i;:::-;1155:103::o:0;1847:127:0:-;6931:20:1;:18;:20::i;:::-;1929:38:0::1;1954:12;1929:24;:38::i;:::-;1847:127:::0;:::o;556:66:3:-;6931:20:1;:18;:20::i;:::-;556:66:3:o;4469:92:2:-;4520:13;4545:9;;;;;;;;;;;;;;4469:92;:::o;637:698:12:-;693:13;742:14;779:1;759:17;770:5;759:10;:17::i;:::-;:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;794:41;;849:11;975:6;971:2;967:15;959:6;955:28;948:35;;1010:282;1017:4;1010:282;;;1041:5;;;;;;;;1180:10;1175:2;1168:5;1164:14;1159:32;1154:3;1146:46;1236:2;1227:11;;;;;;:::i;:::-;;;;;1269:1;1260:5;:10;1010:282;1256:21;1010:282;1312:6;1305:13;;;;;637:698;;;:::o;7059:172:2:-;7125:7;7144:23;7170:19;:17;:19::i;:::-;7144:45;;7206:1;:9;;:18;7216:7;7206:18;;;;;;;;;;;;;;;;;;;;;7199:25;;;7059:172;;;:::o;16304:719::-;16408:23;16434:19;:17;:19::i;:::-;16408:45;;16519:9;:31;;;;16548:1;16532:18;;:4;:18;;;;16519:31;16515:460;;;16566:13;16582:22;16596:7;16582:13;:22::i;:::-;16566:38;;16748:1;16732:18;;:4;:18;;;;:35;;;;;16763:4;16754:13;;:5;:13;;;;16732:35;:69;;;;;16772:29;16789:5;16796:4;16772:16;:29::i;:::-;16771:30;16732:69;16728:142;;;16850:4;16828:27;;;;;;;;;;;:::i;:::-;;;;;;;;16728:142;16888:9;16884:81;;;16942:7;16938:2;16922:28;;16931:5;16922:28;;;;;;;;;;;;16884:81;16552:423;16515:460;17014:2;16985:1;:17;;:26;17003:7;16985:26;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;16398:625;16304:719;;;;:::o;1472:204:4:-;1611:7;2316:19:6;:17;:19::i;:::-;1637:32:4::1;1651:2;1655:7;1664:4;1637:13;:32::i;:::-;1630:39;;1472:204:::0;;;;;:::o;3105:126:6:-;3168:8;:6;:8::i;:::-;3163:62;;3199:15;;;;;;;;;;;;;;3163:62;3105:126::o;2905:128::-;2970:8;:6;:8::i;:::-;2966:61;;;3001:15;;;;;;;;;;;;;;2966:61;2905:128::o;12538:182:2:-;12632:18;12638:2;12642:7;12632:5;:18::i;:::-;12660:53;12691:1;12695:2;12699:7;12708:4;12660:22;:53::i;:::-;12538:182;;;:::o;7084:141:1:-;7151:17;:15;:17::i;:::-;7146:73;;7191:17;;;;;;;;;;;;;;7146:73;7084:141::o;2388:219:2:-;6931:20:1;:18;:20::i;:::-;2501:23:2::1;2527:19;:17;:19::i;:::-;2501:45;;2566:5;2556:1;:7;;:15;;;;;;:::i;:::-;;2593:7;2581:1;:9;;:19;;;;;;:::i;:::-;;2491:116;2388:219:::0;;:::o;1939:156:6:-;6931:20:1;:18;:20::i;:::-;2012:25:6::1;2040:21;:19;:21::i;:::-;2012:49;;2083:5;2071:1;:9;;;:17;;;;;;;;;;;;;;;;;;2002:93;1939:156::o:0;1980:235:0:-;6931:20:1;:18;:20::i;:::-;2100:1:0::1;2076:26;;:12;:26;;::::0;2072:95:::1;;2153:1;2125:31;;;;;;;;;;;:::i;:::-;;;;;;;;2072:95;2176:32;2195:12;2176:18;:32::i;:::-;1980:235:::0;:::o;12214:916:14:-;12267:7;12286:14;12303:1;12286:18;;12351:8;12342:5;:17;12338:103;;12388:8;12379:17;;;;;;:::i;:::-;;;;;12424:2;12414:12;;;;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;;;;:::i;:::-;;;;;12540:2;12530:12;;;;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;;;;:::i;:::-;;;;;12656:2;12646:12;;;;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;;;;:::i;:::-;;;;;12770:1;12760:11;;;;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;;;;:::i;:::-;;;;;12883:1;12873:11;;;;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;;;;:::i;:::-;;;;;12996:1;12986:11;;;;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;;;;13025:66;13117:6;13110:13;;;12214:916;;;:::o;10361:856:2:-;10447:7;10466:23;10492:19;:17;:19::i;:::-;10466:45;;10521:12;10536:17;10545:7;10536:8;:17::i;:::-;10521:32;;10629:1;10613:18;;:4;:18;;;10609:86;;10647:37;10664:4;10670;10676:7;10647:16;:37::i;:::-;10609:86;10755:1;10739:18;;:4;:18;;;10735:258;;10855:48;10872:1;10876:7;10893:1;10897:5;10855:8;:48::i;:::-;10967:1;10946;:11;;:17;10958:4;10946:17;;;;;;;;;;;;;;;;:22;;;;;;;;;;;10735:258;11021:1;11007:16;;:2;:16;;;11003:109;;11086:1;11067;:11;;:15;11079:2;11067:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;11003:109;11143:2;11122:1;:9;;:18;11132:7;11122:18;;;;;;;;;;;;:23;;;;;;;;;;;;;;;;;;11180:7;11176:2;11161:27;;11170:4;11161:27;;;;;;;;;;;;11206:4;11199:11;;;;10361:856;;;;;:::o;11539:327::-;11620:1;11606:16;;:2;:16;;;11602:87;;11675:1;11645:33;;;;;;;;;;;:::i;:::-;;;;;;;;11602:87;11698:21;11722:32;11730:2;11734:7;11751:1;11722:7;:32::i;:::-;11698:56;;11793:1;11768:27;;:13;:27;;;11764:96;;11846:1;11818:31;;;;;;;;;;;:::i;:::-;;;;;;;;11764:96;11592:274;11539:327;;:::o;8487:120:1:-;8537:4;8560:26;:24;:26::i;:::-;:40;;;;;;;;;;;;8553:47;;8487:120;:::o;8548:368:2:-;8660:38;8674:5;8681:7;8690;8660:13;:38::i;:::-;8655:255;;8735:1;8718:19;;:5;:19;;;8714:186;;8787:7;8764:31;;;;;;;;;;;:::i;:::-;;;;;;;;8714:186;8868:7;8877;8841:44;;;;;;;;;;;;:::i;:::-;;;;;;;;8655:255;8548:368;;;:::o;7842:272::-;7945:4;7999:1;7980:21;;:7;:21;;;;:127;;;;;8027:7;8018:16;;:5;:16;;;:52;;;;8038:32;8055:5;8062:7;8038:16;:32::i;:::-;8018:52;:88;;;;8099:7;8074:32;;:21;8087:7;8074:12;:21::i;:::-;:32;;;8018:88;7980:127;7961:146;;7842:272;;;;;:::o;7:75:17:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:329::-;5574:6;5623:2;5611:9;5602:7;5598:23;5594:32;5591:119;;;5629:79;;:::i;:::-;5591:119;5749:1;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;:::i;:::-;5764:63;;5720:117;5515:329;;;;:::o;5850:118::-;5937:24;5955:5;5937:24;:::i;:::-;5932:3;5925:37;5850:118;;:::o;5974:222::-;6067:4;6105:2;6094:9;6090:18;6082:26;;6118:71;6186:1;6175:9;6171:17;6162:6;6118:71;:::i;:::-;5974:222;;;;:::o;6202:116::-;6272:21;6287:5;6272:21;:::i;:::-;6265:5;6262:32;6252:60;;6308:1;6305;6298:12;6252:60;6202:116;:::o;6324:133::-;6367:5;6405:6;6392:20;6383:29;;6421:30;6445:5;6421:30;:::i;:::-;6324:133;;;;:::o;6463:468::-;6528:6;6536;6585:2;6573:9;6564:7;6560:23;6556:32;6553:119;;;6591:79;;:::i;:::-;6553:119;6711:1;6736:53;6781:7;6772:6;6761:9;6757:22;6736:53;:::i;:::-;6726:63;;6682:117;6838:2;6864:50;6906:7;6897:6;6886:9;6882:22;6864:50;:::i;:::-;6854:60;;6809:115;6463:468;;;;;:::o;6937:117::-;7046:1;7043;7036:12;7060:117;7169:1;7166;7159:12;7183:180;7231:77;7228:1;7221:88;7328:4;7325:1;7318:15;7352:4;7349:1;7342:15;7369:281;7452:27;7474:4;7452:27;:::i;:::-;7444:6;7440:40;7582:6;7570:10;7567:22;7546:18;7534:10;7531:34;7528:62;7525:88;;;7593:18;;:::i;:::-;7525:88;7633:10;7629:2;7622:22;7412:238;7369:281;;:::o;7656:129::-;7690:6;7717:20;;:::i;:::-;7707:30;;7746:33;7774:4;7766:6;7746:33;:::i;:::-;7656:129;;;:::o;7791:307::-;7852:4;7942:18;7934:6;7931:30;7928:56;;;7964:18;;:::i;:::-;7928:56;8002:29;8024:6;8002:29;:::i;:::-;7994:37;;8086:4;8080;8076:15;8068:23;;7791:307;;;:::o;8104:146::-;8201:6;8196:3;8191;8178:30;8242:1;8233:6;8228:3;8224:16;8217:27;8104:146;;;:::o;8256:423::-;8333:5;8358:65;8374:48;8415:6;8374:48;:::i;:::-;8358:65;:::i;:::-;8349:74;;8446:6;8439:5;8432:21;8484:4;8477:5;8473:16;8522:3;8513:6;8508:3;8504:16;8501:25;8498:112;;;8529:79;;:::i;:::-;8498:112;8619:54;8666:6;8661:3;8656;8619:54;:::i;:::-;8339:340;8256:423;;;;;:::o;8698:338::-;8753:5;8802:3;8795:4;8787:6;8783:17;8779:27;8769:122;;8810:79;;:::i;:::-;8769:122;8927:6;8914:20;8952:78;9026:3;9018:6;9011:4;9003:6;8999:17;8952:78;:::i;:::-;8943:87;;8759:277;8698:338;;;;:::o;9042:943::-;9137:6;9145;9153;9161;9210:3;9198:9;9189:7;9185:23;9181:33;9178:120;;;9217:79;;:::i;:::-;9178:120;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:53;9535:7;9526:6;9515:9;9511:22;9490:53;:::i;:::-;9480:63;;9435:118;9592:2;9618:53;9663:7;9654:6;9643:9;9639:22;9618:53;:::i;:::-;9608:63;;9563:118;9748:2;9737:9;9733:18;9720:32;9779:18;9771:6;9768:30;9765:117;;;9801:79;;:::i;:::-;9765:117;9906:62;9960:7;9951:6;9940:9;9936:22;9906:62;:::i;:::-;9896:72;;9691:287;9042:943;;;;;;;:::o;9991:474::-;10059:6;10067;10116:2;10104:9;10095:7;10091:23;10087:32;10084:119;;;10122:79;;:::i;:::-;10084:119;10242:1;10267:53;10312:7;10303:6;10292:9;10288:22;10267:53;:::i;:::-;10257:63;;10213:117;10369:2;10395:53;10440:7;10431:6;10420:9;10416:22;10395:53;:::i;:::-;10385:63;;10340:118;9991:474;;;;;:::o;10471:180::-;10519:77;10516:1;10509:88;10616:4;10613:1;10606:15;10640:4;10637:1;10630:15;10657:320;10701:6;10738:1;10732:4;10728:12;10718:22;;10785:1;10779:4;10775:12;10806:18;10796:81;;10862:4;10854:6;10850:17;10840:27;;10796:81;10924:2;10916:6;10913:14;10893:18;10890:38;10887:84;;10943:18;;:::i;:::-;10887:84;10708:269;10657:320;;;:::o;10983:442::-;11132:4;11170:2;11159:9;11155:18;11147:26;;11183:71;11251:1;11240:9;11236:17;11227:6;11183:71;:::i;:::-;11264:72;11332:2;11321:9;11317:18;11308:6;11264:72;:::i;:::-;11346;11414:2;11403:9;11399:18;11390:6;11346:72;:::i;:::-;10983:442;;;;;;:::o;11431:85::-;11476:7;11505:5;11494:16;;11431:85;;;:::o;11522:101::-;11558:7;11598:18;11591:5;11587:30;11576:41;;11522:101;;;:::o;11629:60::-;11657:3;11678:5;11671:12;;11629:60;;;:::o;11695:156::-;11752:9;11785:60;11802:42;11811:32;11837:5;11811:32;:::i;:::-;11802:42;:::i;:::-;11785:60;:::i;:::-;11772:73;;11695:156;;;:::o;11857:145::-;11951:44;11989:5;11951:44;:::i;:::-;11946:3;11939:57;11857:145;;:::o;12008:236::-;12108:4;12146:2;12135:9;12131:18;12123:26;;12159:78;12234:1;12223:9;12219:17;12210:6;12159:78;:::i;:::-;12008:236;;;;:::o;12250:148::-;12352:11;12389:3;12374:18;;12250:148;;;;:::o;12404:390::-;12510:3;12538:39;12571:5;12538:39;:::i;:::-;12593:89;12675:6;12670:3;12593:89;:::i;:::-;12586:96;;12691:65;12749:6;12744:3;12737:4;12730:5;12726:16;12691:65;:::i;:::-;12781:6;12776:3;12772:16;12765:23;;12514:280;12404:390;;;;:::o;12800:435::-;12980:3;13002:95;13093:3;13084:6;13002:95;:::i;:::-;12995:102;;13114:95;13205:3;13196:6;13114:95;:::i;:::-;13107:102;;13226:3;13219:10;;12800:435;;;;;:::o;13241:98::-;13292:6;13326:5;13320:12;13310:22;;13241:98;;;:::o;13345:168::-;13428:11;13462:6;13457:3;13450:19;13502:4;13497:3;13493:14;13478:29;;13345:168;;;;:::o;13519:373::-;13605:3;13633:38;13665:5;13633:38;:::i;:::-;13687:70;13750:6;13745:3;13687:70;:::i;:::-;13680:77;;13766:65;13824:6;13819:3;13812:4;13805:5;13801:16;13766:65;:::i;:::-;13856:29;13878:6;13856:29;:::i;:::-;13851:3;13847:39;13840:46;;13609:283;13519:373;;;;:::o;13898:640::-;14093:4;14131:3;14120:9;14116:19;14108:27;;14145:71;14213:1;14202:9;14198:17;14189:6;14145:71;:::i;:::-;14226:72;14294:2;14283:9;14279:18;14270:6;14226:72;:::i;:::-;14308;14376:2;14365:9;14361:18;14352:6;14308:72;:::i;:::-;14427:9;14421:4;14417:20;14412:2;14401:9;14397:18;14390:48;14455:76;14526:4;14517:6;14455:76;:::i;:::-;14447:84;;13898:640;;;;;;;:::o;14544:141::-;14600:5;14631:6;14625:13;14616:22;;14647:32;14673:5;14647:32;:::i;:::-;14544:141;;;;:::o;14691:349::-;14760:6;14809:2;14797:9;14788:7;14784:23;14780:32;14777:119;;;14815:79;;:::i;:::-;14777:119;14935:1;14960:63;15015:7;15006:6;14995:9;14991:22;14960:63;:::i;:::-;14950:73;;14906:127;14691:349;;;;:::o;15046:180::-;15094:77;15091:1;15084:88;15191:4;15188:1;15181:15;15215:4;15212:1;15205:15;15232:141;15281:4;15304:3;15296:11;;15327:3;15324:1;15317:14;15361:4;15358:1;15348:18;15340:26;;15232:141;;;:::o;15379:93::-;15416:6;15463:2;15458;15451:5;15447:14;15443:23;15433:33;;15379:93;;;:::o;15478:107::-;15522:8;15572:5;15566:4;15562:16;15541:37;;15478:107;;;;:::o;15591:393::-;15660:6;15710:1;15698:10;15694:18;15733:97;15763:66;15752:9;15733:97;:::i;:::-;15851:39;15881:8;15870:9;15851:39;:::i;:::-;15839:51;;15923:4;15919:9;15912:5;15908:21;15899:30;;15972:4;15962:8;15958:19;15951:5;15948:30;15938:40;;15667:317;;15591:393;;;;;:::o;15990:142::-;16040:9;16073:53;16091:34;16100:24;16118:5;16100:24;:::i;:::-;16091:34;:::i;:::-;16073:53;:::i;:::-;16060:66;;15990:142;;;:::o;16138:75::-;16181:3;16202:5;16195:12;;16138:75;;;:::o;16219:269::-;16329:39;16360:7;16329:39;:::i;:::-;16390:91;16439:41;16463:16;16439:41;:::i;:::-;16431:6;16424:4;16418:11;16390:91;:::i;:::-;16384:4;16377:105;16295:193;16219:269;;;:::o;16494:73::-;16539:3;16494:73;:::o;16573:189::-;16650:32;;:::i;:::-;16691:65;16749:6;16741;16735:4;16691:65;:::i;:::-;16626:136;16573:189;;:::o;16768:186::-;16828:120;16845:3;16838:5;16835:14;16828:120;;;16899:39;16936:1;16929:5;16899:39;:::i;:::-;16872:1;16865:5;16861:13;16852:22;;16828:120;;;16768:186;;:::o;16960:543::-;17061:2;17056:3;17053:11;17050:446;;;17095:38;17127:5;17095:38;:::i;:::-;17179:29;17197:10;17179:29;:::i;:::-;17169:8;17165:44;17362:2;17350:10;17347:18;17344:49;;;17383:8;17368:23;;17344:49;17406:80;17462:22;17480:3;17462:22;:::i;:::-;17452:8;17448:37;17435:11;17406:80;:::i;:::-;17065:431;;17050:446;16960:543;;;:::o;17509:117::-;17563:8;17613:5;17607:4;17603:16;17582:37;;17509:117;;;;:::o;17632:169::-;17676:6;17709:51;17757:1;17753:6;17745:5;17742:1;17738:13;17709:51;:::i;:::-;17705:56;17790:4;17784;17780:15;17770:25;;17683:118;17632:169;;;;:::o;17806:295::-;17882:4;18028:29;18053:3;18047:4;18028:29;:::i;:::-;18020:37;;18090:3;18087:1;18083:11;18077:4;18074:21;18066:29;;17806:295;;;;:::o;18106:1395::-;18223:37;18256:3;18223:37;:::i;:::-;18325:18;18317:6;18314:30;18311:56;;;18347:18;;:::i;:::-;18311:56;18391:38;18423:4;18417:11;18391:38;:::i;:::-;18476:67;18536:6;18528;18522:4;18476:67;:::i;:::-;18570:1;18594:4;18581:17;;18626:2;18618:6;18615:14;18643:1;18638:618;;;;19300:1;19317:6;19314:77;;;19366:9;19361:3;19357:19;19351:26;19342:35;;19314:77;19417:67;19477:6;19470:5;19417:67;:::i;:::-;19411:4;19404:81;19273:222;18608:887;;18638:618;18690:4;18686:9;18678:6;18674:22;18724:37;18756:4;18724:37;:::i;:::-;18783:1;18797:208;18811:7;18808:1;18805:14;18797:208;;;18890:9;18885:3;18881:19;18875:26;18867:6;18860:42;18941:1;18933:6;18929:14;18919:24;;18988:2;18977:9;18973:18;18960:31;;18834:4;18831:1;18827:12;18822:17;;18797:208;;;19033:6;19024:7;19021:19;19018:179;;;19091:9;19086:3;19082:19;19076:26;19134:48;19176:4;19168:6;19164:17;19153:9;19134:48;:::i;:::-;19126:6;19119:64;19041:156;19018:179;19243:1;19239;19231:6;19227:14;19223:22;19217:4;19210:36;18645:611;;;18608:887;;18198:1303;;;18106:1395;;:::o;19507:332::-;19628:4;19666:2;19655:9;19651:18;19643:26;;19679:71;19747:1;19736:9;19732:17;19723:6;19679:71;:::i;:::-;19760:72;19828:2;19817:9;19813:18;19804:6;19760:72;:::i;:::-;19507:332;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "2147800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "infinite",
								"burn(uint256)": "infinite",
								"getApproved(uint256)": "infinite",
								"initialize(address)": "infinite",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"owner()": "2634",
								"ownerOf(uint256)": "infinite",
								"pause()": "infinite",
								"paused()": "2614",
								"renounceOwnership()": "infinite",
								"safeMint(address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "infinite",
								"supportsInterface(bytes4)": "787",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"unpause()": "infinite"
							},
							"internal": {
								"_update(address,uint256,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 492,
									"end": 1495,
									"name": "PUSH",
									"source": 16,
									"value": "80"
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 678,
									"end": 731,
									"name": "CALLVALUE",
									"source": 16
								},
								{
									"begin": 678,
									"end": 731,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 678,
									"end": 731,
									"name": "ISZERO",
									"source": 16
								},
								{
									"begin": 678,
									"end": 731,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 678,
									"end": 731,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 678,
									"end": 731,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 678,
									"end": 731,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 678,
									"end": 731,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 678,
									"end": 731,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 678,
									"end": 731,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 678,
									"end": 731,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 702,
									"end": 724,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 702,
									"end": 722,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "5"
								},
								{
									"begin": 702,
									"end": 722,
									"name": "PUSH",
									"source": 16,
									"value": "20"
								},
								{
									"begin": 702,
									"end": 722,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 702,
									"end": 724,
									"name": "PUSH",
									"source": 16,
									"value": "20"
								},
								{
									"begin": 702,
									"end": 724,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 702,
									"end": 724,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 702,
									"end": 724,
									"name": "tag",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 702,
									"end": 724,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 7711,
									"end": 8133,
									"name": "tag",
									"source": 1,
									"value": "5"
								},
								{
									"begin": 7711,
									"end": 8133,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7826,
									"end": 7856,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7859,
									"end": 7883,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 7859,
									"end": 7883,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7859,
									"end": 7883,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 7859,
									"end": 7885,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7859,
									"end": 7885,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7826,
									"end": 7885,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7826,
									"end": 7885,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7901,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "PUSH",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 7900,
									"end": 7915,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "PUSH",
									"source": 1,
									"value": "F92EE8A900000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7938,
									"end": 7961,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "tag",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 7896,
									"end": 7972,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8003,
									"end": 8019,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7986,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7985,
									"end": 7999,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7985,
									"end": 8019,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 7981,
									"end": 8127,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 7981,
									"end": 8127,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8052,
									"end": 8068,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 8035,
									"end": 8036,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8049,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8035,
									"end": 8049,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8049,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 8035,
									"end": 8068,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH",
									"source": 1,
									"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
								},
								{
									"begin": 8099,
									"end": 8115,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 8087,
									"end": 8116,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "tag",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8087,
									"end": 8116,
									"name": "LOG1",
									"source": 1
								},
								{
									"begin": 7981,
									"end": 8127,
									"name": "tag",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 7981,
									"end": 8127,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7760,
									"end": 8133,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7711,
									"end": 8133,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8737,
									"end": 8907,
									"name": "tag",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 8737,
									"end": 8907,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8795,
									"end": 8825,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8870,
									"end": 8891,
									"name": "PUSH",
									"source": 1,
									"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
								},
								{
									"begin": 8860,
									"end": 8891,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8860,
									"end": 8891,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8737,
									"end": 8907,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8737,
									"end": 8907,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7,
									"end": 108,
									"name": "tag",
									"source": 17,
									"value": "15"
								},
								{
									"begin": 7,
									"end": 108,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 43,
									"end": 50,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 83,
									"end": 101,
									"name": "PUSH",
									"source": 17,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 76,
									"end": 81,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 72,
									"end": 102,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 61,
									"end": 102,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 61,
									"end": 102,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 7,
									"end": 108,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 7,
									"end": 108,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 7,
									"end": 108,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 7,
									"end": 108,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 114,
									"end": 229,
									"name": "tag",
									"source": 17,
									"value": "16"
								},
								{
									"begin": 114,
									"end": 229,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 199,
									"end": 222,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 216,
									"end": 221,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 199,
									"end": 222,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "15"
								},
								{
									"begin": 199,
									"end": 222,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 199,
									"end": 222,
									"name": "tag",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 199,
									"end": 222,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 194,
									"end": 197,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 187,
									"end": 223,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 114,
									"end": 229,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 114,
									"end": 229,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 114,
									"end": 229,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 235,
									"end": 453,
									"name": "tag",
									"source": 17,
									"value": "13"
								},
								{
									"begin": 235,
									"end": 453,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 326,
									"end": 330,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 364,
									"end": 366,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 353,
									"end": 362,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 349,
									"end": 367,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 341,
									"end": 367,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 341,
									"end": 367,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 377,
									"end": 446,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 443,
									"end": 444,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 432,
									"end": 441,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 428,
									"end": 445,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 419,
									"end": 425,
									"name": "DUP5",
									"source": 17
								},
								{
									"begin": 377,
									"end": 446,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "16"
								},
								{
									"begin": 377,
									"end": 446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 377,
									"end": 446,
									"name": "tag",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 377,
									"end": 446,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 235,
									"end": 453,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 235,
									"end": 453,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 235,
									"end": 453,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 235,
									"end": 453,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 235,
									"end": 453,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "tag",
									"source": 16,
									"value": "6"
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 492,
									"end": 1495,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122028237963563a8506ce114772263af5debfcd548065c726dabbdea1e859044d5f64736f6c63430008140033",
									".code": [
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "tag",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "715018A6"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "A22CB465"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "A22CB465"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "19"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "B88D4FDE"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "C4D66DE8"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "C87B56DD"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "E985E9C5"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "23"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "F2FDE38B"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "tag",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "715018A6"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "14"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "8456CB59"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "15"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "8DA5CB5B"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "16"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "95D89B41"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "A1448194"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "tag",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "3F4BA83A"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "27"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "3F4BA83A"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "42842E0E"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "42966C68"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "10"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "5C975ABB"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "6352211E"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "70A08231"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "tag",
											"source": 16,
											"value": "27"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "1FFC9A7"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "6FDDE03"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "81812FC"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "95EA7B3"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "23B872DD"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "tag",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 492,
											"end": 1495,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 2674,
											"end": 2985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 2674,
											"end": 2985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 2674,
											"end": 2985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3546,
											"end": 3692,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 3546,
											"end": 3692,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4792,
											"end": 4946,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 4792,
											"end": 4946,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 4792,
											"end": 4946,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 4618,
											"end": 4731,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 4618,
											"end": 4731,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 5495,
											"end": 6073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 5495,
											"end": 6073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "tag",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "52"
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "53"
										},
										{
											"begin": 1021,
											"end": 1084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "tag",
											"source": 16,
											"value": "52"
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "STOP",
											"source": 16
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 6139,
											"end": 6271,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 6139,
											"end": 6271,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 876,
											"end": 1190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 876,
											"end": 1190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "tag",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 2692,
											"end": 2837,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 2692,
											"end": 2837,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "tag",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3366,
											"end": 3484,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 3366,
											"end": 3484,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3366,
											"end": 3484,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 3044,
											"end": 3309,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 3044,
											"end": 3309,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 3044,
											"end": 3309,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 3155,
											"end": 3256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "tag",
											"source": 16,
											"value": "15"
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "75"
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 956,
											"end": 1015,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "tag",
											"source": 16,
											"value": "75"
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "STOP",
											"source": 16
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 2441,
											"end": 2585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 2441,
											"end": 2585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 3756,
											"end": 3906,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 3756,
											"end": 3906,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "tag",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "83"
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "46"
										},
										{
											"begin": 1090,
											"end": 1193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "tag",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "85"
										},
										{
											"begin": 1090,
											"end": 1193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "tag",
											"source": 16,
											"value": "83"
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "STOP",
											"source": 16
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 5013,
											"end": 5157,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 5013,
											"end": 5157,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 6337,
											"end": 6545,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6337,
											"end": 6545,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 737,
											"end": 950,
											"name": "tag",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 737,
											"end": 950,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "94"
										},
										{
											"begin": 737,
											"end": 950,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 737,
											"end": 950,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "95"
										},
										{
											"begin": 737,
											"end": 950,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "69"
										},
										{
											"begin": 737,
											"end": 950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "tag",
											"source": 16,
											"value": "95"
										},
										{
											"begin": 737,
											"end": 950,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 737,
											"end": 950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "tag",
											"source": 16,
											"value": "94"
										},
										{
											"begin": 737,
											"end": 950,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"name": "STOP",
											"source": 16
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3972,
											"end": 4227,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 3972,
											"end": 4227,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 3972,
											"end": 4227,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 5223,
											"end": 5433,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 5223,
											"end": 5433,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5223,
											"end": 5433,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2787,
											"end": 2791,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2837,
											"end": 2862,
											"name": "PUSH",
											"source": 2,
											"value": "80AC58CD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2822,
											"end": 2862,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2822,
											"end": 2862,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2862,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2833,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2862,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2822,
											"end": 2862,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2862,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2862,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2926,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2926,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2822,
											"end": 2926,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2926,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2893,
											"end": 2926,
											"name": "PUSH",
											"source": 2,
											"value": "5B5E139F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2878,
											"end": 2926,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2878,
											"end": 2926,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2878,
											"end": 2926,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2878,
											"end": 2889,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2878,
											"end": 2926,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2878,
											"end": 2926,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2878,
											"end": 2926,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2878,
											"end": 2926,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2926,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2822,
											"end": 2926,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2978,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2822,
											"end": 2978,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2978,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2942,
											"end": 2978,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2966,
											"end": 2977,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2942,
											"end": 2965,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 2942,
											"end": 2978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2942,
											"end": 2978,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2942,
											"end": 2978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2822,
											"end": 2978,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2822,
											"end": 2978,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2803,
											"end": 2978,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2803,
											"end": 2978,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2985,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3591,
											"end": 3604,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3616,
											"end": 3639,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3642,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 3642,
											"end": 3659,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 3642,
											"end": 3661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3642,
											"end": 3661,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 3642,
											"end": 3661,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3616,
											"end": 3661,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3616,
											"end": 3661,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3678,
											"end": 3679,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3678,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3678,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3671,
											"end": 3685,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3671,
											"end": 3685,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3671,
											"end": 3685,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3546,
											"end": 3692,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4859,
											"end": 4866,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4878,
											"end": 4900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 4892,
											"end": 4899,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4878,
											"end": 4891,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 4878,
											"end": 4900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4878,
											"end": 4900,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 4878,
											"end": 4900,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4878,
											"end": 4900,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4918,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 4931,
											"end": 4938,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4918,
											"end": 4930,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 4918,
											"end": 4939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4918,
											"end": 4939,
											"name": "tag",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 4918,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4911,
											"end": 4939,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4911,
											"end": 4939,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4792,
											"end": 4946,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4724,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 4698,
											"end": 4700,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4702,
											"end": 4709,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4711,
											"end": 4723,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 4711,
											"end": 4721,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 4711,
											"end": 4723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4711,
											"end": 4723,
											"name": "tag",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 4711,
											"end": 4723,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4697,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 4689,
											"end": 4724,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4724,
											"name": "tag",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 4689,
											"end": 4724,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4618,
											"end": 4731,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5603,
											"end": 5604,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5589,
											"end": 5605,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5589,
											"end": 5605,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5591,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5605,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5589,
											"end": 5605,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5589,
											"end": 5605,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5585,
											"end": 5672,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 5585,
											"end": 5672,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5658,
											"end": 5659,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "PUSH",
											"source": 2,
											"value": "64A0AE9200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 5628,
											"end": 5661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5628,
											"end": 5661,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5585,
											"end": 5672,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 5585,
											"end": 5672,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5890,
											"end": 5911,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5914,
											"end": 5948,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 5922,
											"end": 5924,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5926,
											"end": 5933,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5935,
											"end": 5947,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 5935,
											"end": 5945,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 5935,
											"end": 5947,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5935,
											"end": 5947,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 5935,
											"end": 5947,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5914,
											"end": 5921,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 5914,
											"end": 5948,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5914,
											"end": 5948,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 5914,
											"end": 5948,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5890,
											"end": 5948,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5890,
											"end": 5948,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5979,
											"end": 5983,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5962,
											"end": 5983,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5962,
											"end": 5983,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5962,
											"end": 5975,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5962,
											"end": 5983,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5962,
											"end": 5983,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5962,
											"end": 5983,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 5958,
											"end": 6067,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 5958,
											"end": 6067,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6027,
											"end": 6031,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6033,
											"end": 6040,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6042,
											"end": 6055,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "PUSH",
											"source": 2,
											"value": "64283D7B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 6006,
											"end": 6056,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6006,
											"end": 6056,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5958,
											"end": 6067,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 5958,
											"end": 6067,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5575,
											"end": 6073,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5495,
											"end": 6073,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "tag",
											"source": 16,
											"value": "53"
										},
										{
											"begin": 1021,
											"end": 1084,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1067,
											"end": 1077,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "146"
										},
										{
											"begin": 1067,
											"end": 1075,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "147"
										},
										{
											"begin": 1067,
											"end": 1077,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1067,
											"end": 1077,
											"modifierDepth": 1,
											"name": "tag",
											"source": 16,
											"value": "146"
										},
										{
											"begin": 1067,
											"end": 1077,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1021,
											"end": 1084,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 6242,
											"end": 6246,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6248,
											"end": 6250,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6252,
											"end": 6259,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6225,
											"end": 6264,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 6225,
											"end": 6264,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6139,
											"end": 6271,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1141,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 1157,
											"end": 1158,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1161,
											"end": 1168,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1170,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 1170,
											"end": 1180,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "131"
										},
										{
											"begin": 1170,
											"end": 1182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1170,
											"end": 1182,
											"name": "tag",
											"source": 3,
											"value": "152"
										},
										{
											"begin": 1170,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1141,
											"end": 1148,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 1141,
											"end": 1183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1141,
											"end": 1183,
											"name": "tag",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 1141,
											"end": 1183,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1141,
											"end": 1183,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 876,
											"end": 1190,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2739,
											"end": 2743,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2755,
											"end": 2780,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2783,
											"end": 2804,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 2783,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 2783,
											"end": 2804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2783,
											"end": 2804,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 2783,
											"end": 2804,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2755,
											"end": 2804,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2755,
											"end": 2804,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2822,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2821,
											"end": 2830,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2814,
											"end": 2830,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2814,
											"end": 2830,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2814,
											"end": 2830,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2837,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3429,
											"end": 3436,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3455,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 3469,
											"end": 3476,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3455,
											"end": 3468,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 3455,
											"end": 3477,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3455,
											"end": 3477,
											"name": "tag",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 3455,
											"end": 3477,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3448,
											"end": 3477,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3448,
											"end": 3477,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3366,
											"end": 3484,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3107,
											"end": 3114,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3152,
											"end": 3171,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3152,
											"end": 3169,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 3152,
											"end": 3171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3152,
											"end": 3171,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 3152,
											"end": 3171,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3171,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3126,
											"end": 3171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3202,
											"end": 3203,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3185,
											"end": 3204,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3185,
											"end": 3204,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3190,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3204,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3185,
											"end": 3204,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3204,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3181,
											"end": 3268,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 3181,
											"end": 3268,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3254,
											"end": 3255,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "PUSH",
											"source": 2,
											"value": "89C62B6400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3227,
											"end": 3257,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "tag",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3227,
											"end": 3257,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3181,
											"end": 3268,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 3181,
											"end": 3268,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3285,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3295,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 3284,
											"end": 3295,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3296,
											"end": 3301,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3284,
											"end": 3302,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3277,
											"end": 3302,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3277,
											"end": 3302,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3277,
											"end": 3302,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3044,
											"end": 3309,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 3246,
											"end": 3247,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3237,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 3219,
											"end": 3249,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "tag",
											"source": 16,
											"value": "76"
										},
										{
											"begin": 956,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1000,
											"end": 1008,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "170"
										},
										{
											"begin": 1000,
											"end": 1006,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "171"
										},
										{
											"begin": 1000,
											"end": 1008,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1000,
											"end": 1008,
											"modifierDepth": 1,
											"name": "tag",
											"source": 16,
											"value": "170"
										},
										{
											"begin": 1000,
											"end": 1008,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 956,
											"end": 1015,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2487,
											"end": 2494,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2506,
											"end": 2530,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2533,
											"end": 2553,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 2533,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 2533,
											"end": 2553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2533,
											"end": 2553,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 2533,
											"end": 2553,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2553,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2553,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2571,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3803,
											"end": 3816,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3828,
											"end": 3851,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3854,
											"end": 3873,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 3854,
											"end": 3871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 3854,
											"end": 3873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3854,
											"end": 3873,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 3854,
											"end": 3873,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3828,
											"end": 3873,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3828,
											"end": 3873,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3890,
											"end": 3891,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3890,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3890,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3883,
											"end": 3899,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 3883,
											"end": 3899,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "tag",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "tag",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3899,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3756,
											"end": 3906,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "tag",
											"source": 16,
											"value": "85"
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1164,
											"end": 1186,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 1174,
											"end": 1176,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1178,
											"end": 1185,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1164,
											"end": 1173,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "186"
										},
										{
											"begin": 1164,
											"end": 1186,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1164,
											"end": 1186,
											"modifierDepth": 1,
											"name": "tag",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 1164,
											"end": 1186,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1090,
											"end": 1193,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5150,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 5117,
											"end": 5129,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 5117,
											"end": 5127,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 5117,
											"end": 5129,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5117,
											"end": 5129,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 5117,
											"end": 5129,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5131,
											"end": 5139,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5141,
											"end": 5149,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5116,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 5098,
											"end": 5150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5150,
											"name": "tag",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 5098,
											"end": 5150,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5157,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6450,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 6463,
											"end": 6467,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6469,
											"end": 6471,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6473,
											"end": 6480,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6450,
											"end": 6462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6450,
											"end": 6481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6450,
											"end": 6481,
											"name": "tag",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 6450,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6491,
											"end": 6538,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 6514,
											"end": 6518,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6520,
											"end": 6522,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6524,
											"end": 6531,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6533,
											"end": 6537,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6491,
											"end": 6513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 6491,
											"end": 6538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6491,
											"end": 6538,
											"name": "tag",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 6491,
											"end": 6538,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6337,
											"end": 6545,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 737,
											"end": 950,
											"name": "tag",
											"source": 16,
											"value": "96"
										},
										{
											"begin": 737,
											"end": 950,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4158,
											"end": 4188,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "196"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "197"
										},
										{
											"begin": 4191,
											"end": 4217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "tag",
											"source": 1,
											"value": "196"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4279,
											"end": 4298,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4302,
											"end": 4303,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4279,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4279,
											"end": 4317,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4327,
											"end": 4345,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4349,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4327,
											"end": 4362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4327,
											"end": 4362,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4706,
											"end": 4723,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4741,
											"end": 4742,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4737,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4746,
											"end": 4760,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "tag",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4787,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4805,
											"end": 4806,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4790,
											"end": 4801,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "199"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4839,
											"end": 4840,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4818,
											"end": 4822,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4840,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "tag",
											"source": 1,
											"value": "199"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4856,
											"end": 4868,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "200"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4873,
											"end": 4885,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "tag",
											"source": 1,
											"value": "200"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "201"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "F92EE8A900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "tag",
											"source": 1,
											"value": "201"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4968,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4951,
											"end": 4952,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4983,
											"end": 4997,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "202"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5031,
											"end": 5035,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5013,
											"end": 5014,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "tag",
											"source": 1,
											"value": "202"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "204"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "4D79546F6B656E00000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 16,
											"value": "4D544B0000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 808,
											"end": 821,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "205"
										},
										{
											"begin": 808,
											"end": 839,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "tag",
											"source": 16,
											"value": "204"
										},
										{
											"begin": 808,
											"end": 839,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 849,
											"end": 872,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "206"
										},
										{
											"begin": 849,
											"end": 870,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "207"
										},
										{
											"begin": 849,
											"end": 872,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 849,
											"end": 872,
											"modifierDepth": 1,
											"name": "tag",
											"source": 16,
											"value": "206"
										},
										{
											"begin": 849,
											"end": 872,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 882,
											"end": 910,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "208"
										},
										{
											"begin": 897,
											"end": 909,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 882,
											"end": 896,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "209"
										},
										{
											"begin": 882,
											"end": 910,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 882,
											"end": 910,
											"modifierDepth": 1,
											"name": "tag",
											"source": 16,
											"value": "208"
										},
										{
											"begin": 882,
											"end": 910,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 920,
											"end": 943,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "210"
										},
										{
											"begin": 920,
											"end": 941,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "211"
										},
										{
											"begin": 920,
											"end": 943,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 920,
											"end": 943,
											"modifierDepth": 1,
											"name": "tag",
											"source": 16,
											"value": "210"
										},
										{
											"begin": 920,
											"end": 943,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5070,
											"end": 5084,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "212"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5118,
											"end": 5123,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5100,
											"end": 5101,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 5154,
											"end": 5155,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "213"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "214"
										},
										{
											"begin": 5142,
											"end": 5156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "tag",
											"source": 1,
											"value": "213"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "tag",
											"source": 1,
											"value": "212"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 737,
											"end": 950,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 737,
											"end": 950,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4036,
											"end": 4049,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4061,
											"end": 4083,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 4075,
											"end": 4082,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4061,
											"end": 4074,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 4061,
											"end": 4083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4061,
											"end": 4083,
											"name": "tag",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 4061,
											"end": 4083,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4061,
											"end": 4083,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4094,
											"end": 4115,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4118,
											"end": 4128,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 4118,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 4118,
											"end": 4128,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4118,
											"end": 4128,
											"name": "tag",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 4118,
											"end": 4128,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4094,
											"end": 4128,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4094,
											"end": 4128,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4169,
											"end": 4170,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4151,
											"end": 4158,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4166,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4170,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "tag",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4187,
											"end": 4194,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4196,
											"end": 4214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 4196,
											"end": 4203,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4196,
											"end": 4212,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 4196,
											"end": 4214,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4196,
											"end": 4214,
											"name": "tag",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 4196,
											"end": 4214,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 4173,
											"end": 4215,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "tag",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4173,
											"end": 4215,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "tag",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 4145,
											"end": 4220,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4138,
											"end": 4220,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4138,
											"end": 4220,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4138,
											"end": 4220,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3972,
											"end": 4227,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5311,
											"end": 5315,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5327,
											"end": 5350,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5353,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 5353,
											"end": 5370,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 5353,
											"end": 5372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5353,
											"end": 5372,
											"name": "tag",
											"source": 2,
											"value": "226"
										},
										{
											"begin": 5353,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5327,
											"end": 5372,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5327,
											"end": 5372,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5390,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5409,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 5389,
											"end": 5409,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5410,
											"end": 5415,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5389,
											"end": 5416,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5417,
											"end": 5425,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 5389,
											"end": 5426,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5382,
											"end": 5426,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5382,
											"end": 5426,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5382,
											"end": 5426,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5223,
											"end": 5433,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3509,
											"end": 3510,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3489,
											"end": 3497,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3489,
											"end": 3511,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3562,
											"end": 3563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 3534,
											"end": 3565,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 3604,
											"end": 3612,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3603,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 3585,
											"end": 3613,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1034,
											"end": 1180,
											"name": "tag",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 1034,
											"end": 1180,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1110,
											"end": 1114,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1148,
											"end": 1173,
											"name": "PUSH",
											"source": 7,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1133,
											"end": 1173,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1133,
											"end": 1173,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1173,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1144,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1173,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1133,
											"end": 1173,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1173,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1173,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1126,
											"end": 1173,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1126,
											"end": 1173,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1034,
											"end": 1180,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1034,
											"end": 1180,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1034,
											"end": 1180,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1034,
											"end": 1180,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1958,
											"end": 2114,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 1958,
											"end": 2114,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2009,
											"end": 2032,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2077,
											"end": 2098,
											"name": "PUSH",
											"source": 2,
											"value": "80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079300"
										},
										{
											"begin": 2067,
											"end": 2098,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2067,
											"end": 2098,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1958,
											"end": 2114,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1958,
											"end": 2114,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 17836,
											"end": 18077,
											"name": "tag",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 17836,
											"end": 18077,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17899,
											"end": 17906,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17918,
											"end": 17931,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17934,
											"end": 17951,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 17943,
											"end": 17950,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17934,
											"end": 17942,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 17934,
											"end": 17951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 17934,
											"end": 17951,
											"name": "tag",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 17934,
											"end": 17951,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17918,
											"end": 17951,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17918,
											"end": 17951,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17982,
											"end": 17983,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17965,
											"end": 17984,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17965,
											"end": 17984,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17965,
											"end": 17970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17965,
											"end": 17984,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17965,
											"end": 17984,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17965,
											"end": 17984,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17961,
											"end": 18049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 17961,
											"end": 18049,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 18030,
											"end": 18037,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "PUSH",
											"source": 2,
											"value": "7E27328900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 18007,
											"end": 18038,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "tag",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18007,
											"end": 18038,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 17961,
											"end": 18049,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 17961,
											"end": 18049,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18065,
											"end": 18070,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18058,
											"end": 18070,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18058,
											"end": 18070,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18058,
											"end": 18070,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17836,
											"end": 18077,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17836,
											"end": 18077,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17836,
											"end": 18077,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17836,
											"end": 18077,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7347,
											"end": 7531,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 7347,
											"end": 7531,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7417,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7436,
											"end": 7459,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7462,
											"end": 7481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 7462,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 7462,
											"end": 7481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7462,
											"end": 7481,
											"name": "tag",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 7462,
											"end": 7481,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7436,
											"end": 7481,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7436,
											"end": 7481,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7499,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7515,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7498,
											"end": 7515,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7516,
											"end": 7523,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7498,
											"end": 7524,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7491,
											"end": 7524,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7491,
											"end": 7524,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7491,
											"end": 7524,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7347,
											"end": 7531,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7347,
											"end": 7531,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7347,
											"end": 7531,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7347,
											"end": 7531,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 887,
											"end": 983,
											"name": "tag",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 887,
											"end": 983,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 940,
											"end": 947,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 959,
											"end": 976,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 959,
											"end": 976,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 887,
											"end": 983,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 887,
											"end": 983,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 16002,
											"end": 16122,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 16002,
											"end": 16122,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16082,
											"end": 16115,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 16091,
											"end": 16093,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16095,
											"end": 16102,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16104,
											"end": 16108,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16110,
											"end": 16114,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 16082,
											"end": 16090,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 16082,
											"end": 16115,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 16082,
											"end": 16115,
											"name": "tag",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 16082,
											"end": 16115,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16002,
											"end": 16122,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16002,
											"end": 16122,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16002,
											"end": 16122,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16002,
											"end": 16122,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1267,
											"end": 1493,
											"name": "tag",
											"source": 16,
											"value": "138"
										},
										{
											"begin": 1267,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1424,
											"end": 1431,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1454,
											"end": 1486,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "247"
										},
										{
											"begin": 1468,
											"end": 1470,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1472,
											"end": 1479,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1481,
											"end": 1485,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1454,
											"end": 1467,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "248"
										},
										{
											"begin": 1454,
											"end": 1486,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1454,
											"end": 1486,
											"name": "tag",
											"source": 16,
											"value": "247"
										},
										{
											"begin": 1454,
											"end": 1486,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1447,
											"end": 1486,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1447,
											"end": 1486,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1267,
											"end": 1493,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1267,
											"end": 1493,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1267,
											"end": 1493,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1267,
											"end": 1493,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1267,
											"end": 1493,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1267,
											"end": 1493,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2728,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 2728,
											"end": 2738,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2728,
											"end": 2740,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2728,
											"end": 2740,
											"name": "tag",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 2728,
											"end": 2740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 2717,
											"end": 2722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 2717,
											"end": 2724,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "tag",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "252"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2790,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "253"
										},
										{
											"begin": 2790,
											"end": 2800,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2790,
											"end": 2802,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2790,
											"end": 2802,
											"name": "tag",
											"source": 0,
											"value": "253"
										},
										{
											"begin": 2790,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "254"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 2763,
											"end": 2803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "tag",
											"source": 0,
											"value": "254"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "tag",
											"source": 0,
											"value": "252"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2658,
											"end": 2820,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3674,
											"end": 3852,
											"name": "tag",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 3674,
											"end": 3852,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2563,
											"end": 2579,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 2563,
											"end": 2577,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "257"
										},
										{
											"begin": 2563,
											"end": 2579,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2563,
											"end": 2579,
											"name": "tag",
											"source": 6,
											"value": "256"
										},
										{
											"begin": 2563,
											"end": 2579,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3732,
											"end": 3757,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3760,
											"end": 3781,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "259"
										},
										{
											"begin": 3760,
											"end": 3779,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 3760,
											"end": 3781,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3760,
											"end": 3781,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "259"
										},
										{
											"begin": 3760,
											"end": 3781,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3732,
											"end": 3781,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3732,
											"end": 3781,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3803,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3791,
											"end": 3792,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3800,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3791,
											"end": 3800,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3800,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3791,
											"end": 3808,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 3832,
											"end": 3844,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "260"
										},
										{
											"begin": 3832,
											"end": 3842,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 3832,
											"end": 3844,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3832,
											"end": 3844,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "260"
										},
										{
											"begin": 3832,
											"end": 3844,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "261"
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 3823,
											"end": 3845,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "261"
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3845,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 3722,
											"end": 3852,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3674,
											"end": 3852,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1147,
											"end": 1309,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 1147,
											"end": 1309,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1200,
											"end": 1225,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1270,
											"end": 1293,
											"name": "PUSH",
											"source": 6,
											"value": "CD5ED15C6E187E77E9AEE88184C21F4F2182AB5827CB3B7E07FBEDCD63F03300"
										},
										{
											"begin": 1260,
											"end": 1293,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1260,
											"end": 1293,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1147,
											"end": 1309,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1147,
											"end": 1309,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 3871,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3874,
											"end": 3894,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 3874,
											"end": 3892,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 3874,
											"end": 3894,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3874,
											"end": 3894,
											"name": "tag",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 3874,
											"end": 3894,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 3894,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 3894,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3904,
											"end": 3920,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3923,
											"end": 3924,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3904,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3904,
											"end": 3931,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3952,
											"end": 3960,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3942,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4006,
											"end": 4014,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3996,
											"end": 4004,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3774,
											"end": 4022,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3366,
											"end": 3542,
											"name": "tag",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 3366,
											"end": 3542,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "266"
										},
										{
											"begin": 2316,
											"end": 2333,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "267"
										},
										{
											"begin": 2316,
											"end": 2335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "tag",
											"source": 6,
											"value": "266"
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3425,
											"end": 3450,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3453,
											"end": 3474,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "269"
										},
										{
											"begin": 3453,
											"end": 3472,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 3453,
											"end": 3474,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3453,
											"end": 3474,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "269"
										},
										{
											"begin": 3453,
											"end": 3474,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3425,
											"end": 3474,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3425,
											"end": 3474,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3496,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3484,
											"end": 3485,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3493,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3493,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3493,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3484,
											"end": 3500,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 3522,
											"end": 3534,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "270"
										},
										{
											"begin": 3522,
											"end": 3532,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 3522,
											"end": 3534,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3522,
											"end": 3534,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "270"
										},
										{
											"begin": 3522,
											"end": 3534,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 3515,
											"end": 3535,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3515,
											"end": 3535,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 3415,
											"end": 3542,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3366,
											"end": 3542,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1192,
											"end": 1351,
											"name": "tag",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1192,
											"end": 1351,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1244,
											"end": 1268,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 0,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 1303,
											"end": 1335,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1303,
											"end": 1335,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1192,
											"end": 1351,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1192,
											"end": 1351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12217,
											"end": 12317,
											"name": "tag",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 12217,
											"end": 12317,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "274"
										},
										{
											"begin": 12294,
											"end": 12296,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12298,
											"end": 12305,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "275"
										},
										{
											"begin": 12284,
											"end": 12310,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "tag",
											"source": 2,
											"value": "274"
										},
										{
											"begin": 12284,
											"end": 12310,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12217,
											"end": 12317,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12217,
											"end": 12317,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12217,
											"end": 12317,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 17232,
											"end": 17601,
											"name": "tag",
											"source": 2,
											"value": "190"
										},
										{
											"begin": 17232,
											"end": 17601,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17335,
											"end": 17358,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17361,
											"end": 17380,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "277"
										},
										{
											"begin": 17361,
											"end": 17378,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 17361,
											"end": 17380,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 17361,
											"end": 17380,
											"name": "tag",
											"source": 2,
											"value": "277"
										},
										{
											"begin": 17361,
											"end": 17380,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17335,
											"end": 17380,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17335,
											"end": 17380,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17414,
											"end": 17415,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17394,
											"end": 17416,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17394,
											"end": 17416,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17394,
											"end": 17402,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17394,
											"end": 17416,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17394,
											"end": 17416,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17394,
											"end": 17416,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17390,
											"end": 17481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "278"
										},
										{
											"begin": 17390,
											"end": 17481,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 17461,
											"end": 17469,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "PUSH",
											"source": 2,
											"value": "5B08BA1800000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "279"
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 17439,
											"end": 17470,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "tag",
											"source": 2,
											"value": "279"
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17439,
											"end": 17470,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 17390,
											"end": 17481,
											"name": "tag",
											"source": 2,
											"value": "278"
										},
										{
											"begin": 17390,
											"end": 17481,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17530,
											"end": 17538,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17491,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17510,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 17490,
											"end": 17510,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17511,
											"end": 17516,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17490,
											"end": 17517,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17518,
											"end": 17526,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17527,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 17490,
											"end": 17538,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17575,
											"end": 17583,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17568,
											"end": 17573,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "PUSH",
											"source": 2,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 17585,
											"end": 17593,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "280"
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 17553,
											"end": 17594,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "tag",
											"source": 2,
											"value": "280"
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 17553,
											"end": 17594,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 17325,
											"end": 17601,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17232,
											"end": 17601,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17232,
											"end": 17601,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17232,
											"end": 17601,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 17232,
											"end": 17601,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 18616,
											"end": 19398,
											"name": "tag",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 18616,
											"end": 19398,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18749,
											"end": 18750,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18732,
											"end": 18734,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18732,
											"end": 18746,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18732,
											"end": 18746,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18732,
											"end": 18746,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 18732,
											"end": 18750,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 18728,
											"end": 19392,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 18728,
											"end": 19392,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "282"
										},
										{
											"begin": 18728,
											"end": 19392,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 18786,
											"end": 18788,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18806,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18770,
											"end": 18806,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18806,
											"name": "PUSH",
											"source": 2,
											"value": "150B7A02"
										},
										{
											"begin": 18807,
											"end": 18819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "283"
										},
										{
											"begin": 18807,
											"end": 18817,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 18807,
											"end": 18819,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 18807,
											"end": 18819,
											"name": "tag",
											"source": 2,
											"value": "283"
										},
										{
											"begin": 18807,
											"end": 18819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18821,
											"end": 18825,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 18827,
											"end": 18834,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 18836,
											"end": 18840,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "284"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "285"
										},
										{
											"begin": 18770,
											"end": 18841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "tag",
											"source": 2,
											"value": "284"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "286"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "288"
										},
										{
											"begin": 18770,
											"end": 18841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "tag",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "tag",
											"source": 2,
											"value": "286"
										},
										{
											"begin": 18770,
											"end": 18841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "289"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "294"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH",
											"source": 2,
											"value": "3F"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "293"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "tag",
											"source": 2,
											"value": "294"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "tag",
											"source": 2,
											"value": "293"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 19096,
											"end": 19097,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 19079,
											"end": 19085,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19079,
											"end": 19092,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 19079,
											"end": 19097,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 19075,
											"end": 19368,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "295"
										},
										{
											"begin": 19075,
											"end": 19368,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 19150,
											"end": 19152,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "PUSH",
											"source": 2,
											"value": "64A0AE9200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "296"
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 19128,
											"end": 19153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "tag",
											"source": 2,
											"value": "296"
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 19128,
											"end": 19153,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 19075,
											"end": 19368,
											"name": "tag",
											"source": 2,
											"value": "295"
										},
										{
											"begin": 19075,
											"end": 19368,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 19320,
											"end": 19326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 19314,
											"end": 19327,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 19305,
											"end": 19311,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 19301,
											"end": 19303,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 19297,
											"end": 19312,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 19290,
											"end": 19328,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "tag",
											"source": 2,
											"value": "289"
										},
										{
											"begin": 18766,
											"end": 19382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18898,
											"end": 18939,
											"name": "PUSH",
											"source": 2,
											"value": "150B7A02"
										},
										{
											"begin": 18898,
											"end": 18939,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 18898,
											"end": 18939,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 18888,
											"end": 18939,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18888,
											"end": 18939,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 18888,
											"end": 18939,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18888,
											"end": 18894,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18888,
											"end": 18939,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18888,
											"end": 18939,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 18888,
											"end": 18939,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 18888,
											"end": 18939,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 18884,
											"end": 19014,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "299"
										},
										{
											"begin": 18884,
											"end": 19014,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 18992,
											"end": 18994,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "PUSH",
											"source": 2,
											"value": "64A0AE9200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 18970,
											"end": 18995,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "tag",
											"source": 2,
											"value": "300"
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 18970,
											"end": 18995,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 18884,
											"end": 19014,
											"name": "tag",
											"source": 2,
											"value": "299"
										},
										{
											"begin": 18884,
											"end": 19014,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18842,
											"end": 19028,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18728,
											"end": 19392,
											"name": "tag",
											"source": 2,
											"value": "282"
										},
										{
											"begin": 18728,
											"end": 19392,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 18616,
											"end": 19398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18616,
											"end": 19398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18616,
											"end": 19398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18616,
											"end": 19398,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 18616,
											"end": 19398,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "tag",
											"source": 1,
											"value": "197"
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8795,
											"end": 8825,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8870,
											"end": 8891,
											"name": "PUSH",
											"source": 1,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 8860,
											"end": 8891,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8860,
											"end": 8891,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8737,
											"end": 8907,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2382,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 2233,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "303"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "304"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "303"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2336,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 2360,
											"end": 2365,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2367,
											"end": 2374,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2336,
											"end": 2359,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "307"
										},
										{
											"begin": 2336,
											"end": 2375,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2336,
											"end": 2375,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 2336,
											"end": 2375,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2382,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2382,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2382,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1155,
											"end": 1258,
											"name": "tag",
											"source": 4,
											"value": "207"
										},
										{
											"begin": 1155,
											"end": 1258,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "309"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "304"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "309"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1224,
											"end": 1251,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 1224,
											"end": 1249,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "312"
										},
										{
											"begin": 1224,
											"end": 1251,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1224,
											"end": 1251,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 1224,
											"end": 1251,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1155,
											"end": 1258,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "tag",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "314"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "304"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "314"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "316"
										},
										{
											"begin": 1954,
											"end": 1966,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 1953,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "317"
										},
										{
											"begin": 1929,
											"end": 1967,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "316"
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1847,
											"end": 1974,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 556,
											"end": 622,
											"name": "tag",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 556,
											"end": 622,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "319"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "304"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "319"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 556,
											"end": 622,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4469,
											"end": 4561,
											"name": "tag",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 4469,
											"end": 4561,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4520,
											"end": 4533,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4545,
											"end": 4554,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4469,
											"end": 4561,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4469,
											"end": 4561,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 637,
											"end": 1335,
											"name": "tag",
											"source": 12,
											"value": "222"
										},
										{
											"begin": 637,
											"end": 1335,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 693,
											"end": 706,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 742,
											"end": 756,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 759,
											"end": 776,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 770,
											"end": 775,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 759,
											"end": 769,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 759,
											"end": 776,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 759,
											"end": 776,
											"name": "tag",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 759,
											"end": 776,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 759,
											"end": 780,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 742,
											"end": 780,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 742,
											"end": 780,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 794,
											"end": 814,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 828,
											"end": 834,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "325"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 817,
											"end": 835,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "tag",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "tag",
											"source": 12,
											"value": "325"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "CALLDATACOPY",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "tag",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 817,
											"end": 835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 817,
											"end": 835,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 794,
											"end": 835,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 794,
											"end": 835,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 849,
											"end": 860,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 975,
											"end": 981,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 971,
											"end": 973,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 967,
											"end": 982,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 959,
											"end": 965,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 955,
											"end": 983,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 948,
											"end": 983,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 948,
											"end": 983,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1010,
											"end": 1292,
											"name": "tag",
											"source": 12,
											"value": "329"
										},
										{
											"begin": 1010,
											"end": 1292,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1017,
											"end": 1021,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1010,
											"end": 1292,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1010,
											"end": 1292,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "330"
										},
										{
											"begin": 1010,
											"end": 1292,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1041,
											"end": 1046,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1180,
											"end": 1190,
											"name": "PUSH",
											"source": 12,
											"value": "3031323334353637383961626364656600000000000000000000000000000000"
										},
										{
											"begin": 1175,
											"end": 1177,
											"name": "PUSH",
											"source": 12,
											"value": "A"
										},
										{
											"begin": 1168,
											"end": 1173,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1164,
											"end": 1178,
											"name": "MOD",
											"source": 12
										},
										{
											"begin": 1159,
											"end": 1191,
											"name": "BYTE",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1157,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1146,
											"end": 1192,
											"name": "MSTORE8",
											"source": 12
										},
										{
											"begin": 1236,
											"end": 1238,
											"name": "PUSH",
											"source": 12,
											"value": "A"
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "333"
										},
										{
											"begin": 1227,
											"end": 1238,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "tag",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "tag",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 1227,
											"end": 1238,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1269,
											"end": 1270,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1260,
											"end": 1265,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1260,
											"end": 1270,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1010,
											"end": 1292,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "329"
										},
										{
											"begin": 1256,
											"end": 1277,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1010,
											"end": 1292,
											"name": "tag",
											"source": 12,
											"value": "330"
										},
										{
											"begin": 1010,
											"end": 1292,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1312,
											"end": 1318,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1305,
											"end": 1318,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1305,
											"end": 1318,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1305,
											"end": 1318,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1305,
											"end": 1318,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1305,
											"end": 1318,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 637,
											"end": 1335,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 637,
											"end": 1335,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 637,
											"end": 1335,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 637,
											"end": 1335,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7059,
											"end": 7231,
											"name": "tag",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 7059,
											"end": 7231,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7125,
											"end": 7132,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7144,
											"end": 7167,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7170,
											"end": 7189,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "336"
										},
										{
											"begin": 7170,
											"end": 7187,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 7170,
											"end": 7189,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7170,
											"end": 7189,
											"name": "tag",
											"source": 2,
											"value": "336"
										},
										{
											"begin": 7170,
											"end": 7189,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7144,
											"end": 7189,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7144,
											"end": 7189,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7207,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7215,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7206,
											"end": 7215,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7216,
											"end": 7223,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7206,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7199,
											"end": 7224,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7199,
											"end": 7224,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7199,
											"end": 7224,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7059,
											"end": 7231,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7059,
											"end": 7231,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7059,
											"end": 7231,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7059,
											"end": 7231,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 16304,
											"end": 17023,
											"name": "tag",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 16304,
											"end": 17023,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16408,
											"end": 16431,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16434,
											"end": 16453,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "338"
										},
										{
											"begin": 16434,
											"end": 16451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 16434,
											"end": 16453,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 16434,
											"end": 16453,
											"name": "tag",
											"source": 2,
											"value": "338"
										},
										{
											"begin": 16434,
											"end": 16453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16408,
											"end": 16453,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16408,
											"end": 16453,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16519,
											"end": 16528,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16519,
											"end": 16550,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 16519,
											"end": 16550,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "339"
										},
										{
											"begin": 16519,
											"end": 16550,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16519,
											"end": 16550,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16548,
											"end": 16549,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16532,
											"end": 16550,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16532,
											"end": 16550,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16532,
											"end": 16536,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16532,
											"end": 16550,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16532,
											"end": 16550,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16532,
											"end": 16550,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 16532,
											"end": 16550,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16519,
											"end": 16550,
											"name": "tag",
											"source": 2,
											"value": "339"
										},
										{
											"begin": 16519,
											"end": 16550,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16515,
											"end": 16975,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16515,
											"end": 16975,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "340"
										},
										{
											"begin": 16515,
											"end": 16975,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16566,
											"end": 16579,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16582,
											"end": 16604,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "341"
										},
										{
											"begin": 16596,
											"end": 16603,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 16582,
											"end": 16595,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 16582,
											"end": 16604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 16582,
											"end": 16604,
											"name": "tag",
											"source": 2,
											"value": "341"
										},
										{
											"begin": 16582,
											"end": 16604,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16566,
											"end": 16604,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16566,
											"end": 16604,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16748,
											"end": 16749,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16732,
											"end": 16750,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16732,
											"end": 16750,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16736,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16750,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16732,
											"end": 16750,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16750,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16750,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16767,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16767,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16767,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "342"
										},
										{
											"begin": 16732,
											"end": 16767,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16767,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16763,
											"end": 16767,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16754,
											"end": 16767,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16754,
											"end": 16767,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16754,
											"end": 16759,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16754,
											"end": 16767,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16754,
											"end": 16767,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16754,
											"end": 16767,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 16754,
											"end": 16767,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16767,
											"name": "tag",
											"source": 2,
											"value": "342"
										},
										{
											"begin": 16732,
											"end": 16767,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16801,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16801,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16801,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "343"
										},
										{
											"begin": 16732,
											"end": 16801,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16801,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16772,
											"end": 16801,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 16789,
											"end": 16794,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16796,
											"end": 16800,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 16772,
											"end": 16788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 16772,
											"end": 16801,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 16772,
											"end": 16801,
											"name": "tag",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 16772,
											"end": 16801,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16771,
											"end": 16801,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16732,
											"end": 16801,
											"name": "tag",
											"source": 2,
											"value": "343"
										},
										{
											"begin": 16732,
											"end": 16801,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16728,
											"end": 16870,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16728,
											"end": 16870,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 16728,
											"end": 16870,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16850,
											"end": 16854,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "PUSH",
											"source": 2,
											"value": "A9FBF51F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "346"
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 16828,
											"end": 16855,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "tag",
											"source": 2,
											"value": "346"
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16828,
											"end": 16855,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 16728,
											"end": 16870,
											"name": "tag",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 16728,
											"end": 16870,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16888,
											"end": 16897,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 16884,
											"end": 16965,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 16884,
											"end": 16965,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "347"
										},
										{
											"begin": 16884,
											"end": 16965,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 16942,
											"end": 16949,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 16938,
											"end": 16940,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16931,
											"end": 16936,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16922,
											"end": 16950,
											"name": "LOG4",
											"source": 2
										},
										{
											"begin": 16884,
											"end": 16965,
											"name": "tag",
											"source": 2,
											"value": "347"
										},
										{
											"begin": 16884,
											"end": 16965,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16552,
											"end": 16975,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16515,
											"end": 16975,
											"name": "tag",
											"source": 2,
											"value": "340"
										},
										{
											"begin": 16515,
											"end": 16975,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 17014,
											"end": 17016,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 16986,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17002,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 16985,
											"end": 17002,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 17003,
											"end": 17010,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17011,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 16985,
											"end": 17016,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16398,
											"end": 17023,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16304,
											"end": 17023,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16304,
											"end": 17023,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16304,
											"end": 17023,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16304,
											"end": 17023,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 16304,
											"end": 17023,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1472,
											"end": 1676,
											"name": "tag",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 1472,
											"end": 1676,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1611,
											"end": 1618,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "349"
										},
										{
											"begin": 2316,
											"end": 2333,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "267"
										},
										{
											"begin": 2316,
											"end": 2335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "tag",
											"source": 6,
											"value": "349"
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1637,
											"end": 1669,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "351"
										},
										{
											"begin": 1651,
											"end": 1653,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1655,
											"end": 1662,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1664,
											"end": 1668,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1637,
											"end": 1650,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "352"
										},
										{
											"begin": 1637,
											"end": 1669,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1637,
											"end": 1669,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "351"
										},
										{
											"begin": 1637,
											"end": 1669,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1630,
											"end": 1669,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1630,
											"end": 1669,
											"modifierDepth": 1,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1472,
											"end": 1676,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1472,
											"end": 1676,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1472,
											"end": 1676,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1472,
											"end": 1676,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1472,
											"end": 1676,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1472,
											"end": 1676,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3105,
											"end": 3231,
											"name": "tag",
											"source": 6,
											"value": "257"
										},
										{
											"begin": 3105,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3168,
											"end": 3176,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "354"
										},
										{
											"begin": 3168,
											"end": 3174,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 3168,
											"end": 3176,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3168,
											"end": 3176,
											"name": "tag",
											"source": 6,
											"value": "354"
										},
										{
											"begin": 3168,
											"end": 3176,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3163,
											"end": 3225,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "355"
										},
										{
											"begin": 3163,
											"end": 3225,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "PUSH",
											"source": 6,
											"value": "8DFC202B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3199,
											"end": 3214,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3163,
											"end": 3225,
											"name": "tag",
											"source": 6,
											"value": "355"
										},
										{
											"begin": 3163,
											"end": 3225,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3105,
											"end": 3231,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2905,
											"end": 3033,
											"name": "tag",
											"source": 6,
											"value": "267"
										},
										{
											"begin": 2905,
											"end": 3033,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2970,
											"end": 2978,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "357"
										},
										{
											"begin": 2970,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 2970,
											"end": 2978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2970,
											"end": 2978,
											"name": "tag",
											"source": 6,
											"value": "357"
										},
										{
											"begin": 2970,
											"end": 2978,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "358"
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "PUSH",
											"source": 6,
											"value": "D93C066500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3001,
											"end": 3016,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "tag",
											"source": 6,
											"value": "358"
										},
										{
											"begin": 2966,
											"end": 3027,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2905,
											"end": 3033,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 12538,
											"end": 12720,
											"name": "tag",
											"source": 2,
											"value": "275"
										},
										{
											"begin": 12538,
											"end": 12720,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12632,
											"end": 12650,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 12638,
											"end": 12640,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12642,
											"end": 12649,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12632,
											"end": 12637,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 12632,
											"end": 12650,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12632,
											"end": 12650,
											"name": "tag",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 12632,
											"end": 12650,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12660,
											"end": 12713,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 12691,
											"end": 12692,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12695,
											"end": 12697,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12699,
											"end": 12706,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12708,
											"end": 12712,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12660,
											"end": 12682,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 12660,
											"end": 12713,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12660,
											"end": 12713,
											"name": "tag",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 12660,
											"end": 12713,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12538,
											"end": 12720,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12538,
											"end": 12720,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12538,
											"end": 12720,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12538,
											"end": 12720,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "tag",
											"source": 1,
											"value": "304"
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "364"
										},
										{
											"begin": 7151,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "365"
										},
										{
											"begin": 7151,
											"end": 7168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "tag",
											"source": 1,
											"value": "364"
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "366"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "D7E6BCF800000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "tag",
											"source": 1,
											"value": "366"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7084,
											"end": 7225,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2388,
											"end": 2607,
											"name": "tag",
											"source": 2,
											"value": "307"
										},
										{
											"begin": 2388,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "304"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2501,
											"end": 2524,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2527,
											"end": 2546,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "370"
										},
										{
											"begin": 2527,
											"end": 2544,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 2527,
											"end": 2546,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2527,
											"end": 2546,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "370"
										},
										{
											"begin": 2527,
											"end": 2546,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2501,
											"end": 2546,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2501,
											"end": 2546,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2566,
											"end": 2571,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2557,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2556,
											"end": 2563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "371"
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "372"
										},
										{
											"begin": 2556,
											"end": 2571,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "371"
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2556,
											"end": 2571,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2593,
											"end": 2600,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2582,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2590,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2581,
											"end": 2590,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "373"
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "372"
										},
										{
											"begin": 2581,
											"end": 2600,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "373"
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2600,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2491,
											"end": 2607,
											"modifierDepth": 1,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2388,
											"end": 2607,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2388,
											"end": 2607,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2388,
											"end": 2607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1939,
											"end": 2095,
											"name": "tag",
											"source": 6,
											"value": "312"
										},
										{
											"begin": 1939,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "375"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "304"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "375"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2012,
											"end": 2037,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2040,
											"end": 2061,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "377"
										},
										{
											"begin": 2040,
											"end": 2059,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 2040,
											"end": 2061,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2040,
											"end": 2061,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "377"
										},
										{
											"begin": 2040,
											"end": 2061,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2012,
											"end": 2061,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2012,
											"end": 2061,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2083,
											"end": 2088,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2071,
											"end": 2072,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2080,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2071,
											"end": 2080,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2080,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2088,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2002,
											"end": 2095,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1939,
											"end": 2095,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "tag",
											"source": 0,
											"value": "317"
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "304"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2100,
											"end": 2101,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2076,
											"end": 2102,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2076,
											"end": 2102,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2076,
											"end": 2088,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2076,
											"end": 2102,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2076,
											"end": 2102,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2076,
											"end": 2102,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2072,
											"end": 2167,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "381"
										},
										{
											"begin": 2072,
											"end": 2167,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2153,
											"end": 2154,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "382"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 2125,
											"end": 2156,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "382"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2125,
											"end": 2156,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2072,
											"end": 2167,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "381"
										},
										{
											"begin": 2072,
											"end": 2167,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2176,
											"end": 2208,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "383"
										},
										{
											"begin": 2195,
											"end": 2207,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2176,
											"end": 2194,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 2176,
											"end": 2208,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2176,
											"end": 2208,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "383"
										},
										{
											"begin": 2176,
											"end": 2208,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1980,
											"end": 2215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12214,
											"end": 13130,
											"name": "tag",
											"source": 14,
											"value": "324"
										},
										{
											"begin": 12214,
											"end": 13130,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12267,
											"end": 12274,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12286,
											"end": 12300,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12303,
											"end": 12304,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12286,
											"end": 12304,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12286,
											"end": 12304,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12351,
											"end": 12359,
											"name": "PUSH",
											"source": 14,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 12342,
											"end": 12347,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12342,
											"end": 12359,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12338,
											"end": 12441,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "385"
										},
										{
											"begin": 12338,
											"end": 12441,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12388,
											"end": 12396,
											"name": "PUSH",
											"source": 14,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "386"
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "387"
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 12379,
											"end": 12396,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "tag",
											"source": 14,
											"value": "387"
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "tag",
											"source": 14,
											"value": "386"
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12379,
											"end": 12396,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12424,
											"end": 12426,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12414,
											"end": 12426,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12414,
											"end": 12426,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12414,
											"end": 12426,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12414,
											"end": 12426,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12338,
											"end": 12441,
											"name": "tag",
											"source": 14,
											"value": "385"
										},
										{
											"begin": 12338,
											"end": 12441,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12467,
											"end": 12475,
											"name": "PUSH",
											"source": 14,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 12458,
											"end": 12463,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12458,
											"end": 12475,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12454,
											"end": 12557,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "388"
										},
										{
											"begin": 12454,
											"end": 12557,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12504,
											"end": 12512,
											"name": "PUSH",
											"source": 14,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "389"
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "390"
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 12495,
											"end": 12512,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "tag",
											"source": 14,
											"value": "390"
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "tag",
											"source": 14,
											"value": "389"
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12495,
											"end": 12512,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12540,
											"end": 12542,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12530,
											"end": 12542,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12530,
											"end": 12542,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12530,
											"end": 12542,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12530,
											"end": 12542,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12454,
											"end": 12557,
											"name": "tag",
											"source": 14,
											"value": "388"
										},
										{
											"begin": 12454,
											"end": 12557,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12583,
											"end": 12591,
											"name": "PUSH",
											"source": 14,
											"value": "2386F26FC10000"
										},
										{
											"begin": 12574,
											"end": 12579,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12574,
											"end": 12591,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12570,
											"end": 12673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "391"
										},
										{
											"begin": 12570,
											"end": 12673,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12620,
											"end": 12628,
											"name": "PUSH",
											"source": 14,
											"value": "2386F26FC10000"
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "392"
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "393"
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 12611,
											"end": 12628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "tag",
											"source": 14,
											"value": "393"
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "tag",
											"source": 14,
											"value": "392"
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12611,
											"end": 12628,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12656,
											"end": 12658,
											"name": "PUSH",
											"source": 14,
											"value": "10"
										},
										{
											"begin": 12646,
											"end": 12658,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12646,
											"end": 12658,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12646,
											"end": 12658,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12646,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12570,
											"end": 12673,
											"name": "tag",
											"source": 14,
											"value": "391"
										},
										{
											"begin": 12570,
											"end": 12673,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12699,
											"end": 12706,
											"name": "PUSH",
											"source": 14,
											"value": "5F5E100"
										},
										{
											"begin": 12690,
											"end": 12695,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12690,
											"end": 12706,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12686,
											"end": 12786,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "394"
										},
										{
											"begin": 12686,
											"end": 12786,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12735,
											"end": 12742,
											"name": "PUSH",
											"source": 14,
											"value": "5F5E100"
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "395"
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "396"
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 12726,
											"end": 12742,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "tag",
											"source": 14,
											"value": "396"
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "tag",
											"source": 14,
											"value": "395"
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12770,
											"end": 12771,
											"name": "PUSH",
											"source": 14,
											"value": "8"
										},
										{
											"begin": 12760,
											"end": 12771,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12760,
											"end": 12771,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12760,
											"end": 12771,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12760,
											"end": 12771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12686,
											"end": 12786,
											"name": "tag",
											"source": 14,
											"value": "394"
										},
										{
											"begin": 12686,
											"end": 12786,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12812,
											"end": 12819,
											"name": "PUSH",
											"source": 14,
											"value": "2710"
										},
										{
											"begin": 12803,
											"end": 12808,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12803,
											"end": 12819,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12799,
											"end": 12899,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "397"
										},
										{
											"begin": 12799,
											"end": 12899,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12848,
											"end": 12855,
											"name": "PUSH",
											"source": 14,
											"value": "2710"
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "398"
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "399"
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 12839,
											"end": 12855,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "tag",
											"source": 14,
											"value": "399"
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "tag",
											"source": 14,
											"value": "398"
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12839,
											"end": 12855,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12883,
											"end": 12884,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 12873,
											"end": 12884,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12873,
											"end": 12884,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12873,
											"end": 12884,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12873,
											"end": 12884,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12799,
											"end": 12899,
											"name": "tag",
											"source": 14,
											"value": "397"
										},
										{
											"begin": 12799,
											"end": 12899,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12925,
											"end": 12932,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 12916,
											"end": 12921,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12916,
											"end": 12932,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12912,
											"end": 13012,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "400"
										},
										{
											"begin": 12912,
											"end": 13012,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12961,
											"end": 12968,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "401"
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 12952,
											"end": 12968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "tag",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "tag",
											"source": 14,
											"value": "401"
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12952,
											"end": 12968,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12996,
											"end": 12997,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 12986,
											"end": 12997,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12986,
											"end": 12997,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12986,
											"end": 12997,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12986,
											"end": 12997,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12912,
											"end": 13012,
											"name": "tag",
											"source": 14,
											"value": "400"
										},
										{
											"begin": 12912,
											"end": 13012,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13038,
											"end": 13045,
											"name": "PUSH",
											"source": 14,
											"value": "A"
										},
										{
											"begin": 13029,
											"end": 13034,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13029,
											"end": 13045,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 13025,
											"end": 13091,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "403"
										},
										{
											"begin": 13025,
											"end": 13091,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13075,
											"end": 13076,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 13065,
											"end": 13076,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13065,
											"end": 13076,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13065,
											"end": 13076,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13065,
											"end": 13076,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13025,
											"end": 13091,
											"name": "tag",
											"source": 14,
											"value": "403"
										},
										{
											"begin": 13025,
											"end": 13091,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13117,
											"end": 13123,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13110,
											"end": 13123,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13110,
											"end": 13123,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13110,
											"end": 13123,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12214,
											"end": 13130,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12214,
											"end": 13130,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12214,
											"end": 13130,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12214,
											"end": 13130,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10361,
											"end": 11217,
											"name": "tag",
											"source": 2,
											"value": "352"
										},
										{
											"begin": 10361,
											"end": 11217,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10447,
											"end": 10454,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10466,
											"end": 10489,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10492,
											"end": 10511,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "405"
										},
										{
											"begin": 10492,
											"end": 10509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 10492,
											"end": 10511,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10492,
											"end": 10511,
											"name": "tag",
											"source": 2,
											"value": "405"
										},
										{
											"begin": 10492,
											"end": 10511,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10466,
											"end": 10511,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10466,
											"end": 10511,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10521,
											"end": 10533,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "406"
										},
										{
											"begin": 10545,
											"end": 10552,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10536,
											"end": 10544,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 10536,
											"end": 10553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "tag",
											"source": 2,
											"value": "406"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10521,
											"end": 10553,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10521,
											"end": 10553,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10629,
											"end": 10630,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10613,
											"end": 10631,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10613,
											"end": 10631,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10613,
											"end": 10617,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10613,
											"end": 10631,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10613,
											"end": 10631,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10613,
											"end": 10631,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 10609,
											"end": 10695,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "407"
										},
										{
											"begin": 10609,
											"end": 10695,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10647,
											"end": 10684,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "408"
										},
										{
											"begin": 10664,
											"end": 10668,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10670,
											"end": 10674,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10676,
											"end": 10683,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 10647,
											"end": 10663,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "409"
										},
										{
											"begin": 10647,
											"end": 10684,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10647,
											"end": 10684,
											"name": "tag",
											"source": 2,
											"value": "408"
										},
										{
											"begin": 10647,
											"end": 10684,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10609,
											"end": 10695,
											"name": "tag",
											"source": 2,
											"value": "407"
										},
										{
											"begin": 10609,
											"end": 10695,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10755,
											"end": 10756,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10739,
											"end": 10757,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10739,
											"end": 10757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10739,
											"end": 10743,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10739,
											"end": 10757,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10739,
											"end": 10757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10739,
											"end": 10757,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 10735,
											"end": 10993,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "410"
										},
										{
											"begin": 10735,
											"end": 10993,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10855,
											"end": 10903,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "411"
										},
										{
											"begin": 10872,
											"end": 10873,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10876,
											"end": 10883,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 10893,
											"end": 10894,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10897,
											"end": 10902,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10855,
											"end": 10863,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 10855,
											"end": 10903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10855,
											"end": 10903,
											"name": "tag",
											"source": 2,
											"value": "411"
										},
										{
											"begin": 10855,
											"end": 10903,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10967,
											"end": 10968,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10946,
											"end": 10947,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10957,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 10946,
											"end": 10957,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10958,
											"end": 10962,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10963,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10946,
											"end": 10968,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10735,
											"end": 10993,
											"name": "tag",
											"source": 2,
											"value": "410"
										},
										{
											"begin": 10735,
											"end": 10993,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11021,
											"end": 11022,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11007,
											"end": 11023,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11007,
											"end": 11023,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11007,
											"end": 11009,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11007,
											"end": 11023,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11007,
											"end": 11023,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11007,
											"end": 11023,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11003,
											"end": 11112,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "412"
										},
										{
											"begin": 11003,
											"end": 11112,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11086,
											"end": 11087,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 11067,
											"end": 11068,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11078,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 11067,
											"end": 11078,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11079,
											"end": 11081,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11082,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11087,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11003,
											"end": 11112,
											"name": "tag",
											"source": 2,
											"value": "412"
										},
										{
											"begin": 11003,
											"end": 11112,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11143,
											"end": 11145,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11123,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11131,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 11122,
											"end": 11131,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11132,
											"end": 11139,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11140,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11145,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11180,
											"end": 11187,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11176,
											"end": 11178,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11170,
											"end": 11174,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11188,
											"name": "LOG4",
											"source": 2
										},
										{
											"begin": 11206,
											"end": 11210,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11199,
											"end": 11210,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11199,
											"end": 11210,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11199,
											"end": 11210,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11199,
											"end": 11210,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10361,
											"end": 11217,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10361,
											"end": 11217,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10361,
											"end": 11217,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10361,
											"end": 11217,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10361,
											"end": 11217,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10361,
											"end": 11217,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11539,
											"end": 11866,
											"name": "tag",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 11539,
											"end": 11866,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11620,
											"end": 11621,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11606,
											"end": 11622,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11606,
											"end": 11622,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11606,
											"end": 11608,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11606,
											"end": 11622,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11606,
											"end": 11622,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11606,
											"end": 11622,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11602,
											"end": 11689,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "414"
										},
										{
											"begin": 11602,
											"end": 11689,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11675,
											"end": 11676,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "PUSH",
											"source": 2,
											"value": "64A0AE9200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "415"
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 11645,
											"end": 11678,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "tag",
											"source": 2,
											"value": "415"
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11645,
											"end": 11678,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11602,
											"end": 11689,
											"name": "tag",
											"source": 2,
											"value": "414"
										},
										{
											"begin": 11602,
											"end": 11689,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11698,
											"end": 11719,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11722,
											"end": 11754,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "416"
										},
										{
											"begin": 11730,
											"end": 11732,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11734,
											"end": 11741,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11751,
											"end": 11752,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11722,
											"end": 11729,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 11722,
											"end": 11754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11722,
											"end": 11754,
											"name": "tag",
											"source": 2,
											"value": "416"
										},
										{
											"begin": 11722,
											"end": 11754,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11698,
											"end": 11754,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11698,
											"end": 11754,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11793,
											"end": 11794,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11768,
											"end": 11795,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11768,
											"end": 11795,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11768,
											"end": 11781,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11768,
											"end": 11795,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11768,
											"end": 11795,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11768,
											"end": 11795,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11764,
											"end": 11860,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "417"
										},
										{
											"begin": 11764,
											"end": 11860,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11846,
											"end": 11847,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "PUSH",
											"source": 2,
											"value": "73C6AC6E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "418"
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 11818,
											"end": 11849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "tag",
											"source": 2,
											"value": "418"
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11818,
											"end": 11849,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11764,
											"end": 11860,
											"name": "tag",
											"source": 2,
											"value": "417"
										},
										{
											"begin": 11764,
											"end": 11860,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11592,
											"end": 11866,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11539,
											"end": 11866,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11539,
											"end": 11866,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11539,
											"end": 11866,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "tag",
											"source": 1,
											"value": "365"
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8537,
											"end": 8541,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "420"
										},
										{
											"begin": 8560,
											"end": 8584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "197"
										},
										{
											"begin": 8560,
											"end": 8586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "tag",
											"source": 1,
											"value": "420"
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8553,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8553,
											"end": 8600,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8487,
											"end": 8607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8548,
											"end": 8916,
											"name": "tag",
											"source": 2,
											"value": "409"
										},
										{
											"begin": 8548,
											"end": 8916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8660,
											"end": 8698,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "422"
										},
										{
											"begin": 8674,
											"end": 8679,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8681,
											"end": 8688,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8690,
											"end": 8697,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8660,
											"end": 8673,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "423"
										},
										{
											"begin": 8660,
											"end": 8698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8660,
											"end": 8698,
											"name": "tag",
											"source": 2,
											"value": "422"
										},
										{
											"begin": 8660,
											"end": 8698,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8655,
											"end": 8910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "424"
										},
										{
											"begin": 8655,
											"end": 8910,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8735,
											"end": 8736,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8718,
											"end": 8737,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8718,
											"end": 8737,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8718,
											"end": 8723,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8718,
											"end": 8737,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8718,
											"end": 8737,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8718,
											"end": 8737,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8714,
											"end": 8900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "425"
										},
										{
											"begin": 8714,
											"end": 8900,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8787,
											"end": 8794,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "PUSH",
											"source": 2,
											"value": "7E27328900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "426"
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 8764,
											"end": 8795,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "tag",
											"source": 2,
											"value": "426"
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8764,
											"end": 8795,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8714,
											"end": 8900,
											"name": "tag",
											"source": 2,
											"value": "425"
										},
										{
											"begin": 8714,
											"end": 8900,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8868,
											"end": 8875,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8877,
											"end": 8884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "PUSH",
											"source": 2,
											"value": "177E802F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "428"
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "429"
										},
										{
											"begin": 8841,
											"end": 8885,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "tag",
											"source": 2,
											"value": "428"
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8841,
											"end": 8885,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8655,
											"end": 8910,
											"name": "tag",
											"source": 2,
											"value": "424"
										},
										{
											"begin": 8655,
											"end": 8910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8548,
											"end": 8916,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8548,
											"end": 8916,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8548,
											"end": 8916,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8548,
											"end": 8916,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7842,
											"end": 8114,
											"name": "tag",
											"source": 2,
											"value": "423"
										},
										{
											"begin": 7842,
											"end": 8114,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7945,
											"end": 7949,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7999,
											"end": 8000,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8001,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7980,
											"end": 8001,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 7987,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8001,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7980,
											"end": 8001,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8001,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8001,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8107,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8107,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8107,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "431"
										},
										{
											"begin": 7980,
											"end": 8107,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8107,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8027,
											"end": 8034,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8034,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8018,
											"end": 8034,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8023,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8034,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8018,
											"end": 8034,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8034,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8070,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8070,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "432"
										},
										{
											"begin": 8018,
											"end": 8070,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8070,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8038,
											"end": 8070,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "433"
										},
										{
											"begin": 8055,
											"end": 8060,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8069,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8038,
											"end": 8054,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 8038,
											"end": 8070,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8038,
											"end": 8070,
											"name": "tag",
											"source": 2,
											"value": "433"
										},
										{
											"begin": 8038,
											"end": 8070,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8070,
											"name": "tag",
											"source": 2,
											"value": "432"
										},
										{
											"begin": 8018,
											"end": 8070,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8106,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8106,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "434"
										},
										{
											"begin": 8018,
											"end": 8106,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8106,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8099,
											"end": 8106,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8074,
											"end": 8106,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8074,
											"end": 8106,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8074,
											"end": 8095,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "435"
										},
										{
											"begin": 8087,
											"end": 8094,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8074,
											"end": 8086,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 8074,
											"end": 8095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8074,
											"end": 8095,
											"name": "tag",
											"source": 2,
											"value": "435"
										},
										{
											"begin": 8074,
											"end": 8095,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8074,
											"end": 8106,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8074,
											"end": 8106,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8074,
											"end": 8106,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 8018,
											"end": 8106,
											"name": "tag",
											"source": 2,
											"value": "434"
										},
										{
											"begin": 8018,
											"end": 8106,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7980,
											"end": 8107,
											"name": "tag",
											"source": 2,
											"value": "431"
										},
										{
											"begin": 7980,
											"end": 8107,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7961,
											"end": 8107,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7961,
											"end": 8107,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7842,
											"end": 8114,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 7842,
											"end": 8114,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7842,
											"end": 8114,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7842,
											"end": 8114,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7842,
											"end": 8114,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7842,
											"end": 8114,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 82,
											"name": "tag",
											"source": 17,
											"value": "436"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 40,
											"end": 46,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 75,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 76,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 57,
											"end": 76,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 57,
											"end": 76,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7,
											"end": 82,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 7,
											"end": 82,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 17,
											"value": "438"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"name": "tag",
											"source": 17,
											"value": "439"
										},
										{
											"begin": 334,
											"end": 483,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 370,
											"end": 377,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 410,
											"end": 476,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 403,
											"end": 408,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 399,
											"end": 477,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 388,
											"end": 477,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 388,
											"end": 477,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 334,
											"end": 483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 489,
											"end": 609,
											"name": "tag",
											"source": 17,
											"value": "440"
										},
										{
											"begin": 489,
											"end": 609,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "500"
										},
										{
											"begin": 578,
											"end": 583,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "439"
										},
										{
											"begin": 561,
											"end": 584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 561,
											"end": 584,
											"name": "tag",
											"source": 17,
											"value": "500"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 554,
											"end": 559,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 551,
											"end": 585,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 541,
											"end": 603,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "501"
										},
										{
											"begin": 541,
											"end": 603,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 599,
											"end": 600,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 596,
											"end": 597,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 589,
											"end": 601,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 541,
											"end": 603,
											"name": "tag",
											"source": 17,
											"value": "501"
										},
										{
											"begin": 541,
											"end": 603,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 489,
											"end": 609,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 489,
											"end": 609,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "tag",
											"source": 17,
											"value": "441"
										},
										{
											"begin": 615,
											"end": 752,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 660,
											"end": 665,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 704,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 685,
											"end": 705,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 676,
											"end": 705,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 676,
											"end": 705,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 714,
											"end": 746,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "503"
										},
										{
											"begin": 740,
											"end": 745,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 714,
											"end": 746,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "440"
										},
										{
											"begin": 714,
											"end": 746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 714,
											"end": 746,
											"name": "tag",
											"source": 17,
											"value": "503"
										},
										{
											"begin": 714,
											"end": 746,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 615,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "tag",
											"source": 17,
											"value": "30"
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 816,
											"end": 822,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 865,
											"end": 867,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 853,
											"end": 862,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 844,
											"end": 851,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 840,
											"end": 863,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 836,
											"end": 868,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 833,
											"end": 952,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 833,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "505"
										},
										{
											"begin": 833,
											"end": 952,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 871,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "506"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 871,
											"end": 950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 871,
											"end": 950,
											"name": "tag",
											"source": 17,
											"value": "506"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 833,
											"end": 952,
											"name": "tag",
											"source": 17,
											"value": "505"
										},
										{
											"begin": 833,
											"end": 952,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 991,
											"end": 992,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "507"
										},
										{
											"begin": 1060,
											"end": 1067,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1051,
											"end": 1057,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1040,
											"end": 1049,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1036,
											"end": 1058,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "441"
										},
										{
											"begin": 1016,
											"end": 1068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "tag",
											"source": 17,
											"value": "507"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1006,
											"end": 1068,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1006,
											"end": 1068,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 962,
											"end": 1078,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 758,
											"end": 1085,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "tag",
											"source": 17,
											"value": "442"
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1125,
											"end": 1132,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1168,
											"end": 1173,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1161,
											"end": 1174,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1154,
											"end": 1175,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1143,
											"end": 1175,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1143,
											"end": 1175,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1091,
											"end": 1181,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "tag",
											"source": 17,
											"value": "443"
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "510"
										},
										{
											"begin": 1283,
											"end": 1288,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "442"
										},
										{
											"begin": 1268,
											"end": 1289,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "tag",
											"source": 17,
											"value": "510"
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1263,
											"end": 1266,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1256,
											"end": 1290,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1187,
											"end": 1296,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "tag",
											"source": 17,
											"value": "33"
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1389,
											"end": 1393,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1427,
											"end": 1429,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1416,
											"end": 1425,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1412,
											"end": 1430,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1404,
											"end": 1430,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1404,
											"end": 1430,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "512"
										},
										{
											"begin": 1502,
											"end": 1503,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1491,
											"end": 1500,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1487,
											"end": 1504,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1478,
											"end": 1484,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "443"
										},
										{
											"begin": 1440,
											"end": 1505,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "tag",
											"source": 17,
											"value": "512"
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1302,
											"end": 1512,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "tag",
											"source": 17,
											"value": "444"
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1570,
											"end": 1576,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1604,
											"end": 1609,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1598,
											"end": 1610,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1588,
											"end": 1610,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1588,
											"end": 1610,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1518,
											"end": 1617,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "tag",
											"source": 17,
											"value": "445"
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1707,
											"end": 1718,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1741,
											"end": 1747,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1729,
											"end": 1748,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1781,
											"end": 1785,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1776,
											"end": 1779,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1772,
											"end": 1786,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1757,
											"end": 1786,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1757,
											"end": 1786,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1623,
											"end": 1792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1798,
											"end": 2044,
											"name": "tag",
											"source": 17,
											"value": "446"
										},
										{
											"begin": 1798,
											"end": 2044,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1879,
											"end": 1880,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "tag",
											"source": 17,
											"value": "516"
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1903,
											"end": 1909,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1900,
											"end": 1901,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1897,
											"end": 1910,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "518"
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1988,
											"end": 1989,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1983,
											"end": 1986,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1979,
											"end": 1990,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1973,
											"end": 1991,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1969,
											"end": 1970,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1964,
											"end": 1967,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1960,
											"end": 1971,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1953,
											"end": 1992,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1925,
											"end": 1927,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1918,
											"end": 1928,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1913,
											"end": 1928,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1913,
											"end": 1928,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "516"
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "tag",
											"source": 17,
											"value": "518"
										},
										{
											"begin": 1889,
											"end": 2002,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2036,
											"end": 2037,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2033,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2022,
											"end": 2025,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2018,
											"end": 2034,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2011,
											"end": 2038,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1860,
											"end": 2044,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1798,
											"end": 2044,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1798,
											"end": 2044,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1798,
											"end": 2044,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1798,
											"end": 2044,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2050,
											"end": 2152,
											"name": "tag",
											"source": 17,
											"value": "447"
										},
										{
											"begin": 2050,
											"end": 2152,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2091,
											"end": 2097,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2142,
											"end": 2144,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 2138,
											"end": 2145,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 2133,
											"end": 2135,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 2126,
											"end": 2131,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2122,
											"end": 2136,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2118,
											"end": 2146,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2108,
											"end": 2146,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2108,
											"end": 2146,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2050,
											"end": 2152,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2050,
											"end": 2152,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2050,
											"end": 2152,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2050,
											"end": 2152,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2158,
											"end": 2535,
											"name": "tag",
											"source": 17,
											"value": "448"
										},
										{
											"begin": 2158,
											"end": 2535,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2246,
											"end": 2249,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2274,
											"end": 2313,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "521"
										},
										{
											"begin": 2307,
											"end": 2312,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2274,
											"end": 2313,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "444"
										},
										{
											"begin": 2274,
											"end": 2313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2274,
											"end": 2313,
											"name": "tag",
											"source": 17,
											"value": "521"
										},
										{
											"begin": 2274,
											"end": 2313,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2329,
											"end": 2400,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "522"
										},
										{
											"begin": 2393,
											"end": 2399,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2388,
											"end": 2391,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 2329,
											"end": 2400,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "445"
										},
										{
											"begin": 2329,
											"end": 2400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2329,
											"end": 2400,
											"name": "tag",
											"source": 17,
											"value": "522"
										},
										{
											"begin": 2329,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2322,
											"end": 2400,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 2322,
											"end": 2400,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2409,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "523"
										},
										{
											"begin": 2467,
											"end": 2473,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2462,
											"end": 2465,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 2455,
											"end": 2459,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2448,
											"end": 2453,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 2444,
											"end": 2460,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2409,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "446"
										},
										{
											"begin": 2409,
											"end": 2474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2409,
											"end": 2474,
											"name": "tag",
											"source": 17,
											"value": "523"
										},
										{
											"begin": 2409,
											"end": 2474,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2499,
											"end": 2528,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "524"
										},
										{
											"begin": 2521,
											"end": 2527,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2499,
											"end": 2528,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "447"
										},
										{
											"begin": 2499,
											"end": 2528,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2499,
											"end": 2528,
											"name": "tag",
											"source": 17,
											"value": "524"
										},
										{
											"begin": 2499,
											"end": 2528,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2494,
											"end": 2497,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2490,
											"end": 2529,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2483,
											"end": 2529,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2483,
											"end": 2529,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2250,
											"end": 2535,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2158,
											"end": 2535,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2158,
											"end": 2535,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2158,
											"end": 2535,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2158,
											"end": 2535,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2158,
											"end": 2535,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2541,
											"end": 2854,
											"name": "tag",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 2541,
											"end": 2854,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2654,
											"end": 2658,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2692,
											"end": 2694,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2681,
											"end": 2690,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2677,
											"end": 2695,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2669,
											"end": 2695,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2669,
											"end": 2695,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2741,
											"end": 2750,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2735,
											"end": 2739,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2731,
											"end": 2751,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 2727,
											"end": 2728,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2716,
											"end": 2725,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2712,
											"end": 2729,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2705,
											"end": 2752,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2769,
											"end": 2847,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "526"
										},
										{
											"begin": 2842,
											"end": 2846,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2833,
											"end": 2839,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2769,
											"end": 2847,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "448"
										},
										{
											"begin": 2769,
											"end": 2847,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2769,
											"end": 2847,
											"name": "tag",
											"source": 17,
											"value": "526"
										},
										{
											"begin": 2769,
											"end": 2847,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2761,
											"end": 2847,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2761,
											"end": 2847,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2541,
											"end": 2854,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2541,
											"end": 2854,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2541,
											"end": 2854,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2541,
											"end": 2854,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2541,
											"end": 2854,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2860,
											"end": 2937,
											"name": "tag",
											"source": 17,
											"value": "449"
										},
										{
											"begin": 2860,
											"end": 2937,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2897,
											"end": 2904,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2926,
											"end": 2931,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2915,
											"end": 2931,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2915,
											"end": 2931,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2860,
											"end": 2937,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2860,
											"end": 2937,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2860,
											"end": 2937,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2860,
											"end": 2937,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2943,
											"end": 3065,
											"name": "tag",
											"source": 17,
											"value": "450"
										},
										{
											"begin": 2943,
											"end": 3065,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3016,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "529"
										},
										{
											"begin": 3034,
											"end": 3039,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3016,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "449"
										},
										{
											"begin": 3016,
											"end": 3040,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3016,
											"end": 3040,
											"name": "tag",
											"source": 17,
											"value": "529"
										},
										{
											"begin": 3016,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3009,
											"end": 3014,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3006,
											"end": 3041,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 2996,
											"end": 3059,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "530"
										},
										{
											"begin": 2996,
											"end": 3059,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3055,
											"end": 3056,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3052,
											"end": 3053,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3045,
											"end": 3057,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2996,
											"end": 3059,
											"name": "tag",
											"source": 17,
											"value": "530"
										},
										{
											"begin": 2996,
											"end": 3059,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2943,
											"end": 3065,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2943,
											"end": 3065,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3071,
											"end": 3210,
											"name": "tag",
											"source": 17,
											"value": "451"
										},
										{
											"begin": 3071,
											"end": 3210,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3117,
											"end": 3122,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3155,
											"end": 3161,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3142,
											"end": 3162,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 3133,
											"end": 3162,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3133,
											"end": 3162,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3171,
											"end": 3204,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "532"
										},
										{
											"begin": 3198,
											"end": 3203,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3171,
											"end": 3204,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "450"
										},
										{
											"begin": 3171,
											"end": 3204,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3171,
											"end": 3204,
											"name": "tag",
											"source": 17,
											"value": "532"
										},
										{
											"begin": 3171,
											"end": 3204,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3071,
											"end": 3210,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 3071,
											"end": 3210,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3071,
											"end": 3210,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3071,
											"end": 3210,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3071,
											"end": 3210,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3216,
											"end": 3545,
											"name": "tag",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3216,
											"end": 3545,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3275,
											"end": 3281,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3324,
											"end": 3326,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 3312,
											"end": 3321,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3303,
											"end": 3310,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 3299,
											"end": 3322,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 3295,
											"end": 3327,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 3292,
											"end": 3411,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3292,
											"end": 3411,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "534"
										},
										{
											"begin": 3292,
											"end": 3411,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3330,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "535"
										},
										{
											"begin": 3330,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 3330,
											"end": 3409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3330,
											"end": 3409,
											"name": "tag",
											"source": 17,
											"value": "535"
										},
										{
											"begin": 3330,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3292,
											"end": 3411,
											"name": "tag",
											"source": 17,
											"value": "534"
										},
										{
											"begin": 3292,
											"end": 3411,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3450,
											"end": 3451,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3475,
											"end": 3528,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "536"
										},
										{
											"begin": 3520,
											"end": 3527,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 3511,
											"end": 3517,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3500,
											"end": 3509,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 3496,
											"end": 3518,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3475,
											"end": 3528,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "451"
										},
										{
											"begin": 3475,
											"end": 3528,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3475,
											"end": 3528,
											"name": "tag",
											"source": 17,
											"value": "536"
										},
										{
											"begin": 3475,
											"end": 3528,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3465,
											"end": 3528,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3465,
											"end": 3528,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3421,
											"end": 3538,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3216,
											"end": 3545,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 3216,
											"end": 3545,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3216,
											"end": 3545,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3216,
											"end": 3545,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3216,
											"end": 3545,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3551,
											"end": 3677,
											"name": "tag",
											"source": 17,
											"value": "452"
										},
										{
											"begin": 3551,
											"end": 3677,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3588,
											"end": 3595,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3628,
											"end": 3670,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3621,
											"end": 3626,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3617,
											"end": 3671,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3606,
											"end": 3671,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3606,
											"end": 3671,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3551,
											"end": 3677,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3551,
											"end": 3677,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3551,
											"end": 3677,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3551,
											"end": 3677,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3683,
											"end": 3779,
											"name": "tag",
											"source": 17,
											"value": "453"
										},
										{
											"begin": 3683,
											"end": 3779,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3720,
											"end": 3727,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3749,
											"end": 3773,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "539"
										},
										{
											"begin": 3767,
											"end": 3772,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3749,
											"end": 3773,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "452"
										},
										{
											"begin": 3749,
											"end": 3773,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3749,
											"end": 3773,
											"name": "tag",
											"source": 17,
											"value": "539"
										},
										{
											"begin": 3749,
											"end": 3773,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3738,
											"end": 3773,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3738,
											"end": 3773,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3683,
											"end": 3779,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3683,
											"end": 3779,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3683,
											"end": 3779,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3683,
											"end": 3779,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3785,
											"end": 3903,
											"name": "tag",
											"source": 17,
											"value": "454"
										},
										{
											"begin": 3785,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3872,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "541"
										},
										{
											"begin": 3890,
											"end": 3895,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3872,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "453"
										},
										{
											"begin": 3872,
											"end": 3896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3872,
											"end": 3896,
											"name": "tag",
											"source": 17,
											"value": "541"
										},
										{
											"begin": 3872,
											"end": 3896,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3867,
											"end": 3870,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3860,
											"end": 3897,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3785,
											"end": 3903,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3785,
											"end": 3903,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3785,
											"end": 3903,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3909,
											"end": 4131,
											"name": "tag",
											"source": 17,
											"value": "43"
										},
										{
											"begin": 3909,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4002,
											"end": 4006,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4040,
											"end": 4042,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 4029,
											"end": 4038,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 4025,
											"end": 4043,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 4017,
											"end": 4043,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4017,
											"end": 4043,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4053,
											"end": 4124,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "543"
										},
										{
											"begin": 4121,
											"end": 4122,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4110,
											"end": 4119,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 4106,
											"end": 4123,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 4097,
											"end": 4103,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 4053,
											"end": 4124,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "454"
										},
										{
											"begin": 4053,
											"end": 4124,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4053,
											"end": 4124,
											"name": "tag",
											"source": 17,
											"value": "543"
										},
										{
											"begin": 4053,
											"end": 4124,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3909,
											"end": 4131,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 3909,
											"end": 4131,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3909,
											"end": 4131,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3909,
											"end": 4131,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3909,
											"end": 4131,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4137,
											"end": 4259,
											"name": "tag",
											"source": 17,
											"value": "455"
										},
										{
											"begin": 4137,
											"end": 4259,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4210,
											"end": 4234,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "545"
										},
										{
											"begin": 4228,
											"end": 4233,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4210,
											"end": 4234,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "453"
										},
										{
											"begin": 4210,
											"end": 4234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4210,
											"end": 4234,
											"name": "tag",
											"source": 17,
											"value": "545"
										},
										{
											"begin": 4210,
											"end": 4234,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4203,
											"end": 4208,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4200,
											"end": 4235,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 4190,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "546"
										},
										{
											"begin": 4190,
											"end": 4253,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 4249,
											"end": 4250,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4246,
											"end": 4247,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 4239,
											"end": 4251,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 4190,
											"end": 4253,
											"name": "tag",
											"source": 17,
											"value": "546"
										},
										{
											"begin": 4190,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4137,
											"end": 4259,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4137,
											"end": 4259,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4265,
											"end": 4404,
											"name": "tag",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 4265,
											"end": 4404,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4311,
											"end": 4316,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4349,
											"end": 4355,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4336,
											"end": 4356,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 4327,
											"end": 4356,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4327,
											"end": 4356,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4365,
											"end": 4398,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "548"
										},
										{
											"begin": 4392,
											"end": 4397,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4365,
											"end": 4398,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "455"
										},
										{
											"begin": 4365,
											"end": 4398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4365,
											"end": 4398,
											"name": "tag",
											"source": 17,
											"value": "548"
										},
										{
											"begin": 4365,
											"end": 4398,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4265,
											"end": 4404,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4265,
											"end": 4404,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4265,
											"end": 4404,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4265,
											"end": 4404,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4265,
											"end": 4404,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4410,
											"end": 4884,
											"name": "tag",
											"source": 17,
											"value": "46"
										},
										{
											"begin": 4410,
											"end": 4884,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4478,
											"end": 4484,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4486,
											"end": 4492,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 4535,
											"end": 4537,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 4523,
											"end": 4532,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 4514,
											"end": 4521,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 4510,
											"end": 4533,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 4506,
											"end": 4538,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 4503,
											"end": 4622,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 4503,
											"end": 4622,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "550"
										},
										{
											"begin": 4503,
											"end": 4622,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 4541,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "551"
										},
										{
											"begin": 4541,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 4541,
											"end": 4620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4541,
											"end": 4620,
											"name": "tag",
											"source": 17,
											"value": "551"
										},
										{
											"begin": 4541,
											"end": 4620,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4503,
											"end": 4622,
											"name": "tag",
											"source": 17,
											"value": "550"
										},
										{
											"begin": 4503,
											"end": 4622,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4661,
											"end": 4662,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4686,
											"end": 4739,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "552"
										},
										{
											"begin": 4731,
											"end": 4738,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 4722,
											"end": 4728,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 4711,
											"end": 4720,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 4707,
											"end": 4729,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 4686,
											"end": 4739,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 4686,
											"end": 4739,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4686,
											"end": 4739,
											"name": "tag",
											"source": 17,
											"value": "552"
										},
										{
											"begin": 4686,
											"end": 4739,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4676,
											"end": 4739,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4676,
											"end": 4739,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4632,
											"end": 4749,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4788,
											"end": 4790,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 4814,
											"end": 4867,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "553"
										},
										{
											"begin": 4859,
											"end": 4866,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 4850,
											"end": 4856,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 4839,
											"end": 4848,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 4835,
											"end": 4857,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 4814,
											"end": 4867,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "451"
										},
										{
											"begin": 4814,
											"end": 4867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4814,
											"end": 4867,
											"name": "tag",
											"source": 17,
											"value": "553"
										},
										{
											"begin": 4814,
											"end": 4867,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4804,
											"end": 4867,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4804,
											"end": 4867,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4759,
											"end": 4877,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4410,
											"end": 4884,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4410,
											"end": 4884,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4410,
											"end": 4884,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4410,
											"end": 4884,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4410,
											"end": 4884,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4410,
											"end": 4884,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4890,
											"end": 5509,
											"name": "tag",
											"source": 17,
											"value": "50"
										},
										{
											"begin": 4890,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4967,
											"end": 4973,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 4975,
											"end": 4981,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 4983,
											"end": 4989,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5032,
											"end": 5034,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 5020,
											"end": 5029,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 5011,
											"end": 5018,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5007,
											"end": 5030,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 5003,
											"end": 5035,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 5000,
											"end": 5119,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 5000,
											"end": 5119,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "555"
										},
										{
											"begin": 5000,
											"end": 5119,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 5038,
											"end": 5117,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "556"
										},
										{
											"begin": 5038,
											"end": 5117,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 5038,
											"end": 5117,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5038,
											"end": 5117,
											"name": "tag",
											"source": 17,
											"value": "556"
										},
										{
											"begin": 5038,
											"end": 5117,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5000,
											"end": 5119,
											"name": "tag",
											"source": 17,
											"value": "555"
										},
										{
											"begin": 5000,
											"end": 5119,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5158,
											"end": 5159,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5183,
											"end": 5236,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "557"
										},
										{
											"begin": 5228,
											"end": 5235,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5219,
											"end": 5225,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5208,
											"end": 5217,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 5204,
											"end": 5226,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5183,
											"end": 5236,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 5183,
											"end": 5236,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5183,
											"end": 5236,
											"name": "tag",
											"source": 17,
											"value": "557"
										},
										{
											"begin": 5183,
											"end": 5236,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5173,
											"end": 5236,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 5173,
											"end": 5236,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5129,
											"end": 5246,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5285,
											"end": 5287,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 5311,
											"end": 5364,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "558"
										},
										{
											"begin": 5356,
											"end": 5363,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5347,
											"end": 5353,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5336,
											"end": 5345,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 5332,
											"end": 5354,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5311,
											"end": 5364,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 5311,
											"end": 5364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5311,
											"end": 5364,
											"name": "tag",
											"source": 17,
											"value": "558"
										},
										{
											"begin": 5311,
											"end": 5364,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5301,
											"end": 5364,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5301,
											"end": 5364,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5256,
											"end": 5374,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5413,
											"end": 5415,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 5439,
											"end": 5492,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "559"
										},
										{
											"begin": 5484,
											"end": 5491,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 5475,
											"end": 5481,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5464,
											"end": 5473,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 5460,
											"end": 5482,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5439,
											"end": 5492,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "451"
										},
										{
											"begin": 5439,
											"end": 5492,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5439,
											"end": 5492,
											"name": "tag",
											"source": 17,
											"value": "559"
										},
										{
											"begin": 5439,
											"end": 5492,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5429,
											"end": 5492,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5429,
											"end": 5492,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5384,
											"end": 5502,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4890,
											"end": 5509,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4890,
											"end": 5509,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4890,
											"end": 5509,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4890,
											"end": 5509,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4890,
											"end": 5509,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4890,
											"end": 5509,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5515,
											"end": 5844,
											"name": "tag",
											"source": 17,
											"value": "69"
										},
										{
											"begin": 5515,
											"end": 5844,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5574,
											"end": 5580,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5623,
											"end": 5625,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 5611,
											"end": 5620,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5602,
											"end": 5609,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 5598,
											"end": 5621,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 5594,
											"end": 5626,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 5591,
											"end": 5710,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 5591,
											"end": 5710,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "561"
										},
										{
											"begin": 5591,
											"end": 5710,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 5629,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "562"
										},
										{
											"begin": 5629,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 5629,
											"end": 5708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5629,
											"end": 5708,
											"name": "tag",
											"source": 17,
											"value": "562"
										},
										{
											"begin": 5629,
											"end": 5708,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5591,
											"end": 5710,
											"name": "tag",
											"source": 17,
											"value": "561"
										},
										{
											"begin": 5591,
											"end": 5710,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5749,
											"end": 5750,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5774,
											"end": 5827,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "563"
										},
										{
											"begin": 5819,
											"end": 5826,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 5810,
											"end": 5816,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5799,
											"end": 5808,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 5795,
											"end": 5817,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5774,
											"end": 5827,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 5774,
											"end": 5827,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5774,
											"end": 5827,
											"name": "tag",
											"source": 17,
											"value": "563"
										},
										{
											"begin": 5774,
											"end": 5827,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5764,
											"end": 5827,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5764,
											"end": 5827,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5720,
											"end": 5837,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5515,
											"end": 5844,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5515,
											"end": 5844,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5515,
											"end": 5844,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5515,
											"end": 5844,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5515,
											"end": 5844,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5850,
											"end": 5968,
											"name": "tag",
											"source": 17,
											"value": "457"
										},
										{
											"begin": 5850,
											"end": 5968,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5937,
											"end": 5961,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "565"
										},
										{
											"begin": 5955,
											"end": 5960,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 5937,
											"end": 5961,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "449"
										},
										{
											"begin": 5937,
											"end": 5961,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5937,
											"end": 5961,
											"name": "tag",
											"source": 17,
											"value": "565"
										},
										{
											"begin": 5937,
											"end": 5961,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5932,
											"end": 5935,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5925,
											"end": 5962,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 5850,
											"end": 5968,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5850,
											"end": 5968,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5850,
											"end": 5968,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5974,
											"end": 6196,
											"name": "tag",
											"source": 17,
											"value": "72"
										},
										{
											"begin": 5974,
											"end": 6196,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6067,
											"end": 6071,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6105,
											"end": 6107,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 6094,
											"end": 6103,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6090,
											"end": 6108,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 6082,
											"end": 6108,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6082,
											"end": 6108,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6118,
											"end": 6189,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "567"
										},
										{
											"begin": 6186,
											"end": 6187,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6175,
											"end": 6184,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 6171,
											"end": 6188,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 6162,
											"end": 6168,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 6118,
											"end": 6189,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "457"
										},
										{
											"begin": 6118,
											"end": 6189,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6118,
											"end": 6189,
											"name": "tag",
											"source": 17,
											"value": "567"
										},
										{
											"begin": 6118,
											"end": 6189,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5974,
											"end": 6196,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5974,
											"end": 6196,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5974,
											"end": 6196,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5974,
											"end": 6196,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5974,
											"end": 6196,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6202,
											"end": 6318,
											"name": "tag",
											"source": 17,
											"value": "458"
										},
										{
											"begin": 6202,
											"end": 6318,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6272,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "569"
										},
										{
											"begin": 6287,
											"end": 6292,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6272,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "442"
										},
										{
											"begin": 6272,
											"end": 6293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6272,
											"end": 6293,
											"name": "tag",
											"source": 17,
											"value": "569"
										},
										{
											"begin": 6272,
											"end": 6293,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6265,
											"end": 6270,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6262,
											"end": 6294,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 6252,
											"end": 6312,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "570"
										},
										{
											"begin": 6252,
											"end": 6312,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 6308,
											"end": 6309,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6305,
											"end": 6306,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6298,
											"end": 6310,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 6252,
											"end": 6312,
											"name": "tag",
											"source": 17,
											"value": "570"
										},
										{
											"begin": 6252,
											"end": 6312,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6202,
											"end": 6318,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6202,
											"end": 6318,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6324,
											"end": 6457,
											"name": "tag",
											"source": 17,
											"value": "459"
										},
										{
											"begin": 6324,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6367,
											"end": 6372,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6405,
											"end": 6411,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6392,
											"end": 6412,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 6383,
											"end": 6412,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6383,
											"end": 6412,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6421,
											"end": 6451,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "572"
										},
										{
											"begin": 6445,
											"end": 6450,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6421,
											"end": 6451,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "458"
										},
										{
											"begin": 6421,
											"end": 6451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6421,
											"end": 6451,
											"name": "tag",
											"source": 17,
											"value": "572"
										},
										{
											"begin": 6421,
											"end": 6451,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6324,
											"end": 6457,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6324,
											"end": 6457,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6324,
											"end": 6457,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6324,
											"end": 6457,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6324,
											"end": 6457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6463,
											"end": 6931,
											"name": "tag",
											"source": 17,
											"value": "88"
										},
										{
											"begin": 6463,
											"end": 6931,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6528,
											"end": 6534,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6536,
											"end": 6542,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6585,
											"end": 6587,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 6573,
											"end": 6582,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 6564,
											"end": 6571,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 6560,
											"end": 6583,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 6556,
											"end": 6588,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 6553,
											"end": 6672,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 6553,
											"end": 6672,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "574"
										},
										{
											"begin": 6553,
											"end": 6672,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 6591,
											"end": 6670,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "575"
										},
										{
											"begin": 6591,
											"end": 6670,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 6591,
											"end": 6670,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6591,
											"end": 6670,
											"name": "tag",
											"source": 17,
											"value": "575"
										},
										{
											"begin": 6591,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6553,
											"end": 6672,
											"name": "tag",
											"source": 17,
											"value": "574"
										},
										{
											"begin": 6553,
											"end": 6672,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6711,
											"end": 6712,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6736,
											"end": 6789,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "576"
										},
										{
											"begin": 6781,
											"end": 6788,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 6772,
											"end": 6778,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6761,
											"end": 6770,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 6757,
											"end": 6779,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 6736,
											"end": 6789,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 6736,
											"end": 6789,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6736,
											"end": 6789,
											"name": "tag",
											"source": 17,
											"value": "576"
										},
										{
											"begin": 6736,
											"end": 6789,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6726,
											"end": 6789,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6726,
											"end": 6789,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6682,
											"end": 6799,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6838,
											"end": 6840,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 6864,
											"end": 6914,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "577"
										},
										{
											"begin": 6906,
											"end": 6913,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 6897,
											"end": 6903,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6886,
											"end": 6895,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 6882,
											"end": 6904,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 6864,
											"end": 6914,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "459"
										},
										{
											"begin": 6864,
											"end": 6914,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6864,
											"end": 6914,
											"name": "tag",
											"source": 17,
											"value": "577"
										},
										{
											"begin": 6864,
											"end": 6914,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6854,
											"end": 6914,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6854,
											"end": 6914,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6809,
											"end": 6924,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6463,
											"end": 6931,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6463,
											"end": 6931,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6463,
											"end": 6931,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6463,
											"end": 6931,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6463,
											"end": 6931,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6463,
											"end": 6931,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6937,
											"end": 7054,
											"name": "tag",
											"source": 17,
											"value": "460"
										},
										{
											"begin": 6937,
											"end": 7054,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7046,
											"end": 7047,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7043,
											"end": 7044,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 7036,
											"end": 7048,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 7060,
											"end": 7177,
											"name": "tag",
											"source": 17,
											"value": "461"
										},
										{
											"begin": 7060,
											"end": 7177,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7169,
											"end": 7170,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7166,
											"end": 7167,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 7159,
											"end": 7171,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 7183,
											"end": 7363,
											"name": "tag",
											"source": 17,
											"value": "327"
										},
										{
											"begin": 7183,
											"end": 7363,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7231,
											"end": 7308,
											"name": "PUSH",
											"source": 17,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7228,
											"end": 7229,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7221,
											"end": 7309,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 7328,
											"end": 7332,
											"name": "PUSH",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 7325,
											"end": 7326,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 7318,
											"end": 7333,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 7352,
											"end": 7356,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 7349,
											"end": 7350,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7342,
											"end": 7357,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 7369,
											"end": 7650,
											"name": "tag",
											"source": 17,
											"value": "462"
										},
										{
											"begin": 7369,
											"end": 7650,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7452,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "582"
										},
										{
											"begin": 7474,
											"end": 7478,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7452,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "447"
										},
										{
											"begin": 7452,
											"end": 7479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7452,
											"end": 7479,
											"name": "tag",
											"source": 17,
											"value": "582"
										},
										{
											"begin": 7452,
											"end": 7479,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7444,
											"end": 7450,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7440,
											"end": 7480,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 7582,
											"end": 7588,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7570,
											"end": 7580,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7567,
											"end": 7589,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 7546,
											"end": 7564,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7534,
											"end": 7544,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7531,
											"end": 7565,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 7528,
											"end": 7590,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 7525,
											"end": 7613,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 7525,
											"end": 7613,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "583"
										},
										{
											"begin": 7525,
											"end": 7613,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "584"
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "327"
										},
										{
											"begin": 7593,
											"end": 7611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "tag",
											"source": 17,
											"value": "584"
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7525,
											"end": 7613,
											"name": "tag",
											"source": 17,
											"value": "583"
										},
										{
											"begin": 7525,
											"end": 7613,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7633,
											"end": 7643,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 7629,
											"end": 7631,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 7622,
											"end": 7644,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 7412,
											"end": 7650,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7369,
											"end": 7650,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7369,
											"end": 7650,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7369,
											"end": 7650,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7656,
											"end": 7785,
											"name": "tag",
											"source": 17,
											"value": "463"
										},
										{
											"begin": 7656,
											"end": 7785,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7690,
											"end": 7696,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7717,
											"end": 7737,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "586"
										},
										{
											"begin": 7717,
											"end": 7737,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "436"
										},
										{
											"begin": 7717,
											"end": 7737,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7717,
											"end": 7737,
											"name": "tag",
											"source": 17,
											"value": "586"
										},
										{
											"begin": 7717,
											"end": 7737,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7707,
											"end": 7737,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 7707,
											"end": 7737,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7746,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "587"
										},
										{
											"begin": 7774,
											"end": 7778,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7766,
											"end": 7772,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7746,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "462"
										},
										{
											"begin": 7746,
											"end": 7779,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7746,
											"end": 7779,
											"name": "tag",
											"source": 17,
											"value": "587"
										},
										{
											"begin": 7746,
											"end": 7779,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7656,
											"end": 7785,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 7656,
											"end": 7785,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 7656,
											"end": 7785,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7656,
											"end": 7785,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7791,
											"end": 8098,
											"name": "tag",
											"source": 17,
											"value": "464"
										},
										{
											"begin": 7791,
											"end": 8098,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7852,
											"end": 7856,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7942,
											"end": 7960,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7934,
											"end": 7940,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7931,
											"end": 7961,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 7928,
											"end": 7984,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 7928,
											"end": 7984,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "589"
										},
										{
											"begin": 7928,
											"end": 7984,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "590"
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "327"
										},
										{
											"begin": 7964,
											"end": 7982,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "tag",
											"source": 17,
											"value": "590"
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7928,
											"end": 7984,
											"name": "tag",
											"source": 17,
											"value": "589"
										},
										{
											"begin": 7928,
											"end": 7984,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8002,
											"end": 8031,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "591"
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8002,
											"end": 8031,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "447"
										},
										{
											"begin": 8002,
											"end": 8031,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8002,
											"end": 8031,
											"name": "tag",
											"source": 17,
											"value": "591"
										},
										{
											"begin": 8002,
											"end": 8031,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7994,
											"end": 8031,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 7994,
											"end": 8031,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8086,
											"end": 8090,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 8080,
											"end": 8084,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8076,
											"end": 8091,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8068,
											"end": 8091,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 8068,
											"end": 8091,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7791,
											"end": 8098,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 7791,
											"end": 8098,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 7791,
											"end": 8098,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7791,
											"end": 8098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8104,
											"end": 8250,
											"name": "tag",
											"source": 17,
											"value": "465"
										},
										{
											"begin": 8104,
											"end": 8250,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8201,
											"end": 8207,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8196,
											"end": 8199,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8191,
											"end": 8194,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 8178,
											"end": 8208,
											"name": "CALLDATACOPY",
											"source": 17
										},
										{
											"begin": 8242,
											"end": 8243,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 8233,
											"end": 8239,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 8228,
											"end": 8231,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 8224,
											"end": 8240,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8217,
											"end": 8244,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 8104,
											"end": 8250,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8104,
											"end": 8250,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8104,
											"end": 8250,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8104,
											"end": 8250,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8256,
											"end": 8679,
											"name": "tag",
											"source": 17,
											"value": "466"
										},
										{
											"begin": 8256,
											"end": 8679,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8333,
											"end": 8338,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 8358,
											"end": 8423,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "594"
										},
										{
											"begin": 8374,
											"end": 8422,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "595"
										},
										{
											"begin": 8415,
											"end": 8421,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 8374,
											"end": 8422,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "464"
										},
										{
											"begin": 8374,
											"end": 8422,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8374,
											"end": 8422,
											"name": "tag",
											"source": 17,
											"value": "595"
										},
										{
											"begin": 8374,
											"end": 8422,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8358,
											"end": 8423,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "463"
										},
										{
											"begin": 8358,
											"end": 8423,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8358,
											"end": 8423,
											"name": "tag",
											"source": 17,
											"value": "594"
										},
										{
											"begin": 8358,
											"end": 8423,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8349,
											"end": 8423,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 8349,
											"end": 8423,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8446,
											"end": 8452,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8439,
											"end": 8444,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8432,
											"end": 8453,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 8484,
											"end": 8488,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 8477,
											"end": 8482,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8473,
											"end": 8489,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8522,
											"end": 8525,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 8513,
											"end": 8519,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 8508,
											"end": 8511,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 8504,
											"end": 8520,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8501,
											"end": 8526,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 8498,
											"end": 8610,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 8498,
											"end": 8610,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "596"
										},
										{
											"begin": 8498,
											"end": 8610,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 8529,
											"end": 8608,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "597"
										},
										{
											"begin": 8529,
											"end": 8608,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "461"
										},
										{
											"begin": 8529,
											"end": 8608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8529,
											"end": 8608,
											"name": "tag",
											"source": 17,
											"value": "597"
										},
										{
											"begin": 8529,
											"end": 8608,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8498,
											"end": 8610,
											"name": "tag",
											"source": 17,
											"value": "596"
										},
										{
											"begin": 8498,
											"end": 8610,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8619,
											"end": 8673,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "598"
										},
										{
											"begin": 8666,
											"end": 8672,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 8661,
											"end": 8664,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8656,
											"end": 8659,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 8619,
											"end": 8673,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "465"
										},
										{
											"begin": 8619,
											"end": 8673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8619,
											"end": 8673,
											"name": "tag",
											"source": 17,
											"value": "598"
										},
										{
											"begin": 8619,
											"end": 8673,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8339,
											"end": 8679,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8256,
											"end": 8679,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 8256,
											"end": 8679,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 8256,
											"end": 8679,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8256,
											"end": 8679,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8256,
											"end": 8679,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8256,
											"end": 8679,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8698,
											"end": 9036,
											"name": "tag",
											"source": 17,
											"value": "467"
										},
										{
											"begin": 8698,
											"end": 9036,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8753,
											"end": 8758,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 8802,
											"end": 8805,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 8795,
											"end": 8799,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 8787,
											"end": 8793,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 8783,
											"end": 8800,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8779,
											"end": 8806,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 8769,
											"end": 8891,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "600"
										},
										{
											"begin": 8769,
											"end": 8891,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 8810,
											"end": 8889,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "601"
										},
										{
											"begin": 8810,
											"end": 8889,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "460"
										},
										{
											"begin": 8810,
											"end": 8889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8810,
											"end": 8889,
											"name": "tag",
											"source": 17,
											"value": "601"
										},
										{
											"begin": 8810,
											"end": 8889,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8769,
											"end": 8891,
											"name": "tag",
											"source": 17,
											"value": "600"
										},
										{
											"begin": 8769,
											"end": 8891,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8927,
											"end": 8933,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 8914,
											"end": 8934,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 8952,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "602"
										},
										{
											"begin": 9026,
											"end": 9029,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 9018,
											"end": 9024,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9011,
											"end": 9015,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 9003,
											"end": 9009,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 8999,
											"end": 9016,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 8952,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "466"
										},
										{
											"begin": 8952,
											"end": 9030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8952,
											"end": 9030,
											"name": "tag",
											"source": 17,
											"value": "602"
										},
										{
											"begin": 8952,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 8943,
											"end": 9030,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 8943,
											"end": 9030,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8759,
											"end": 9036,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8698,
											"end": 9036,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 8698,
											"end": 9036,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 8698,
											"end": 9036,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8698,
											"end": 9036,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 8698,
											"end": 9036,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "tag",
											"source": 17,
											"value": "92"
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9137,
											"end": 9143,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 9145,
											"end": 9151,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 9153,
											"end": 9159,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 9161,
											"end": 9167,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 9210,
											"end": 9213,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 9198,
											"end": 9207,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 9189,
											"end": 9196,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 9185,
											"end": 9208,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 9181,
											"end": 9214,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 9178,
											"end": 9298,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 9178,
											"end": 9298,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "604"
										},
										{
											"begin": 9178,
											"end": 9298,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 9217,
											"end": 9296,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "605"
										},
										{
											"begin": 9217,
											"end": 9296,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 9217,
											"end": 9296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9217,
											"end": 9296,
											"name": "tag",
											"source": 17,
											"value": "605"
										},
										{
											"begin": 9217,
											"end": 9296,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9178,
											"end": 9298,
											"name": "tag",
											"source": 17,
											"value": "604"
										},
										{
											"begin": 9178,
											"end": 9298,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9337,
											"end": 9338,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 9362,
											"end": 9415,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "606"
										},
										{
											"begin": 9407,
											"end": 9414,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 9398,
											"end": 9404,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9387,
											"end": 9396,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9362,
											"end": 9415,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 9362,
											"end": 9415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9362,
											"end": 9415,
											"name": "tag",
											"source": 17,
											"value": "606"
										},
										{
											"begin": 9362,
											"end": 9415,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9352,
											"end": 9415,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 9352,
											"end": 9415,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9308,
											"end": 9425,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9464,
											"end": 9466,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 9490,
											"end": 9543,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "607"
										},
										{
											"begin": 9535,
											"end": 9542,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 9526,
											"end": 9532,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9515,
											"end": 9524,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 9511,
											"end": 9533,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9490,
											"end": 9543,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 9490,
											"end": 9543,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9490,
											"end": 9543,
											"name": "tag",
											"source": 17,
											"value": "607"
										},
										{
											"begin": 9490,
											"end": 9543,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9480,
											"end": 9543,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 9480,
											"end": 9543,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9435,
											"end": 9553,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9592,
											"end": 9594,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 9618,
											"end": 9671,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "608"
										},
										{
											"begin": 9663,
											"end": 9670,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 9654,
											"end": 9660,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9643,
											"end": 9652,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 9639,
											"end": 9661,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9618,
											"end": 9671,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "451"
										},
										{
											"begin": 9618,
											"end": 9671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9618,
											"end": 9671,
											"name": "tag",
											"source": 17,
											"value": "608"
										},
										{
											"begin": 9618,
											"end": 9671,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9608,
											"end": 9671,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 9608,
											"end": 9671,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9563,
											"end": 9681,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9748,
											"end": 9750,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 9737,
											"end": 9746,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 9733,
											"end": 9751,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9720,
											"end": 9752,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 9779,
											"end": 9797,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9771,
											"end": 9777,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 9768,
											"end": 9798,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 9765,
											"end": 9882,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 9765,
											"end": 9882,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "609"
										},
										{
											"begin": 9765,
											"end": 9882,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 9801,
											"end": 9880,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "610"
										},
										{
											"begin": 9801,
											"end": 9880,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "438"
										},
										{
											"begin": 9801,
											"end": 9880,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9801,
											"end": 9880,
											"name": "tag",
											"source": 17,
											"value": "610"
										},
										{
											"begin": 9801,
											"end": 9880,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9765,
											"end": 9882,
											"name": "tag",
											"source": 17,
											"value": "609"
										},
										{
											"begin": 9765,
											"end": 9882,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9906,
											"end": 9968,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "611"
										},
										{
											"begin": 9960,
											"end": 9967,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 9951,
											"end": 9957,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 9940,
											"end": 9949,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 9936,
											"end": 9958,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 9906,
											"end": 9968,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "467"
										},
										{
											"begin": 9906,
											"end": 9968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9906,
											"end": 9968,
											"name": "tag",
											"source": 17,
											"value": "611"
										},
										{
											"begin": 9906,
											"end": 9968,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 9896,
											"end": 9968,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 9896,
											"end": 9968,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9691,
											"end": 9978,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9042,
											"end": 9985,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9991,
											"end": 10465,
											"name": "tag",
											"source": 17,
											"value": "103"
										},
										{
											"begin": 9991,
											"end": 10465,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10059,
											"end": 10065,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10067,
											"end": 10073,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 10116,
											"end": 10118,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 10104,
											"end": 10113,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 10095,
											"end": 10102,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 10091,
											"end": 10114,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 10087,
											"end": 10119,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 10084,
											"end": 10203,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 10084,
											"end": 10203,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "613"
										},
										{
											"begin": 10084,
											"end": 10203,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 10122,
											"end": 10201,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "614"
										},
										{
											"begin": 10122,
											"end": 10201,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 10122,
											"end": 10201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10122,
											"end": 10201,
											"name": "tag",
											"source": 17,
											"value": "614"
										},
										{
											"begin": 10122,
											"end": 10201,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10084,
											"end": 10203,
											"name": "tag",
											"source": 17,
											"value": "613"
										},
										{
											"begin": 10084,
											"end": 10203,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10242,
											"end": 10243,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10267,
											"end": 10320,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "615"
										},
										{
											"begin": 10312,
											"end": 10319,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 10303,
											"end": 10309,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10292,
											"end": 10301,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 10288,
											"end": 10310,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 10267,
											"end": 10320,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 10267,
											"end": 10320,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10267,
											"end": 10320,
											"name": "tag",
											"source": 17,
											"value": "615"
										},
										{
											"begin": 10267,
											"end": 10320,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10257,
											"end": 10320,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 10257,
											"end": 10320,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10213,
											"end": 10330,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10369,
											"end": 10371,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 10395,
											"end": 10448,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "616"
										},
										{
											"begin": 10440,
											"end": 10447,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 10431,
											"end": 10437,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10420,
											"end": 10429,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 10416,
											"end": 10438,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 10395,
											"end": 10448,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "456"
										},
										{
											"begin": 10395,
											"end": 10448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10395,
											"end": 10448,
											"name": "tag",
											"source": 17,
											"value": "616"
										},
										{
											"begin": 10395,
											"end": 10448,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10385,
											"end": 10448,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 10385,
											"end": 10448,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10340,
											"end": 10458,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9991,
											"end": 10465,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 9991,
											"end": 10465,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9991,
											"end": 10465,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 9991,
											"end": 10465,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 9991,
											"end": 10465,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 9991,
											"end": 10465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10471,
											"end": 10651,
											"name": "tag",
											"source": 17,
											"value": "468"
										},
										{
											"begin": 10471,
											"end": 10651,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10519,
											"end": 10596,
											"name": "PUSH",
											"source": 17,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10516,
											"end": 10517,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10509,
											"end": 10597,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 10616,
											"end": 10620,
											"name": "PUSH",
											"source": 17,
											"value": "22"
										},
										{
											"begin": 10613,
											"end": 10614,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 10606,
											"end": 10621,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 10640,
											"end": 10644,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 10637,
											"end": 10638,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10630,
											"end": 10645,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 10657,
											"end": 10977,
											"name": "tag",
											"source": 17,
											"value": "118"
										},
										{
											"begin": 10657,
											"end": 10977,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10701,
											"end": 10707,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 10738,
											"end": 10739,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 10732,
											"end": 10736,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10728,
											"end": 10740,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 10718,
											"end": 10740,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 10718,
											"end": 10740,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10785,
											"end": 10786,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 10779,
											"end": 10783,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10775,
											"end": 10787,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 10806,
											"end": 10824,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 10796,
											"end": 10877,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "619"
										},
										{
											"begin": 10796,
											"end": 10877,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 10862,
											"end": 10866,
											"name": "PUSH",
											"source": 17,
											"value": "7F"
										},
										{
											"begin": 10854,
											"end": 10860,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10850,
											"end": 10867,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 10840,
											"end": 10867,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 10840,
											"end": 10867,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10796,
											"end": 10877,
											"name": "tag",
											"source": 17,
											"value": "619"
										},
										{
											"begin": 10796,
											"end": 10877,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10924,
											"end": 10926,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 10916,
											"end": 10922,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 10913,
											"end": 10927,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 10893,
											"end": 10911,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 10890,
											"end": 10928,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 10887,
											"end": 10971,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "620"
										},
										{
											"begin": 10887,
											"end": 10971,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 10943,
											"end": 10961,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "621"
										},
										{
											"begin": 10943,
											"end": 10961,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "468"
										},
										{
											"begin": 10943,
											"end": 10961,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10943,
											"end": 10961,
											"name": "tag",
											"source": 17,
											"value": "621"
										},
										{
											"begin": 10943,
											"end": 10961,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10887,
											"end": 10971,
											"name": "tag",
											"source": 17,
											"value": "620"
										},
										{
											"begin": 10887,
											"end": 10971,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10708,
											"end": 10977,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10657,
											"end": 10977,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 10657,
											"end": 10977,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 10657,
											"end": 10977,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10657,
											"end": 10977,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 10983,
											"end": 11425,
											"name": "tag",
											"source": 17,
											"value": "141"
										},
										{
											"begin": 10983,
											"end": 11425,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11132,
											"end": 11136,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11170,
											"end": 11172,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 11159,
											"end": 11168,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 11155,
											"end": 11173,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 11147,
											"end": 11173,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11147,
											"end": 11173,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11183,
											"end": 11254,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "623"
										},
										{
											"begin": 11251,
											"end": 11252,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11240,
											"end": 11249,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 11236,
											"end": 11253,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 11227,
											"end": 11233,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 11183,
											"end": 11254,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "454"
										},
										{
											"begin": 11183,
											"end": 11254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11183,
											"end": 11254,
											"name": "tag",
											"source": 17,
											"value": "623"
										},
										{
											"begin": 11183,
											"end": 11254,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11264,
											"end": 11336,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "624"
										},
										{
											"begin": 11332,
											"end": 11334,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 11321,
											"end": 11330,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 11317,
											"end": 11335,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 11308,
											"end": 11314,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 11264,
											"end": 11336,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "457"
										},
										{
											"begin": 11264,
											"end": 11336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11264,
											"end": 11336,
											"name": "tag",
											"source": 17,
											"value": "624"
										},
										{
											"begin": 11264,
											"end": 11336,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11346,
											"end": 11418,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "625"
										},
										{
											"begin": 11414,
											"end": 11416,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 11403,
											"end": 11412,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 11399,
											"end": 11417,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 11390,
											"end": 11396,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 11346,
											"end": 11418,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "454"
										},
										{
											"begin": 11346,
											"end": 11418,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11346,
											"end": 11418,
											"name": "tag",
											"source": 17,
											"value": "625"
										},
										{
											"begin": 11346,
											"end": 11418,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 10983,
											"end": 11425,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 10983,
											"end": 11425,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 10983,
											"end": 11425,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10983,
											"end": 11425,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10983,
											"end": 11425,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10983,
											"end": 11425,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 10983,
											"end": 11425,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11431,
											"end": 11516,
											"name": "tag",
											"source": 17,
											"value": "469"
										},
										{
											"begin": 11431,
											"end": 11516,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11476,
											"end": 11483,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11505,
											"end": 11510,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 11494,
											"end": 11510,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11494,
											"end": 11510,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11431,
											"end": 11516,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 11431,
											"end": 11516,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11431,
											"end": 11516,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11431,
											"end": 11516,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11522,
											"end": 11623,
											"name": "tag",
											"source": 17,
											"value": "470"
										},
										{
											"begin": 11522,
											"end": 11623,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11558,
											"end": 11565,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11598,
											"end": 11616,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11591,
											"end": 11596,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 11587,
											"end": 11617,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 11576,
											"end": 11617,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11576,
											"end": 11617,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11522,
											"end": 11623,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 11522,
											"end": 11623,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11522,
											"end": 11623,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11522,
											"end": 11623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11629,
											"end": 11689,
											"name": "tag",
											"source": 17,
											"value": "471"
										},
										{
											"begin": 11629,
											"end": 11689,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11657,
											"end": 11660,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11678,
											"end": 11683,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 11671,
											"end": 11683,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11671,
											"end": 11683,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11629,
											"end": 11689,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 11629,
											"end": 11689,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11629,
											"end": 11689,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11629,
											"end": 11689,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11695,
											"end": 11851,
											"name": "tag",
											"source": 17,
											"value": "472"
										},
										{
											"begin": 11695,
											"end": 11851,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11752,
											"end": 11761,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 11785,
											"end": 11845,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "630"
										},
										{
											"begin": 11802,
											"end": 11844,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "631"
										},
										{
											"begin": 11811,
											"end": 11843,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "632"
										},
										{
											"begin": 11837,
											"end": 11842,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 11811,
											"end": 11843,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "469"
										},
										{
											"begin": 11811,
											"end": 11843,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11811,
											"end": 11843,
											"name": "tag",
											"source": 17,
											"value": "632"
										},
										{
											"begin": 11811,
											"end": 11843,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11802,
											"end": 11844,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "471"
										},
										{
											"begin": 11802,
											"end": 11844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11802,
											"end": 11844,
											"name": "tag",
											"source": 17,
											"value": "631"
										},
										{
											"begin": 11802,
											"end": 11844,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11785,
											"end": 11845,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "470"
										},
										{
											"begin": 11785,
											"end": 11845,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11785,
											"end": 11845,
											"name": "tag",
											"source": 17,
											"value": "630"
										},
										{
											"begin": 11785,
											"end": 11845,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11772,
											"end": 11845,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11772,
											"end": 11845,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11695,
											"end": 11851,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 11695,
											"end": 11851,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 11695,
											"end": 11851,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11695,
											"end": 11851,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11857,
											"end": 12002,
											"name": "tag",
											"source": 17,
											"value": "473"
										},
										{
											"begin": 11857,
											"end": 12002,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11951,
											"end": 11995,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "634"
										},
										{
											"begin": 11989,
											"end": 11994,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 11951,
											"end": 11995,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "472"
										},
										{
											"begin": 11951,
											"end": 11995,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 11951,
											"end": 11995,
											"name": "tag",
											"source": 17,
											"value": "634"
										},
										{
											"begin": 11951,
											"end": 11995,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 11946,
											"end": 11949,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 11939,
											"end": 11996,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 11857,
											"end": 12002,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11857,
											"end": 12002,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 11857,
											"end": 12002,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 12008,
											"end": 12244,
											"name": "tag",
											"source": 17,
											"value": "214"
										},
										{
											"begin": 12008,
											"end": 12244,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12108,
											"end": 12112,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 12146,
											"end": 12148,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 12135,
											"end": 12144,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 12131,
											"end": 12149,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 12123,
											"end": 12149,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 12123,
											"end": 12149,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12159,
											"end": 12237,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "636"
										},
										{
											"begin": 12234,
											"end": 12235,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 12223,
											"end": 12232,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 12219,
											"end": 12236,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 12210,
											"end": 12216,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 12159,
											"end": 12237,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "473"
										},
										{
											"begin": 12159,
											"end": 12237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 12159,
											"end": 12237,
											"name": "tag",
											"source": 17,
											"value": "636"
										},
										{
											"begin": 12159,
											"end": 12237,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12008,
											"end": 12244,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 12008,
											"end": 12244,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 12008,
											"end": 12244,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12008,
											"end": 12244,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12008,
											"end": 12244,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 12250,
											"end": 12398,
											"name": "tag",
											"source": 17,
											"value": "474"
										},
										{
											"begin": 12250,
											"end": 12398,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12352,
											"end": 12363,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 12389,
											"end": 12392,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 12374,
											"end": 12392,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 12374,
											"end": 12392,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12250,
											"end": 12398,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 12250,
											"end": 12398,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 12250,
											"end": 12398,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12250,
											"end": 12398,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12250,
											"end": 12398,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 12404,
											"end": 12794,
											"name": "tag",
											"source": 17,
											"value": "475"
										},
										{
											"begin": 12404,
											"end": 12794,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12510,
											"end": 12513,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 12538,
											"end": 12577,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "639"
										},
										{
											"begin": 12571,
											"end": 12576,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 12538,
											"end": 12577,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "444"
										},
										{
											"begin": 12538,
											"end": 12577,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 12538,
											"end": 12577,
											"name": "tag",
											"source": 17,
											"value": "639"
										},
										{
											"begin": 12538,
											"end": 12577,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12593,
											"end": 12682,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "640"
										},
										{
											"begin": 12675,
											"end": 12681,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 12670,
											"end": 12673,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 12593,
											"end": 12682,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "474"
										},
										{
											"begin": 12593,
											"end": 12682,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 12593,
											"end": 12682,
											"name": "tag",
											"source": 17,
											"value": "640"
										},
										{
											"begin": 12593,
											"end": 12682,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12586,
											"end": 12682,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 12586,
											"end": 12682,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12691,
											"end": 12756,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "641"
										},
										{
											"begin": 12749,
											"end": 12755,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 12744,
											"end": 12747,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 12737,
											"end": 12741,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 12730,
											"end": 12735,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 12726,
											"end": 12742,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 12691,
											"end": 12756,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "446"
										},
										{
											"begin": 12691,
											"end": 12756,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 12691,
											"end": 12756,
											"name": "tag",
											"source": 17,
											"value": "641"
										},
										{
											"begin": 12691,
											"end": 12756,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12781,
											"end": 12787,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 12772,
											"end": 12788,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 12765,
											"end": 12788,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 12765,
											"end": 12788,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12514,
											"end": 12794,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12404,
											"end": 12794,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 12404,
											"end": 12794,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 12404,
											"end": 12794,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12404,
											"end": 12794,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12404,
											"end": 12794,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 12800,
											"end": 13235,
											"name": "tag",
											"source": 17,
											"value": "224"
										},
										{
											"begin": 12800,
											"end": 13235,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12980,
											"end": 12983,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 13002,
											"end": 13097,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "643"
										},
										{
											"begin": 13093,
											"end": 13096,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 13084,
											"end": 13090,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 13002,
											"end": 13097,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "475"
										},
										{
											"begin": 13002,
											"end": 13097,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13002,
											"end": 13097,
											"name": "tag",
											"source": 17,
											"value": "643"
										},
										{
											"begin": 13002,
											"end": 13097,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 12995,
											"end": 13097,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 12995,
											"end": 13097,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13114,
											"end": 13209,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "644"
										},
										{
											"begin": 13205,
											"end": 13208,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 13196,
											"end": 13202,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 13114,
											"end": 13209,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "475"
										},
										{
											"begin": 13114,
											"end": 13209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13114,
											"end": 13209,
											"name": "tag",
											"source": 17,
											"value": "644"
										},
										{
											"begin": 13114,
											"end": 13209,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 13107,
											"end": 13209,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 13107,
											"end": 13209,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13226,
											"end": 13229,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 13219,
											"end": 13229,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 13219,
											"end": 13229,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12800,
											"end": 13235,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 12800,
											"end": 13235,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 12800,
											"end": 13235,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12800,
											"end": 13235,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12800,
											"end": 13235,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 12800,
											"end": 13235,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13241,
											"end": 13339,
											"name": "tag",
											"source": 17,
											"value": "476"
										},
										{
											"begin": 13241,
											"end": 13339,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 13292,
											"end": 13298,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 13326,
											"end": 13331,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 13320,
											"end": 13332,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 13310,
											"end": 13332,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 13310,
											"end": 13332,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13241,
											"end": 13339,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 13241,
											"end": 13339,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 13241,
											"end": 13339,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13241,
											"end": 13339,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13345,
											"end": 13513,
											"name": "tag",
											"source": 17,
											"value": "477"
										},
										{
											"begin": 13345,
											"end": 13513,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 13428,
											"end": 13439,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 13462,
											"end": 13468,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 13457,
											"end": 13460,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 13450,
											"end": 13469,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 13502,
											"end": 13506,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 13497,
											"end": 13500,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 13493,
											"end": 13507,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 13478,
											"end": 13507,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 13478,
											"end": 13507,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13345,
											"end": 13513,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 13345,
											"end": 13513,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 13345,
											"end": 13513,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13345,
											"end": 13513,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13345,
											"end": 13513,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13519,
											"end": 13892,
											"name": "tag",
											"source": 17,
											"value": "478"
										},
										{
											"begin": 13519,
											"end": 13892,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 13605,
											"end": 13608,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 13633,
											"end": 13671,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "648"
										},
										{
											"begin": 13665,
											"end": 13670,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 13633,
											"end": 13671,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "476"
										},
										{
											"begin": 13633,
											"end": 13671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13633,
											"end": 13671,
											"name": "tag",
											"source": 17,
											"value": "648"
										},
										{
											"begin": 13633,
											"end": 13671,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 13687,
											"end": 13757,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "649"
										},
										{
											"begin": 13750,
											"end": 13756,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 13745,
											"end": 13748,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 13687,
											"end": 13757,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "477"
										},
										{
											"begin": 13687,
											"end": 13757,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13687,
											"end": 13757,
											"name": "tag",
											"source": 17,
											"value": "649"
										},
										{
											"begin": 13687,
											"end": 13757,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 13680,
											"end": 13757,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 13680,
											"end": 13757,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13766,
											"end": 13831,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "650"
										},
										{
											"begin": 13824,
											"end": 13830,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 13819,
											"end": 13822,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 13812,
											"end": 13816,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 13805,
											"end": 13810,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 13801,
											"end": 13817,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 13766,
											"end": 13831,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "446"
										},
										{
											"begin": 13766,
											"end": 13831,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13766,
											"end": 13831,
											"name": "tag",
											"source": 17,
											"value": "650"
										},
										{
											"begin": 13766,
											"end": 13831,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 13856,
											"end": 13885,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "651"
										},
										{
											"begin": 13878,
											"end": 13884,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 13856,
											"end": 13885,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "447"
										},
										{
											"begin": 13856,
											"end": 13885,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13856,
											"end": 13885,
											"name": "tag",
											"source": 17,
											"value": "651"
										},
										{
											"begin": 13856,
											"end": 13885,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 13851,
											"end": 13854,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 13847,
											"end": 13886,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 13840,
											"end": 13886,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 13840,
											"end": 13886,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13609,
											"end": 13892,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13519,
											"end": 13892,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 13519,
											"end": 13892,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 13519,
											"end": 13892,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13519,
											"end": 13892,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13519,
											"end": 13892,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "tag",
											"source": 17,
											"value": "285"
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14093,
											"end": 14097,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 14131,
											"end": 14134,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 14120,
											"end": 14129,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 14116,
											"end": 14135,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 14108,
											"end": 14135,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 14108,
											"end": 14135,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 14145,
											"end": 14216,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "653"
										},
										{
											"begin": 14213,
											"end": 14214,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 14202,
											"end": 14211,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 14198,
											"end": 14215,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 14189,
											"end": 14195,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 14145,
											"end": 14216,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "454"
										},
										{
											"begin": 14145,
											"end": 14216,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14145,
											"end": 14216,
											"name": "tag",
											"source": 17,
											"value": "653"
										},
										{
											"begin": 14145,
											"end": 14216,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14226,
											"end": 14298,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "654"
										},
										{
											"begin": 14294,
											"end": 14296,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 14283,
											"end": 14292,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 14279,
											"end": 14297,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 14270,
											"end": 14276,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 14226,
											"end": 14298,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "454"
										},
										{
											"begin": 14226,
											"end": 14298,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14226,
											"end": 14298,
											"name": "tag",
											"source": 17,
											"value": "654"
										},
										{
											"begin": 14226,
											"end": 14298,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14308,
											"end": 14380,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "655"
										},
										{
											"begin": 14376,
											"end": 14378,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 14365,
											"end": 14374,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 14361,
											"end": 14379,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 14352,
											"end": 14358,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 14308,
											"end": 14380,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "457"
										},
										{
											"begin": 14308,
											"end": 14380,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14308,
											"end": 14380,
											"name": "tag",
											"source": 17,
											"value": "655"
										},
										{
											"begin": 14308,
											"end": 14380,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14427,
											"end": 14436,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 14421,
											"end": 14425,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 14417,
											"end": 14437,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 14412,
											"end": 14414,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 14401,
											"end": 14410,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 14397,
											"end": 14415,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 14390,
											"end": 14438,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 14455,
											"end": 14531,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "656"
										},
										{
											"begin": 14526,
											"end": 14530,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 14517,
											"end": 14523,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 14455,
											"end": 14531,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "478"
										},
										{
											"begin": 14455,
											"end": 14531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14455,
											"end": 14531,
											"name": "tag",
											"source": 17,
											"value": "656"
										},
										{
											"begin": 14455,
											"end": 14531,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14447,
											"end": 14531,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 14447,
											"end": 14531,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 13898,
											"end": 14538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14544,
											"end": 14685,
											"name": "tag",
											"source": 17,
											"value": "479"
										},
										{
											"begin": 14544,
											"end": 14685,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14600,
											"end": 14605,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 14631,
											"end": 14637,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 14625,
											"end": 14638,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 14616,
											"end": 14638,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 14616,
											"end": 14638,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 14647,
											"end": 14679,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "658"
										},
										{
											"begin": 14673,
											"end": 14678,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 14647,
											"end": 14679,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "440"
										},
										{
											"begin": 14647,
											"end": 14679,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14647,
											"end": 14679,
											"name": "tag",
											"source": 17,
											"value": "658"
										},
										{
											"begin": 14647,
											"end": 14679,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14544,
											"end": 14685,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 14544,
											"end": 14685,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 14544,
											"end": 14685,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 14544,
											"end": 14685,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 14544,
											"end": 14685,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14691,
											"end": 15040,
											"name": "tag",
											"source": 17,
											"value": "288"
										},
										{
											"begin": 14691,
											"end": 15040,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14760,
											"end": 14766,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 14809,
											"end": 14811,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 14797,
											"end": 14806,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 14788,
											"end": 14795,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 14784,
											"end": 14807,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 14780,
											"end": 14812,
											"name": "SLT",
											"source": 17
										},
										{
											"begin": 14777,
											"end": 14896,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 14777,
											"end": 14896,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "660"
										},
										{
											"begin": 14777,
											"end": 14896,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 14815,
											"end": 14894,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "661"
										},
										{
											"begin": 14815,
											"end": 14894,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "437"
										},
										{
											"begin": 14815,
											"end": 14894,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14815,
											"end": 14894,
											"name": "tag",
											"source": 17,
											"value": "661"
										},
										{
											"begin": 14815,
											"end": 14894,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14777,
											"end": 14896,
											"name": "tag",
											"source": 17,
											"value": "660"
										},
										{
											"begin": 14777,
											"end": 14896,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14935,
											"end": 14936,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 14960,
											"end": 15023,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "662"
										},
										{
											"begin": 15015,
											"end": 15022,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 15006,
											"end": 15012,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 14995,
											"end": 15004,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 14991,
											"end": 15013,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 14960,
											"end": 15023,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "479"
										},
										{
											"begin": 14960,
											"end": 15023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 14960,
											"end": 15023,
											"name": "tag",
											"source": 17,
											"value": "662"
										},
										{
											"begin": 14960,
											"end": 15023,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 14950,
											"end": 15023,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 14950,
											"end": 15023,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 14906,
											"end": 15033,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 14691,
											"end": 15040,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 14691,
											"end": 15040,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 14691,
											"end": 15040,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 14691,
											"end": 15040,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 14691,
											"end": 15040,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 15046,
											"end": 15226,
											"name": "tag",
											"source": 17,
											"value": "333"
										},
										{
											"begin": 15046,
											"end": 15226,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 15094,
											"end": 15171,
											"name": "PUSH",
											"source": 17,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15091,
											"end": 15092,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 15084,
											"end": 15172,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 15191,
											"end": 15195,
											"name": "PUSH",
											"source": 17,
											"value": "12"
										},
										{
											"begin": 15188,
											"end": 15189,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 15181,
											"end": 15196,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 15215,
											"end": 15219,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 15212,
											"end": 15213,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 15205,
											"end": 15220,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 15232,
											"end": 15373,
											"name": "tag",
											"source": 17,
											"value": "480"
										},
										{
											"begin": 15232,
											"end": 15373,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 15281,
											"end": 15285,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 15304,
											"end": 15307,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 15296,
											"end": 15307,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 15296,
											"end": 15307,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15327,
											"end": 15330,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 15324,
											"end": 15325,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 15317,
											"end": 15331,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 15361,
											"end": 15365,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 15358,
											"end": 15359,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 15348,
											"end": 15366,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 15340,
											"end": 15366,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 15340,
											"end": 15366,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15232,
											"end": 15373,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 15232,
											"end": 15373,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 15232,
											"end": 15373,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15232,
											"end": 15373,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 15379,
											"end": 15472,
											"name": "tag",
											"source": 17,
											"value": "481"
										},
										{
											"begin": 15379,
											"end": 15472,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 15416,
											"end": 15422,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 15463,
											"end": 15465,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 15458,
											"end": 15460,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 15451,
											"end": 15456,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 15447,
											"end": 15461,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 15443,
											"end": 15466,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 15433,
											"end": 15466,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 15433,
											"end": 15466,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15379,
											"end": 15472,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 15379,
											"end": 15472,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 15379,
											"end": 15472,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15379,
											"end": 15472,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 15478,
											"end": 15585,
											"name": "tag",
											"source": 17,
											"value": "482"
										},
										{
											"begin": 15478,
											"end": 15585,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 15522,
											"end": 15530,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 15572,
											"end": 15577,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 15566,
											"end": 15570,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 15562,
											"end": 15578,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 15541,
											"end": 15578,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 15541,
											"end": 15578,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15478,
											"end": 15585,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 15478,
											"end": 15585,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 15478,
											"end": 15585,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15478,
											"end": 15585,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15478,
											"end": 15585,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 15591,
											"end": 15984,
											"name": "tag",
											"source": 17,
											"value": "483"
										},
										{
											"begin": 15591,
											"end": 15984,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 15660,
											"end": 15666,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 15710,
											"end": 15711,
											"name": "PUSH",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 15698,
											"end": 15708,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 15694,
											"end": 15712,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 15733,
											"end": 15830,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "668"
										},
										{
											"begin": 15763,
											"end": 15829,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15752,
											"end": 15761,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 15733,
											"end": 15830,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "482"
										},
										{
											"begin": 15733,
											"end": 15830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 15733,
											"end": 15830,
											"name": "tag",
											"source": 17,
											"value": "668"
										},
										{
											"begin": 15733,
											"end": 15830,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 15851,
											"end": 15890,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "669"
										},
										{
											"begin": 15881,
											"end": 15889,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 15870,
											"end": 15879,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 15851,
											"end": 15890,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "482"
										},
										{
											"begin": 15851,
											"end": 15890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 15851,
											"end": 15890,
											"name": "tag",
											"source": 17,
											"value": "669"
										},
										{
											"begin": 15851,
											"end": 15890,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 15839,
											"end": 15890,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 15839,
											"end": 15890,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15923,
											"end": 15927,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 15919,
											"end": 15928,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 15912,
											"end": 15917,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 15908,
											"end": 15929,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 15899,
											"end": 15929,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 15899,
											"end": 15929,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15972,
											"end": 15976,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 15962,
											"end": 15970,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 15958,
											"end": 15977,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 15951,
											"end": 15956,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 15948,
											"end": 15978,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 15938,
											"end": 15978,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 15938,
											"end": 15978,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15667,
											"end": 15984,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15667,
											"end": 15984,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15591,
											"end": 15984,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 15591,
											"end": 15984,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 15591,
											"end": 15984,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15591,
											"end": 15984,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15591,
											"end": 15984,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15591,
											"end": 15984,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 15990,
											"end": 16132,
											"name": "tag",
											"source": 17,
											"value": "484"
										},
										{
											"begin": 15990,
											"end": 16132,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16040,
											"end": 16049,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 16073,
											"end": 16126,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "671"
										},
										{
											"begin": 16091,
											"end": 16125,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "672"
										},
										{
											"begin": 16100,
											"end": 16124,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "673"
										},
										{
											"begin": 16118,
											"end": 16123,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 16100,
											"end": 16124,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "449"
										},
										{
											"begin": 16100,
											"end": 16124,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16100,
											"end": 16124,
											"name": "tag",
											"source": 17,
											"value": "673"
										},
										{
											"begin": 16100,
											"end": 16124,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16091,
											"end": 16125,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "471"
										},
										{
											"begin": 16091,
											"end": 16125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16091,
											"end": 16125,
											"name": "tag",
											"source": 17,
											"value": "672"
										},
										{
											"begin": 16091,
											"end": 16125,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16073,
											"end": 16126,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "449"
										},
										{
											"begin": 16073,
											"end": 16126,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16073,
											"end": 16126,
											"name": "tag",
											"source": 17,
											"value": "671"
										},
										{
											"begin": 16073,
											"end": 16126,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16060,
											"end": 16126,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 16060,
											"end": 16126,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15990,
											"end": 16132,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 15990,
											"end": 16132,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 15990,
											"end": 16132,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 15990,
											"end": 16132,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16138,
											"end": 16213,
											"name": "tag",
											"source": 17,
											"value": "485"
										},
										{
											"begin": 16138,
											"end": 16213,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16181,
											"end": 16184,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 16202,
											"end": 16207,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 16195,
											"end": 16207,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 16195,
											"end": 16207,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16138,
											"end": 16213,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 16138,
											"end": 16213,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 16138,
											"end": 16213,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16138,
											"end": 16213,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16219,
											"end": 16488,
											"name": "tag",
											"source": 17,
											"value": "486"
										},
										{
											"begin": 16219,
											"end": 16488,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16329,
											"end": 16368,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "676"
										},
										{
											"begin": 16360,
											"end": 16367,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 16329,
											"end": 16368,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "484"
										},
										{
											"begin": 16329,
											"end": 16368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16329,
											"end": 16368,
											"name": "tag",
											"source": 17,
											"value": "676"
										},
										{
											"begin": 16329,
											"end": 16368,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16390,
											"end": 16481,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "677"
										},
										{
											"begin": 16439,
											"end": 16480,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "678"
										},
										{
											"begin": 16463,
											"end": 16479,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 16439,
											"end": 16480,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "485"
										},
										{
											"begin": 16439,
											"end": 16480,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16439,
											"end": 16480,
											"name": "tag",
											"source": 17,
											"value": "678"
										},
										{
											"begin": 16439,
											"end": 16480,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16431,
											"end": 16437,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 16424,
											"end": 16428,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 16418,
											"end": 16429,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 16390,
											"end": 16481,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "483"
										},
										{
											"begin": 16390,
											"end": 16481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16390,
											"end": 16481,
											"name": "tag",
											"source": 17,
											"value": "677"
										},
										{
											"begin": 16390,
											"end": 16481,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16384,
											"end": 16388,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 16377,
											"end": 16482,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 16295,
											"end": 16488,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16219,
											"end": 16488,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16219,
											"end": 16488,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16219,
											"end": 16488,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16219,
											"end": 16488,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16494,
											"end": 16567,
											"name": "tag",
											"source": 17,
											"value": "487"
										},
										{
											"begin": 16494,
											"end": 16567,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16539,
											"end": 16542,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 16494,
											"end": 16567,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 16494,
											"end": 16567,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16573,
											"end": 16762,
											"name": "tag",
											"source": 17,
											"value": "488"
										},
										{
											"begin": 16573,
											"end": 16762,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16650,
											"end": 16682,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "681"
										},
										{
											"begin": 16650,
											"end": 16682,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "487"
										},
										{
											"begin": 16650,
											"end": 16682,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16650,
											"end": 16682,
											"name": "tag",
											"source": 17,
											"value": "681"
										},
										{
											"begin": 16650,
											"end": 16682,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16691,
											"end": 16756,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "682"
										},
										{
											"begin": 16749,
											"end": 16755,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 16741,
											"end": 16747,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 16735,
											"end": 16739,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 16691,
											"end": 16756,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "486"
										},
										{
											"begin": 16691,
											"end": 16756,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16691,
											"end": 16756,
											"name": "tag",
											"source": 17,
											"value": "682"
										},
										{
											"begin": 16691,
											"end": 16756,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16626,
											"end": 16762,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16573,
											"end": 16762,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16573,
											"end": 16762,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16573,
											"end": 16762,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16768,
											"end": 16954,
											"name": "tag",
											"source": 17,
											"value": "489"
										},
										{
											"begin": 16768,
											"end": 16954,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "tag",
											"source": 17,
											"value": "684"
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16845,
											"end": 16848,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 16838,
											"end": 16843,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 16835,
											"end": 16849,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "686"
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 16899,
											"end": 16938,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "687"
										},
										{
											"begin": 16936,
											"end": 16937,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 16929,
											"end": 16934,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 16899,
											"end": 16938,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "488"
										},
										{
											"begin": 16899,
											"end": 16938,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16899,
											"end": 16938,
											"name": "tag",
											"source": 17,
											"value": "687"
										},
										{
											"begin": 16899,
											"end": 16938,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16872,
											"end": 16873,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 16865,
											"end": 16870,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 16861,
											"end": 16874,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 16852,
											"end": 16874,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 16852,
											"end": 16874,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "684"
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "tag",
											"source": 17,
											"value": "686"
										},
										{
											"begin": 16828,
											"end": 16948,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16768,
											"end": 16954,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16768,
											"end": 16954,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16768,
											"end": 16954,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 16960,
											"end": 17503,
											"name": "tag",
											"source": 17,
											"value": "490"
										},
										{
											"begin": 16960,
											"end": 17503,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17061,
											"end": 17063,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 17056,
											"end": 17059,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 17053,
											"end": 17064,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 17050,
											"end": 17496,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 17050,
											"end": 17496,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "689"
										},
										{
											"begin": 17050,
											"end": 17496,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 17095,
											"end": 17133,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "690"
										},
										{
											"begin": 17127,
											"end": 17132,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 17095,
											"end": 17133,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "480"
										},
										{
											"begin": 17095,
											"end": 17133,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 17095,
											"end": 17133,
											"name": "tag",
											"source": 17,
											"value": "690"
										},
										{
											"begin": 17095,
											"end": 17133,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17179,
											"end": 17208,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "691"
										},
										{
											"begin": 17197,
											"end": 17207,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 17179,
											"end": 17208,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "481"
										},
										{
											"begin": 17179,
											"end": 17208,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 17179,
											"end": 17208,
											"name": "tag",
											"source": 17,
											"value": "691"
										},
										{
											"begin": 17179,
											"end": 17208,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17169,
											"end": 17177,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 17165,
											"end": 17209,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 17362,
											"end": 17364,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 17350,
											"end": 17360,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 17347,
											"end": 17365,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 17344,
											"end": 17393,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 17344,
											"end": 17393,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "692"
										},
										{
											"begin": 17344,
											"end": 17393,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 17383,
											"end": 17391,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 17368,
											"end": 17391,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 17368,
											"end": 17391,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17344,
											"end": 17393,
											"name": "tag",
											"source": 17,
											"value": "692"
										},
										{
											"begin": 17344,
											"end": 17393,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17406,
											"end": 17486,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "693"
										},
										{
											"begin": 17462,
											"end": 17484,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "694"
										},
										{
											"begin": 17480,
											"end": 17483,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 17462,
											"end": 17484,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "481"
										},
										{
											"begin": 17462,
											"end": 17484,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 17462,
											"end": 17484,
											"name": "tag",
											"source": 17,
											"value": "694"
										},
										{
											"begin": 17462,
											"end": 17484,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17452,
											"end": 17460,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 17448,
											"end": 17485,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 17435,
											"end": 17446,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 17406,
											"end": 17486,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "489"
										},
										{
											"begin": 17406,
											"end": 17486,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 17406,
											"end": 17486,
											"name": "tag",
											"source": 17,
											"value": "693"
										},
										{
											"begin": 17406,
											"end": 17486,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17065,
											"end": 17496,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17065,
											"end": 17496,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17050,
											"end": 17496,
											"name": "tag",
											"source": 17,
											"value": "689"
										},
										{
											"begin": 17050,
											"end": 17496,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 16960,
											"end": 17503,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16960,
											"end": 17503,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16960,
											"end": 17503,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 16960,
											"end": 17503,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 17509,
											"end": 17626,
											"name": "tag",
											"source": 17,
											"value": "491"
										},
										{
											"begin": 17509,
											"end": 17626,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17563,
											"end": 17571,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 17613,
											"end": 17618,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 17607,
											"end": 17611,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 17603,
											"end": 17619,
											"name": "SHR",
											"source": 17
										},
										{
											"begin": 17582,
											"end": 17619,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 17582,
											"end": 17619,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17509,
											"end": 17626,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 17509,
											"end": 17626,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 17509,
											"end": 17626,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17509,
											"end": 17626,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17509,
											"end": 17626,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 17632,
											"end": 17801,
											"name": "tag",
											"source": 17,
											"value": "492"
										},
										{
											"begin": 17632,
											"end": 17801,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17676,
											"end": 17682,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 17709,
											"end": 17760,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "697"
										},
										{
											"begin": 17757,
											"end": 17758,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 17753,
											"end": 17759,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 17745,
											"end": 17750,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 17742,
											"end": 17743,
											"name": "PUSH",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 17738,
											"end": 17751,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 17709,
											"end": 17760,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "491"
										},
										{
											"begin": 17709,
											"end": 17760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 17709,
											"end": 17760,
											"name": "tag",
											"source": 17,
											"value": "697"
										},
										{
											"begin": 17709,
											"end": 17760,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17705,
											"end": 17761,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 17790,
											"end": 17794,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 17784,
											"end": 17788,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 17780,
											"end": 17795,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 17770,
											"end": 17795,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 17770,
											"end": 17795,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17683,
											"end": 17801,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17632,
											"end": 17801,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 17632,
											"end": 17801,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 17632,
											"end": 17801,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17632,
											"end": 17801,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17632,
											"end": 17801,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 17806,
											"end": 18101,
											"name": "tag",
											"source": 17,
											"value": "493"
										},
										{
											"begin": 17806,
											"end": 18101,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 17882,
											"end": 17886,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 18028,
											"end": 18057,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "699"
										},
										{
											"begin": 18053,
											"end": 18056,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 18047,
											"end": 18051,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 18028,
											"end": 18057,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "492"
										},
										{
											"begin": 18028,
											"end": 18057,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18028,
											"end": 18057,
											"name": "tag",
											"source": 17,
											"value": "699"
										},
										{
											"begin": 18028,
											"end": 18057,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18020,
											"end": 18057,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 18020,
											"end": 18057,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18090,
											"end": 18093,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18087,
											"end": 18088,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 18083,
											"end": 18094,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 18077,
											"end": 18081,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18074,
											"end": 18095,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 18066,
											"end": 18095,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 18066,
											"end": 18095,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17806,
											"end": 18101,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 17806,
											"end": 18101,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 17806,
											"end": 18101,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17806,
											"end": 18101,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 17806,
											"end": 18101,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18106,
											"end": 19501,
											"name": "tag",
											"source": 17,
											"value": "372"
										},
										{
											"begin": 18106,
											"end": 19501,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18223,
											"end": 18260,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "701"
										},
										{
											"begin": 18256,
											"end": 18259,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18223,
											"end": 18260,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "444"
										},
										{
											"begin": 18223,
											"end": 18260,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18223,
											"end": 18260,
											"name": "tag",
											"source": 17,
											"value": "701"
										},
										{
											"begin": 18223,
											"end": 18260,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18325,
											"end": 18343,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18317,
											"end": 18323,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 18314,
											"end": 18344,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 18311,
											"end": 18367,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 18311,
											"end": 18367,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "702"
										},
										{
											"begin": 18311,
											"end": 18367,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 18347,
											"end": 18365,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "703"
										},
										{
											"begin": 18347,
											"end": 18365,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "327"
										},
										{
											"begin": 18347,
											"end": 18365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18347,
											"end": 18365,
											"name": "tag",
											"source": 17,
											"value": "703"
										},
										{
											"begin": 18347,
											"end": 18365,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18311,
											"end": 18367,
											"name": "tag",
											"source": 17,
											"value": "702"
										},
										{
											"begin": 18311,
											"end": 18367,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18391,
											"end": 18429,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "704"
										},
										{
											"begin": 18423,
											"end": 18427,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18417,
											"end": 18428,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 18391,
											"end": 18429,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "118"
										},
										{
											"begin": 18391,
											"end": 18429,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18391,
											"end": 18429,
											"name": "tag",
											"source": 17,
											"value": "704"
										},
										{
											"begin": 18391,
											"end": 18429,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18476,
											"end": 18543,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "705"
										},
										{
											"begin": 18536,
											"end": 18542,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18528,
											"end": 18534,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18522,
											"end": 18526,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 18476,
											"end": 18543,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "490"
										},
										{
											"begin": 18476,
											"end": 18543,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18476,
											"end": 18543,
											"name": "tag",
											"source": 17,
											"value": "705"
										},
										{
											"begin": 18476,
											"end": 18543,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18570,
											"end": 18571,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 18594,
											"end": 18598,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 18581,
											"end": 18598,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 18581,
											"end": 18598,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18626,
											"end": 18628,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 18618,
											"end": 18624,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 18615,
											"end": 18629,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 18643,
											"end": 18644,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 18638,
											"end": 19256,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 18638,
											"end": 19256,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 18638,
											"end": 19256,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "707"
										},
										{
											"begin": 18638,
											"end": 19256,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 19300,
											"end": 19301,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 19317,
											"end": 19323,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 19314,
											"end": 19391,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 19314,
											"end": 19391,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "708"
										},
										{
											"begin": 19314,
											"end": 19391,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 19366,
											"end": 19375,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 19361,
											"end": 19364,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 19357,
											"end": 19376,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 19351,
											"end": 19377,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 19342,
											"end": 19377,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 19342,
											"end": 19377,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 19314,
											"end": 19391,
											"name": "tag",
											"source": 17,
											"value": "708"
										},
										{
											"begin": 19314,
											"end": 19391,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 19417,
											"end": 19484,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "709"
										},
										{
											"begin": 19477,
											"end": 19483,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 19470,
											"end": 19475,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 19417,
											"end": 19484,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "493"
										},
										{
											"begin": 19417,
											"end": 19484,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 19417,
											"end": 19484,
											"name": "tag",
											"source": 17,
											"value": "709"
										},
										{
											"begin": 19417,
											"end": 19484,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 19411,
											"end": 19415,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 19404,
											"end": 19485,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 19273,
											"end": 19495,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18608,
											"end": 19495,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "706"
										},
										{
											"begin": 18608,
											"end": 19495,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18638,
											"end": 19256,
											"name": "tag",
											"source": 17,
											"value": "707"
										},
										{
											"begin": 18638,
											"end": 19256,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18690,
											"end": 18694,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 18686,
											"end": 18695,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 18678,
											"end": 18684,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 18674,
											"end": 18696,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 18724,
											"end": 18761,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "710"
										},
										{
											"begin": 18756,
											"end": 18760,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 18724,
											"end": 18761,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "480"
										},
										{
											"begin": 18724,
											"end": 18761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18724,
											"end": 18761,
											"name": "tag",
											"source": 17,
											"value": "710"
										},
										{
											"begin": 18724,
											"end": 18761,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18783,
											"end": 18784,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "tag",
											"source": 17,
											"value": "711"
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18811,
											"end": 18818,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18808,
											"end": 18809,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 18805,
											"end": 18819,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "713"
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 18890,
											"end": 18899,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 18885,
											"end": 18888,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 18881,
											"end": 18900,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 18875,
											"end": 18901,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 18867,
											"end": 18873,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18860,
											"end": 18902,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 18941,
											"end": 18942,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 18933,
											"end": 18939,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 18929,
											"end": 18943,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 18919,
											"end": 18943,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 18919,
											"end": 18943,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18988,
											"end": 18990,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 18977,
											"end": 18986,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 18973,
											"end": 18991,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 18960,
											"end": 18991,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 18960,
											"end": 18991,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18834,
											"end": 18838,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 18831,
											"end": 18832,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 18827,
											"end": 18839,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 18822,
											"end": 18839,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 18822,
											"end": 18839,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "711"
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "tag",
											"source": 17,
											"value": "713"
										},
										{
											"begin": 18797,
											"end": 19005,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 19033,
											"end": 19039,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 19024,
											"end": 19031,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 19021,
											"end": 19040,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 19018,
											"end": 19197,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 19018,
											"end": 19197,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "714"
										},
										{
											"begin": 19018,
											"end": 19197,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 19091,
											"end": 19100,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 19086,
											"end": 19089,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 19082,
											"end": 19101,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 19076,
											"end": 19102,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 19134,
											"end": 19182,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "715"
										},
										{
											"begin": 19176,
											"end": 19180,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 19168,
											"end": 19174,
											"name": "DUP10",
											"source": 17
										},
										{
											"begin": 19164,
											"end": 19181,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 19153,
											"end": 19162,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 19134,
											"end": 19182,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "492"
										},
										{
											"begin": 19134,
											"end": 19182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 19134,
											"end": 19182,
											"name": "tag",
											"source": 17,
											"value": "715"
										},
										{
											"begin": 19134,
											"end": 19182,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 19126,
											"end": 19132,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 19119,
											"end": 19183,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 19041,
											"end": 19197,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 19018,
											"end": 19197,
											"name": "tag",
											"source": 17,
											"value": "714"
										},
										{
											"begin": 19018,
											"end": 19197,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 19243,
											"end": 19244,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 19239,
											"end": 19240,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 19231,
											"end": 19237,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 19227,
											"end": 19241,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 19223,
											"end": 19245,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 19217,
											"end": 19221,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 19210,
											"end": 19246,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 18645,
											"end": 19256,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18645,
											"end": 19256,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18645,
											"end": 19256,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18608,
											"end": 19495,
											"name": "tag",
											"source": 17,
											"value": "706"
										},
										{
											"begin": 18608,
											"end": 19495,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 18608,
											"end": 19495,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18198,
											"end": 19501,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18198,
											"end": 19501,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18198,
											"end": 19501,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18106,
											"end": 19501,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18106,
											"end": 19501,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 18106,
											"end": 19501,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 19507,
											"end": 19839,
											"name": "tag",
											"source": 17,
											"value": "429"
										},
										{
											"begin": 19507,
											"end": 19839,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 19628,
											"end": 19632,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 19666,
											"end": 19668,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 19655,
											"end": 19664,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 19651,
											"end": 19669,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 19643,
											"end": 19669,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 19643,
											"end": 19669,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 19679,
											"end": 19750,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "717"
										},
										{
											"begin": 19747,
											"end": 19748,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 19736,
											"end": 19745,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 19732,
											"end": 19749,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 19723,
											"end": 19729,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 19679,
											"end": 19750,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "454"
										},
										{
											"begin": 19679,
											"end": 19750,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 19679,
											"end": 19750,
											"name": "tag",
											"source": 17,
											"value": "717"
										},
										{
											"begin": 19679,
											"end": 19750,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 19760,
											"end": 19832,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "718"
										},
										{
											"begin": 19828,
											"end": 19830,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 19817,
											"end": 19826,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 19813,
											"end": 19831,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 19804,
											"end": 19810,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 19760,
											"end": 19832,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "457"
										},
										{
											"begin": 19760,
											"end": 19832,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 19760,
											"end": 19832,
											"name": "tag",
											"source": 17,
											"value": "718"
										},
										{
											"begin": 19760,
											"end": 19832,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 19507,
											"end": 19839,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 19507,
											"end": 19839,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 19507,
											"end": 19839,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 19507,
											"end": 19839,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 19507,
											"end": 19839,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 19507,
											"end": 19839,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/MyToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"getApproved(uint256)": "081812fc",
							"initialize(address)": "c4d66de8",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"ownerOf(uint256)": "6352211e",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"renounceOwnership()": "715018a6",
							"safeMint(address,uint256)": "a1448194",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"unpause()": "3f4ba83a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyToken.sol\":\"MyToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"keccak256\":\"0x48efca78ce4e1a9f74d3ca8539bb53d04b116e507c10cd9e0df6105b8a6ae420\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d9f5e03898857a187d99bd0766daf725abe87f454db82ac6286544d8cb4532f\",\"dweb:/ipfs/QmXFNXaNuxvGCLNL9xAFbvEgRmXDuxw4Ukf9tddiAHDq59\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"keccak256\":\"0x5d1215064b3e114d329b1544cf65d33404f63e7841184e55267f4d8b114608e6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1699c6ecb0511cb626f40814463aaf4e5c8c36399689e0f3de7561f227a5b50a\",\"dweb:/ipfs/QmQDxPddEsajUEPDRsfPekEhBRjmBTepYALuTwdM7h6mRz\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":{\"keccak256\":\"0x6a7330cb4ed2bea90bed97483d55f11ccf98af6c1dd1e2b1739040b679ff9545\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9a274337315d1f332ba80f7cfbe5243267db6a015514c5a0e7898219ab51fb52\",\"dweb:/ipfs/QmTZdtdWgVs7VmP1dUW4idVpLK4pVFS6sfoi2pQCnaKgSX\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85ad36d5cc7e190e1ee6c94b24659bc3a31396c4c36b6ffa6a509e10661f8007\",\"dweb:/ipfs/QmPFyc4zMh2zo6YWZt25gjm3YdR2hg6wGETaWw256fMmJJ\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fa2e61141c602510bcd2cd936ed9561922ac8772a9b9c9a9db091a74e354a45\",\"dweb:/ipfs/QmcHQDDoEBwJmwUbzoVkytvJsBx3KVHYFFnDkvRGWh9Wmh\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/MyToken.sol\":{\"keccak256\":\"0xac831522a45b443b8993c77d077545ac12b3ac1a4e4b3c48a96a7c1110bd31f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0d6443e1f556b6f428a97f511fe4e3d6834d6479d6e16723c1b0052fa216442\",\"dweb:/ipfs/QmVMMy75PghuoNV5jkE1QLe9wt7f7aPuJcN29c4rWkLK6e\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1725
						],
						"Initializable": [
							448
						],
						"OwnableUpgradeable": [
							194
						]
					},
					"id": 195,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 195,
							"sourceUnit": 1726,
							"src": "128:67:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1725,
										"src": "136:18:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 195,
							"sourceUnit": 449,
							"src": "196:63:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "204:13:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Initializable",
										"nameLocations": [
											"789:13:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "789:13:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "789:13:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"804:18:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1725,
										"src": "804:18:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "804:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "261:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 194,
							"linearizedBaseContracts": [
								194,
								1725,
								448
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "767:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OwnableUpgradeable.OwnableStorage",
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "829:65:0",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Ownable"
									},
									"id": 14,
									"members": [
										{
											"constant": false,
											"id": 13,
											"mutability": "mutable",
											"name": "_owner",
											"nameLocation": "939:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 14,
											"src": "931:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 12,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "931:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "OwnableStorage",
									"nameLocation": "906:14:0",
									"nodeType": "StructDefinition",
									"scope": 194,
									"src": "899:53:0",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 17,
									"mutability": "constant",
									"name": "OwnableStorageLocation",
									"nameLocation": "1094:22:0",
									"nodeType": "VariableDeclaration",
									"scope": 194,
									"src": "1069:116:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 15,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1069:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307839303136643039643732643430666461653266643863656163366236323334633737303632313466643339633163643165363039613035323863313939333030",
										"id": 16,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1119:66:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_65173360639460082030725920392146925864023520599682862633725751242436743107328_by_1",
											"typeString": "int_const 6517...(69 digits omitted)...7328"
										},
										"value": "0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "1270:81:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1289:56:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1303:32:0",
															"value": {
																"name": "OwnableStorageLocation",
																"nodeType": "YulIdentifier",
																"src": "1313:22:0"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nodeType": "YulIdentifier",
																	"src": "1303:6:0"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 21,
														"isOffset": false,
														"isSlot": true,
														"src": "1303:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 17,
														"isOffset": false,
														"isSlot": false,
														"src": "1313:22:0",
														"valueSize": 1
													}
												],
												"id": 23,
												"nodeType": "InlineAssembly",
												"src": "1280:65:0"
											}
										]
									},
									"id": 25,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getOwnableStorage",
									"nameLocation": "1201:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1219:2:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1267:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "1244:24:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
													"typeString": "struct OwnableUpgradeable.OwnableStorage"
												},
												"typeName": {
													"id": 20,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 19,
														"name": "OwnableStorage",
														"nameLocations": [
															"1244:14:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 14,
														"src": "1244:14:0"
													},
													"referencedDeclaration": 14,
													"src": "1244:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1243:26:0"
									},
									"scope": 194,
									"src": "1192:159:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "1357:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 30,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "1453:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1488:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1480:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1480:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1479:17:0"
									},
									"src": "1447:50:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1503:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 35,
									"name": "OwnableInvalidOwner",
									"nameLocation": "1596:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1624:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1616:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:15:0"
									},
									"src": "1590:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 41,
									"name": "OwnershipTransferred",
									"nameLocation": "1643:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1680:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "1664:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1664:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1711:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "1695:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1695:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1663:57:0"
									},
									"src": "1637:84:0"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1919:55:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 50,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 44,
															"src": "1954:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 49,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 81,
														"src": "1929:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1929:38:0"
											}
										]
									},
									"documentation": {
										"id": 42,
										"nodeType": "StructuredDocumentation",
										"src": "1727:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 47,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 46,
												"name": "onlyInitializing",
												"nameLocations": [
													"1902:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1902:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1902:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1856:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1879:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1871:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1871:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:22:0"
									},
									"returnParameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1919:0:0"
									},
									"scope": 194,
									"src": "1847:127:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 80,
										"nodeType": "Block",
										"src": "2062:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 61,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 56,
														"src": "2076:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 64,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2092:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 62,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2092:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 65,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2092:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2076:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 75,
												"nodeType": "IfStatement",
												"src": "2072:95:0",
												"trueBody": {
													"id": 74,
													"nodeType": "Block",
													"src": "2104:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 70,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2153:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 69,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2145:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 68,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2145:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 71,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2145:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 67,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "2125:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 72,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2125:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 73,
															"nodeType": "RevertStatement",
															"src": "2118:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 77,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "2195:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 76,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "2176:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 79,
												"nodeType": "ExpressionStatement",
												"src": "2176:32:0"
											}
										]
									},
									"id": 81,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 59,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 58,
												"name": "onlyInitializing",
												"nameLocations": [
													"2045:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2045:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2045:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1989:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "2022:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "2014:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2013:22:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2062:0:0"
									},
									"scope": 194,
									"src": "1980:235:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 88,
										"nodeType": "Block",
										"src": "2324:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 84,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 122,
														"src": "2334:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 85,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2334:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 86,
												"nodeType": "ExpressionStatement",
												"src": "2334:13:0"
											},
											{
												"id": 87,
												"nodeType": "PlaceholderStatement",
												"src": "2357:1:0"
											}
										]
									},
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "2221:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 89,
									"name": "onlyOwner",
									"nameLocation": "2312:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2321:2:0"
									},
									"src": "2303:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "2496:89:0",
										"statements": [
											{
												"assignments": [
													97
												],
												"declarations": [
													{
														"constant": false,
														"id": 97,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2529:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 104,
														"src": "2506:24:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 96,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 95,
																"name": "OwnableStorage",
																"nameLocations": [
																	"2506:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 14,
																"src": "2506:14:0"
															},
															"referencedDeclaration": 14,
															"src": "2506:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 98,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "2533:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$14_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2533:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:47:0"
											},
											{
												"expression": {
													"expression": {
														"id": 101,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 97,
														"src": "2570:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2572:6:0",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 13,
													"src": "2570:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 94,
												"id": 103,
												"nodeType": "Return",
												"src": "2563:15:0"
											}
										]
									},
									"documentation": {
										"id": 90,
										"nodeType": "StructuredDocumentation",
										"src": "2371:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "2450:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2455:2:0"
									},
									"returnParameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "2487:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2486:9:0"
									},
									"scope": 194,
									"src": "2441:144:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 121,
										"nodeType": "Block",
										"src": "2703:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 109,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 105,
															"src": "2717:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2717:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 111,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1707,
															"src": "2728:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2717:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2713:101:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2742:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 115,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1707,
																			"src": "2790:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2790:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 114,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 30,
																	"src": "2763:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2763:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2756:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "2591:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "2667:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2678:2:0"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2703:0:0"
									},
									"scope": 194,
									"src": "2658:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 135,
										"nodeType": "Block",
										"src": "3209:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3246:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3238:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 129,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3238:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3238:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 128,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3219:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3219:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 134,
												"nodeType": "ExpressionStatement",
												"src": "3219:30:0"
											}
										]
									},
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "2826:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 136,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 126,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 125,
												"name": "onlyOwner",
												"nameLocations": [
													"3199:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "3199:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3199:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "3164:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3181:2:0"
									},
									"returnParameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3209:0:0"
									},
									"scope": 194,
									"src": "3155:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 163,
										"nodeType": "Block",
										"src": "3475:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 144,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "3489:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 147,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3509:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3501:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 145,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3501:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 148,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3501:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3489:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 158,
												"nodeType": "IfStatement",
												"src": "3485:91:0",
												"trueBody": {
													"id": 157,
													"nodeType": "Block",
													"src": "3513:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 153,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3562:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3554:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 151,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3554:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3554:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 150,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "3534:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 156,
															"nodeType": "RevertStatement",
															"src": "3527:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 160,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 139,
															"src": "3604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 159,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3585:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3585:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "3585:28:0"
											}
										]
									},
									"documentation": {
										"id": 137,
										"nodeType": "StructuredDocumentation",
										"src": "3262:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 164,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 142,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 141,
												"name": "onlyOwner",
												"nameLocations": [
													"3465:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "3465:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3465:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "3414:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3440:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "3432:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3432:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3431:18:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3475:0:0"
									},
									"scope": 194,
									"src": "3405:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 192,
										"nodeType": "Block",
										"src": "3837:185:0",
										"statements": [
											{
												"assignments": [
													172
												],
												"declarations": [
													{
														"constant": false,
														"id": 172,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3870:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 192,
														"src": "3847:24:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 171,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 170,
																"name": "OwnableStorage",
																"nameLocations": [
																	"3847:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 14,
																"src": "3847:14:0"
															},
															"referencedDeclaration": 14,
															"src": "3847:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 175,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 173,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "3874:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$14_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3874:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3847:47:0"
											},
											{
												"assignments": [
													177
												],
												"declarations": [
													{
														"constant": false,
														"id": 177,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "3912:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 192,
														"src": "3904:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 176,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3904:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 180,
												"initialValue": {
													"expression": {
														"id": 178,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 172,
														"src": "3923:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 179,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3925:6:0",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 13,
													"src": "3923:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3904:27:0"
											},
											{
												"expression": {
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 181,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 172,
															"src": "3941:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
															}
														},
														"id": 183,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3943:6:0",
														"memberName": "_owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 13,
														"src": "3941:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 184,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "3952:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3941:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 186,
												"nodeType": "ExpressionStatement",
												"src": "3941:19:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 188,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "3996:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 189,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 167,
															"src": "4006:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 187,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 41,
														"src": "3975:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3975:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 191,
												"nodeType": "EmitStatement",
												"src": "3970:45:0"
											}
										]
									},
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "3626:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "3783:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3810:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "3802:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3802:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3801:18:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3837:0:0"
									},
									"scope": 194,
									"src": "3774:248:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 195,
							"src": "749:3275:0",
							"usedErrors": [
								30,
								35,
								211,
								214
							],
							"usedEvents": [
								41,
								219
							]
						}
					],
					"src": "102:3923:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							448
						]
					},
					"id": 449,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 196,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 197,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 448,
							"linearizedBaseContracts": [
								448
							],
							"name": "Initializable",
							"nameLocation": "2367:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:1",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 205,
									"members": [
										{
											"constant": false,
											"id": 201,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 205,
											"src": "2813:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 200,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 204,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 205,
											"src": "2950:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 203,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:1",
									"nodeType": "StructDefinition",
									"scope": 448,
									"src": "2685:290:1",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 208,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:1",
									"nodeType": "VariableDeclaration",
									"scope": 448,
									"src": "3098:115:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 206,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 207,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:1",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 211,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:1"
									},
									"src": "3285:30:1"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:1",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 214,
									"name": "NotInitializing",
									"nameLocation": "3389:15:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:1"
									},
									"src": "3383:24:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 219,
									"name": "Initialized",
									"nameLocation": "3514:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "3526:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 216,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:1"
									},
									"src": "3508:34:1"
								},
								{
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "4092:1081:1",
										"statements": [
											{
												"assignments": [
													224
												],
												"declarations": [
													{
														"constant": false,
														"id": 224,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4158:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 223,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 222,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "4158:20:1"
															},
															"referencedDeclaration": 205,
															"src": "4158:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 227,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 225,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "4191:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:1"
											},
											{
												"assignments": [
													229
												],
												"declarations": [
													{
														"constant": false,
														"id": 229,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4279:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 228,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 233,
												"initialValue": {
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:1",
													"subExpression": {
														"expression": {
															"id": 230,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "4302:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 231,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "4302:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:1"
											},
											{
												"assignments": [
													235
												],
												"declarations": [
													{
														"constant": false,
														"id": 235,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4327:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 234,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 238,
												"initialValue": {
													"expression": {
														"id": 236,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 224,
														"src": "4348:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 237,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:1",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 201,
													"src": "4348:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:1"
											},
											{
												"assignments": [
													240
												],
												"declarations": [
													{
														"constant": false,
														"id": 240,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4711:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4706:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 239,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4706:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 246,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 243,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 241,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 235,
															"src": "4726:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4741:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4726:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 244,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 229,
														"src": "4746:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4726:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4706:54:1"
											},
											{
												"assignments": [
													248
												],
												"declarations": [
													{
														"constant": false,
														"id": 248,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4775:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4770:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 247,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4770:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 261,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 251,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 249,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 235,
															"src": "4790:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4805:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4790:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 259,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 254,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4818:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$448",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$448",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 253,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4810:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 252,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4810:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 255,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4810:13:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 256,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4824:4:1",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4810:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 257,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4829:6:1",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4810:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 258,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4839:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4810:30:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4790:50:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4770:70:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4855:13:1",
														"subExpression": {
															"id": 262,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "4856:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 265,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4872:13:1",
														"subExpression": {
															"id": 264,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "4873:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4855:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 271,
												"nodeType": "IfStatement",
												"src": "4851:91:1",
												"trueBody": {
													"id": 270,
													"nodeType": "Block",
													"src": "4887:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 267,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "4908:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4908:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 269,
															"nodeType": "RevertStatement",
															"src": "4901:30:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 272,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "4951:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 274,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4953:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "4951:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 275,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4968:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4951:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "4951:18:1"
											},
											{
												"condition": {
													"id": 278,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 229,
													"src": "4983:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 286,
												"nodeType": "IfStatement",
												"src": "4979:67:1",
												"trueBody": {
													"id": 285,
													"nodeType": "Block",
													"src": "4999:47:1",
													"statements": [
														{
															"expression": {
																"id": 283,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 279,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 224,
																		"src": "5013:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 281,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5015:13:1",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 204,
																	"src": "5013:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5031:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5013:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 284,
															"nodeType": "ExpressionStatement",
															"src": "5013:22:1"
														}
													]
												}
											},
											{
												"id": 287,
												"nodeType": "PlaceholderStatement",
												"src": "5055:1:1"
											},
											{
												"condition": {
													"id": 288,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 229,
													"src": "5070:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 300,
												"nodeType": "IfStatement",
												"src": "5066:101:1",
												"trueBody": {
													"id": 299,
													"nodeType": "Block",
													"src": "5086:81:1",
													"statements": [
														{
															"expression": {
																"id": 293,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 289,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 224,
																		"src": "5100:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 291,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5102:13:1",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 204,
																	"src": "5100:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5118:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5100:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 294,
															"nodeType": "ExpressionStatement",
															"src": "5100:23:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5154:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 295,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 219,
																	"src": "5142:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 297,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5142:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 298,
															"nodeType": "EmitStatement",
															"src": "5137:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 302,
									"name": "initializer",
									"nameLocation": "4078:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:1"
									},
									"src": "4069:1104:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 348,
										"nodeType": "Block",
										"src": "6291:392:1",
										"statements": [
											{
												"assignments": [
													309
												],
												"declarations": [
													{
														"constant": false,
														"id": 309,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6386:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 348,
														"src": "6357:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 308,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 307,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6357:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "6357:20:1"
															},
															"referencedDeclaration": 205,
															"src": "6357:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 312,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 310,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "6390:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6357:59:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 313,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6431:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 314,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6433:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6431:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 318,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 315,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 309,
																"src": "6450:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 316,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6452:12:1",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 201,
															"src": "6450:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 317,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "6468:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6450:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6431:44:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 324,
												"nodeType": "IfStatement",
												"src": "6427:105:1",
												"trueBody": {
													"id": 323,
													"nodeType": "Block",
													"src": "6477:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 320,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "6498:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 321,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6498:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 322,
															"nodeType": "RevertStatement",
															"src": "6491:30:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 325,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6541:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 327,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6543:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "6541:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 328,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "6558:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6541:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "6541:24:1"
											},
											{
												"expression": {
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 331,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6575:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 333,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6577:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6575:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 334,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6593:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6575:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 336,
												"nodeType": "ExpressionStatement",
												"src": "6575:22:1"
											},
											{
												"id": 337,
												"nodeType": "PlaceholderStatement",
												"src": "6607:1:1"
											},
											{
												"expression": {
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 338,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6618:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 340,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6620:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6618:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6636:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6618:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 343,
												"nodeType": "ExpressionStatement",
												"src": "6618:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 345,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "6668:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 344,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 219,
														"src": "6656:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6656:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "EmitStatement",
												"src": "6651:25:1"
											}
										]
									},
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "5179:1068:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 349,
									"name": "reinitializer",
									"nameLocation": "6261:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6282:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "6275:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 304,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6275:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6274:16:1"
									},
									"src": "6252:431:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 356,
										"nodeType": "Block",
										"src": "6921:48:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 352,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "6931:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6931:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 354,
												"nodeType": "ExpressionStatement",
												"src": "6931:20:1"
											},
											{
												"id": 355,
												"nodeType": "PlaceholderStatement",
												"src": "6961:1:1"
											}
										]
									},
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "6689:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 357,
									"name": "onlyInitializing",
									"nameLocation": "6902:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6918:2:1"
									},
									"src": "6893:76:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 369,
										"nodeType": "Block",
										"src": "7136:89:1",
										"statements": [
											{
												"condition": {
													"id": 363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7150:18:1",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 361,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "7151:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 362,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7151:17:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 368,
												"nodeType": "IfStatement",
												"src": "7146:73:1",
												"trueBody": {
													"id": 367,
													"nodeType": "Block",
													"src": "7170:49:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 364,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 214,
																	"src": "7191:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 365,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7191:17:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 366,
															"nodeType": "RevertStatement",
															"src": "7184:24:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "6975:104:1",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7093:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7111:2:1"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7136:0:1"
									},
									"scope": 448,
									"src": "7084:141:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 415,
										"nodeType": "Block",
										"src": "7760:373:1",
										"statements": [
											{
												"assignments": [
													376
												],
												"declarations": [
													{
														"constant": false,
														"id": 376,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7855:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 415,
														"src": "7826:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 375,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 374,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7826:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "7826:20:1"
															},
															"referencedDeclaration": 205,
															"src": "7826:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 379,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 377,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "7859:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7859:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7826:59:1"
											},
											{
												"condition": {
													"expression": {
														"id": 380,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 376,
														"src": "7900:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 381,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7902:13:1",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 204,
													"src": "7900:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 386,
												"nodeType": "IfStatement",
												"src": "7896:76:1",
												"trueBody": {
													"id": 385,
													"nodeType": "Block",
													"src": "7917:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 382,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "7938:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 383,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7938:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 384,
															"nodeType": "RevertStatement",
															"src": "7931:30:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 387,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "7985:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 388,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7987:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "7985:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8008:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 390,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8008:6:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 389,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8003:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8003:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 393,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8016:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8003:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7985:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 414,
												"nodeType": "IfStatement",
												"src": "7981:146:1",
												"trueBody": {
													"id": 413,
													"nodeType": "Block",
													"src": "8021:106:1",
													"statements": [
														{
															"expression": {
																"id": 403,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 395,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 376,
																		"src": "8035:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 397,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8037:12:1",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 201,
																	"src": "8035:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 400,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8057:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 399,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8057:6:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 398,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8052:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8052:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8065:3:1",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8052:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8035:33:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 404,
															"nodeType": "ExpressionStatement",
															"src": "8035:33:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 408,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8104:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 407,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8104:6:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 406,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8099:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8099:12:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8112:3:1",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8099:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 405,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 219,
																	"src": "8087:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8087:29:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 412,
															"nodeType": "EmitStatement",
															"src": "8082:34:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "7231:475:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7720:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7740:2:1"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7760:0:1"
									},
									"scope": 448,
									"src": "7711:422:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "8308:63:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 422,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "8325:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8325:26:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 424,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8352:12:1",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 201,
													"src": "8325:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 421,
												"id": 425,
												"nodeType": "Return",
												"src": "8318:46:1"
											}
										]
									},
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "8139:99:1",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8252:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8274:2:1"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "8300:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 419,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8300:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8299:8:1"
									},
									"scope": 448,
									"src": "8243:128:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 437,
										"nodeType": "Block",
										"src": "8543:64:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 433,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "8560:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8560:26:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 435,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8587:13:1",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 204,
													"src": "8560:40:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 432,
												"id": 436,
												"nodeType": "Return",
												"src": "8553:47:1"
											}
										]
									},
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "8377:105:1",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8496:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8511:2:1"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 438,
												"src": "8537:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 430,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8537:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8536:6:1"
									},
									"scope": 448,
									"src": "8487:120:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 446,
										"nodeType": "Block",
										"src": "8827:80:1",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8846:55:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8860:31:1",
															"value": {
																"name": "INITIALIZABLE_STORAGE",
																"nodeType": "YulIdentifier",
																"src": "8870:21:1"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nodeType": "YulIdentifier",
																	"src": "8860:6:1"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 443,
														"isOffset": false,
														"isSlot": true,
														"src": "8860:6:1",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 208,
														"isOffset": false,
														"isSlot": false,
														"src": "8870:21:1",
														"valueSize": 1
													}
												],
												"id": 445,
												"nodeType": "InlineAssembly",
												"src": "8837:64:1"
											}
										]
									},
									"documentation": {
										"id": 439,
										"nodeType": "StructuredDocumentation",
										"src": "8613:67:1",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "8746:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8770:2:1"
									},
									"returnParameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "8824:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "8795:30:1",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 442,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 441,
														"name": "InitializableStorage",
														"nameLocations": [
															"8795:20:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 205,
														"src": "8795:20:1"
													},
													"referencedDeclaration": 205,
													"src": "8795:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8794:32:1"
									},
									"scope": 448,
									"src": "8737:170:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 449,
							"src": "2349:6560:1",
							"usedErrors": [
								211,
								214
							],
							"usedEvents": [
								219
							]
						}
					],
					"src": "113:8797:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1725
						],
						"ERC165Upgradeable": [
							1941
						],
						"ERC721Upgradeable": [
							1580
						],
						"IERC165": [
							2508
						],
						"IERC721": [
							2195
						],
						"IERC721Errors": [
							2031
						],
						"IERC721Metadata": [
							2241
						],
						"IERC721Receiver": [
							2213
						],
						"Initializable": [
							448
						],
						"Strings": [
							2496
						]
					},
					"id": 1581,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 450,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 452,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 2196,
							"src": "133:73:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 451,
										"name": "IERC721",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2195,
										"src": "141:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 454,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 2214,
							"src": "207:89:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 453,
										"name": "IERC721Receiver",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2213,
										"src": "215:15:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 456,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 2242,
							"src": "297:100:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 455,
										"name": "IERC721Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2241,
										"src": "305:15:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 458,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 1726,
							"src": "398:70:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 457,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1725,
										"src": "406:18:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 460,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 2497,
							"src": "469:66:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 459,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2496,
										"src": "477:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"id": 462,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 2509,
							"src": "536:80:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 461,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2508,
										"src": "544:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
							"file": "../../utils/introspection/ERC165Upgradeable.sol",
							"id": 464,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 1942,
							"src": "617:82:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 463,
										"name": "ERC165Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1941,
										"src": "625:17:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"id": 466,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 2079,
							"src": "700:84:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 465,
										"name": "IERC721Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2031,
										"src": "708:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 468,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 449,
							"src": "785:66:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 467,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "793:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 470,
										"name": "Initializable",
										"nameLocations": [
											"1139:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "1139:13:2"
									},
									"id": 471,
									"nodeType": "InheritanceSpecifier",
									"src": "1139:13:2"
								},
								{
									"baseName": {
										"id": 472,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"1154:18:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1725,
										"src": "1154:18:2"
									},
									"id": 473,
									"nodeType": "InheritanceSpecifier",
									"src": "1154:18:2"
								},
								{
									"baseName": {
										"id": 474,
										"name": "ERC165Upgradeable",
										"nameLocations": [
											"1174:17:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1941,
										"src": "1174:17:2"
									},
									"id": 475,
									"nodeType": "InheritanceSpecifier",
									"src": "1174:17:2"
								},
								{
									"baseName": {
										"id": 476,
										"name": "IERC721",
										"nameLocations": [
											"1193:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2195,
										"src": "1193:7:2"
									},
									"id": 477,
									"nodeType": "InheritanceSpecifier",
									"src": "1193:7:2"
								},
								{
									"baseName": {
										"id": 478,
										"name": "IERC721Metadata",
										"nameLocations": [
											"1202:15:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2241,
										"src": "1202:15:2"
									},
									"id": 479,
									"nodeType": "InheritanceSpecifier",
									"src": "1202:15:2"
								},
								{
									"baseName": {
										"id": 480,
										"name": "IERC721Errors",
										"nameLocations": [
											"1219:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2031,
										"src": "1219:13:2"
									},
									"id": 481,
									"nodeType": "InheritanceSpecifier",
									"src": "1219:13:2"
								}
							],
							"canonicalName": "ERC721Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 469,
								"nodeType": "StructuredDocumentation",
								"src": "853:246:2",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
							},
							"fullyImplemented": true,
							"id": 1580,
							"linearizedBaseContracts": [
								1580,
								2031,
								2241,
								2195,
								1941,
								2508,
								1725,
								448
							],
							"name": "ERC721Upgradeable",
							"nameLocation": "1118:17:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 484,
									"libraryName": {
										"id": 482,
										"name": "Strings",
										"nameLocations": [
											"1245:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2496,
										"src": "1245:7:2"
									},
									"nodeType": "UsingForDirective",
									"src": "1239:26:2",
									"typeName": {
										"id": 483,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1257:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "ERC721Upgradeable.ERC721Storage",
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "1271:64:2",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.ERC721"
									},
									"id": 508,
									"members": [
										{
											"constant": false,
											"id": 487,
											"mutability": "mutable",
											"name": "_name",
											"nameLocation": "1400:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 508,
											"src": "1393:12:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 486,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1393:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 489,
											"mutability": "mutable",
											"name": "_symbol",
											"nameLocation": "1447:7:2",
											"nodeType": "VariableDeclaration",
											"scope": 508,
											"src": "1440:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 488,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1440:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 493,
											"mutability": "mutable",
											"name": "_owners",
											"nameLocation": "1501:7:2",
											"nodeType": "VariableDeclaration",
											"scope": 508,
											"src": "1465:43:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
												"typeString": "mapping(uint256 => address)"
											},
											"typeName": {
												"id": 492,
												"keyName": "tokenId",
												"keyNameLocation": "1481:7:2",
												"keyType": {
													"id": 490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1473:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1465:35:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
													"typeString": "mapping(uint256 => address)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 491,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1492:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 497,
											"mutability": "mutable",
											"name": "_balances",
											"nameLocation": "1553:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 508,
											"src": "1519:43:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 496,
												"keyName": "owner",
												"keyNameLocation": "1535:5:2",
												"keyType": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1519:33:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1544:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 501,
											"mutability": "mutable",
											"name": "_tokenApprovals",
											"nameLocation": "1609:15:2",
											"nodeType": "VariableDeclaration",
											"scope": 508,
											"src": "1573:51:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
												"typeString": "mapping(uint256 => address)"
											},
											"typeName": {
												"id": 500,
												"keyName": "tokenId",
												"keyNameLocation": "1589:7:2",
												"keyType": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1573:35:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
													"typeString": "mapping(uint256 => address)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1600:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 507,
											"mutability": "mutable",
											"name": "_operatorApprovals",
											"nameLocation": "1695:18:2",
											"nodeType": "VariableDeclaration",
											"scope": 508,
											"src": "1635:78:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
												"typeString": "mapping(address => mapping(address => bool))"
											},
											"typeName": {
												"id": 506,
												"keyName": "owner",
												"keyNameLocation": "1651:5:2",
												"keyType": {
													"id": 502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1643:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1635:59:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
													"typeString": "mapping(address => mapping(address => bool))"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 505,
													"keyName": "operator",
													"keyNameLocation": "1676:8:2",
													"keyType": {
														"id": 503,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1668:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Mapping",
													"src": "1660:33:2",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
														"typeString": "mapping(address => bool)"
													},
													"valueName": "",
													"valueNameLocation": "-1:-1:-1",
													"valueType": {
														"id": 504,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "1688:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ERC721Storage",
									"nameLocation": "1347:13:2",
									"nodeType": "StructDefinition",
									"scope": 1580,
									"src": "1340:380:2",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 511,
									"mutability": "constant",
									"name": "ERC721StorageLocation",
									"nameLocation": "1861:21:2",
									"nodeType": "VariableDeclaration",
									"scope": 1580,
									"src": "1836:115:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 509,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1836:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307838306262326236333863633230626334643061363064363639343066336162346130306331643762333133343937636138326662306234616230303739333030",
										"id": 510,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1885:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_58226744478722834339948329933988999792353370511964151963072532422914231210752_by_1",
											"typeString": "int_const 5822...(69 digits omitted)...0752"
										},
										"value": "0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 518,
										"nodeType": "Block",
										"src": "2034:80:2",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2053:55:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2067:31:2",
															"value": {
																"name": "ERC721StorageLocation",
																"nodeType": "YulIdentifier",
																"src": "2077:21:2"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2067:6:2"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 515,
														"isOffset": false,
														"isSlot": true,
														"src": "2067:6:2",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 511,
														"isOffset": false,
														"isSlot": false,
														"src": "2077:21:2",
														"valueSize": 1
													}
												],
												"id": 517,
												"nodeType": "InlineAssembly",
												"src": "2044:64:2"
											}
										]
									},
									"id": 519,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getERC721Storage",
									"nameLocation": "1967:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1984:2:2"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "2031:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "2009:23:2",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
													"typeString": "struct ERC721Upgradeable.ERC721Storage"
												},
												"typeName": {
													"id": 514,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 513,
														"name": "ERC721Storage",
														"nameLocations": [
															"2009:13:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 508,
														"src": "2009:13:2"
													},
													"referencedDeclaration": 508,
													"src": "2009:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2008:25:2"
									},
									"scope": 1580,
									"src": "1958:156:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "2326:56:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 530,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "2360:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 531,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "2367:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 529,
														"name": "__ERC721_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 563,
														"src": "2336:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2336:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 533,
												"nodeType": "ExpressionStatement",
												"src": "2336:39:2"
											}
										]
									},
									"documentation": {
										"id": 520,
										"nodeType": "StructuredDocumentation",
										"src": "2120:108:2",
										"text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 527,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 526,
												"name": "onlyInitializing",
												"nameLocations": [
													"2309:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2309:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2309:16:2"
										}
									],
									"name": "__ERC721_init",
									"nameLocation": "2242:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2270:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "2256:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 521,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2256:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2291:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "2277:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 523,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2277:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2255:44:2"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2326:0:2"
									},
									"scope": 1580,
									"src": "2233:149:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 562,
										"nodeType": "Block",
										"src": "2491:116:2",
										"statements": [
											{
												"assignments": [
													546
												],
												"declarations": [
													{
														"constant": false,
														"id": 546,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2523:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 562,
														"src": "2501:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 545,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 544,
																"name": "ERC721Storage",
																"nameLocations": [
																	"2501:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "2501:13:2"
															},
															"referencedDeclaration": 508,
															"src": "2501:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 549,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 547,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "2527:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2527:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2501:45:2"
											},
											{
												"expression": {
													"id": 554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 550,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "2556:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
															}
														},
														"id": 552,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2558:5:2",
														"memberName": "_name",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 487,
														"src": "2556:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 553,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 537,
														"src": "2566:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2556:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 555,
												"nodeType": "ExpressionStatement",
												"src": "2556:15:2"
											},
											{
												"expression": {
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 556,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "2581:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
															}
														},
														"id": 558,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2583:7:2",
														"memberName": "_symbol",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 489,
														"src": "2581:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 559,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "2593:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2581:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 561,
												"nodeType": "ExpressionStatement",
												"src": "2581:19:2"
											}
										]
									},
									"id": 563,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 542,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 541,
												"name": "onlyInitializing",
												"nameLocations": [
													"2474:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2474:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2474:16:2"
										}
									],
									"name": "__ERC721_init_unchained",
									"nameLocation": "2397:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2435:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "2421:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 536,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2421:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2456:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "2442:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 538,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2442:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2420:44:2"
									},
									"returnParameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2491:0:2"
									},
									"scope": 1580,
									"src": "2388:219:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1940,
										2507
									],
									"body": {
										"id": 593,
										"nodeType": "Block",
										"src": "2793:192:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 586,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 574,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 566,
																"src": "2822:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 576,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2195,
																			"src": "2842:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$2195_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$2195_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 575,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "2837:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2837:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$2195",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 578,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2851:11:2",
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "2837:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "2822:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 585,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 580,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 566,
																"src": "2878:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 582,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2241,
																			"src": "2898:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$2241_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$2241_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 581,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "2893:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 583,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2893:21:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$2241",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 584,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2915:11:2",
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "2893:33:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "2878:48:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "2822:104:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 589,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 566,
																"src": "2966:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 587,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2942:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721Upgradeable_$1580_$",
																	"typeString": "type(contract super ERC721Upgradeable)"
																}
															},
															"id": 588,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2948:17:2",
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1940,
															"src": "2942:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 590,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2942:36:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2822:156:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 573,
												"id": 592,
												"nodeType": "Return",
												"src": "2803:175:2"
											}
										]
									},
									"documentation": {
										"id": 564,
										"nodeType": "StructuredDocumentation",
										"src": "2613:56:2",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 594,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2683:17:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 570,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 568,
												"name": "ERC165Upgradeable",
												"nameLocations": [
													"2750:17:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1941,
												"src": "2750:17:2"
											},
											{
												"id": 569,
												"name": "IERC165",
												"nameLocations": [
													"2769:7:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2508,
												"src": "2769:7:2"
											}
										],
										"src": "2741:36:2"
									},
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2708:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "2701:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 565,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2701:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:20:2"
									},
									"returnParameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "2787:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 571,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2787:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2786:6:2"
									},
									"scope": 1580,
									"src": "2674:311:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2120
									],
									"body": {
										"id": 628,
										"nodeType": "Block",
										"src": "3116:193:2",
										"statements": [
											{
												"assignments": [
													604
												],
												"declarations": [
													{
														"constant": false,
														"id": 604,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3148:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 628,
														"src": "3126:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 603,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 602,
																"name": "ERC721Storage",
																"nameLocations": [
																	"3126:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "3126:13:2"
															},
															"referencedDeclaration": 508,
															"src": "3126:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 607,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 605,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "3152:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3152:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3126:45:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 608,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "3185:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 611,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3202:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 610,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3194:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 609,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3194:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 612,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3194:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3185:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 622,
												"nodeType": "IfStatement",
												"src": "3181:87:2",
												"trueBody": {
													"id": 621,
													"nodeType": "Block",
													"src": "3206:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 617,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3254:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 616,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3246:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 615,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3246:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 618,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3246:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 614,
																	"name": "ERC721InvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1989,
																	"src": "3227:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 619,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3227:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 620,
															"nodeType": "RevertStatement",
															"src": "3220:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 623,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "3284:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
															}
														},
														"id": 624,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3286:9:2",
														"memberName": "_balances",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 497,
														"src": "3284:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 626,
													"indexExpression": {
														"id": 625,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "3296:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3284:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 601,
												"id": 627,
												"nodeType": "Return",
												"src": "3277:25:2"
											}
										]
									},
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "2991:48:2",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 629,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3053:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3071:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "3063:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 596,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3062:15:2"
									},
									"returnParameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "3107:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3107:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3106:9:2"
									},
									"scope": 1580,
									"src": "3044:265:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2128
									],
									"body": {
										"id": 641,
										"nodeType": "Block",
										"src": "3438:46:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 638,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 632,
															"src": "3469:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 637,
														"name": "_requireOwned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1515,
														"src": "3455:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3455:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 636,
												"id": 640,
												"nodeType": "Return",
												"src": "3448:29:2"
											}
										]
									},
									"documentation": {
										"id": 630,
										"nodeType": "StructuredDocumentation",
										"src": "3315:46:2",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 642,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "3375:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3391:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "3383:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 631,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3383:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3382:17:2"
									},
									"returnParameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "3429:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3429:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3428:9:2"
									},
									"scope": 1580,
									"src": "3366:118:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2226
									],
									"body": {
										"id": 657,
										"nodeType": "Block",
										"src": "3606:86:2",
										"statements": [
											{
												"assignments": [
													650
												],
												"declarations": [
													{
														"constant": false,
														"id": 650,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3638:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 657,
														"src": "3616:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 649,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 648,
																"name": "ERC721Storage",
																"nameLocations": [
																	"3616:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "3616:13:2"
															},
															"referencedDeclaration": 508,
															"src": "3616:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 653,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 651,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "3642:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3642:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3616:45:2"
											},
											{
												"expression": {
													"expression": {
														"id": 654,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "3678:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
														}
													},
													"id": 655,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3680:5:2",
													"memberName": "_name",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 487,
													"src": "3678:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 647,
												"id": 656,
												"nodeType": "Return",
												"src": "3671:14:2"
											}
										]
									},
									"documentation": {
										"id": 643,
										"nodeType": "StructuredDocumentation",
										"src": "3490:51:2",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 658,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "3555:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3559:2:2"
									},
									"returnParameters": {
										"id": 647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "3591:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 645,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3591:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3590:15:2"
									},
									"scope": 1580,
									"src": "3546:146:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2232
									],
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "3818:88:2",
										"statements": [
											{
												"assignments": [
													666
												],
												"declarations": [
													{
														"constant": false,
														"id": 666,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3850:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 673,
														"src": "3828:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 665,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 664,
																"name": "ERC721Storage",
																"nameLocations": [
																	"3828:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "3828:13:2"
															},
															"referencedDeclaration": 508,
															"src": "3828:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 669,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 667,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "3854:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3854:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3828:45:2"
											},
											{
												"expression": {
													"expression": {
														"id": 670,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 666,
														"src": "3890:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3892:7:2",
													"memberName": "_symbol",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 489,
													"src": "3890:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 663,
												"id": 672,
												"nodeType": "Return",
												"src": "3883:16:2"
											}
										]
									},
									"documentation": {
										"id": 659,
										"nodeType": "StructuredDocumentation",
										"src": "3698:53:2",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3765:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3771:2:2"
									},
									"returnParameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "3803:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 661,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3803:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3802:15:2"
									},
									"scope": 1580,
									"src": "3756:150:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2240
									],
									"body": {
										"id": 709,
										"nodeType": "Block",
										"src": "4051:176:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 683,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "4075:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 682,
														"name": "_requireOwned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1515,
														"src": "4061:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4061:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 685,
												"nodeType": "ExpressionStatement",
												"src": "4061:22:2"
											},
											{
												"assignments": [
													687
												],
												"declarations": [
													{
														"constant": false,
														"id": 687,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "4108:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 709,
														"src": "4094:21:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 686,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "4094:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 690,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 688,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 719,
														"src": "4118:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4118:10:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4094:34:2"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 697,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 693,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 687,
																		"src": "4151:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 692,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4145:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 691,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "4145:5:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 694,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4145:14:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 695,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4160:6:2",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4145:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 696,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4169:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4145:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 706,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4218:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "4145:75:2",
													"trueExpression": {
														"arguments": [
															{
																"id": 701,
																"name": "baseURI",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 687,
																"src": "4187:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															{
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 702,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 677,
																		"src": "4196:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 703,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4204:8:2",
																	"memberName": "toString",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2309,
																	"src": "4196:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (string memory)"
																	}
																},
																"id": 704,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4196:18:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																},
																{
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															],
															"expression": {
																"id": 699,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4173:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																	"typeString": "type(string storage pointer)"
																},
																"typeName": {
																	"id": 698,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "4173:6:2",
																	"typeDescriptions": {}
																}
															},
															"id": 700,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4180:6:2",
															"memberName": "concat",
															"nodeType": "MemberAccess",
															"src": "4173:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
																"typeString": "function () pure returns (string memory)"
															}
														},
														"id": 705,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4173:42:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 681,
												"id": 708,
												"nodeType": "Return",
												"src": "4138:82:2"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "3912:55:2",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 710,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "3981:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3998:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "3990:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3990:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3989:17:2"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "4036:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 679,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4036:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4035:15:2"
									},
									"scope": 1580,
									"src": "3972:255:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 718,
										"nodeType": "Block",
										"src": "4535:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 716,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4552:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 715,
												"id": 717,
												"nodeType": "Return",
												"src": "4545:9:2"
											}
										]
									},
									"documentation": {
										"id": 711,
										"nodeType": "StructuredDocumentation",
										"src": "4233:231:2",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."
									},
									"id": 719,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "4478:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4486:2:2"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "4520:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 713,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4520:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4519:15:2"
									},
									"scope": 1580,
									"src": "4469:92:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2168
									],
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "4679:52:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 728,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 722,
															"src": "4698:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 729,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 724,
															"src": "4702:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 730,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1707,
																"src": "4711:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4711:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 727,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1367,
															1441
														],
														"referencedDeclaration": 1367,
														"src": "4689:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4689:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 733,
												"nodeType": "ExpressionStatement",
												"src": "4689:35:2"
											}
										]
									},
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "4567:46:2",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4627:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4643:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "4635:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 721,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4635:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4655:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "4647:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4647:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4634:29:2"
									},
									"returnParameters": {
										"id": 726,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4679:0:2"
									},
									"scope": 1580,
									"src": "4618:113:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2184
									],
									"body": {
										"id": 751,
										"nodeType": "Block",
										"src": "4868:78:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 744,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "4892:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 743,
														"name": "_requireOwned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1515,
														"src": "4878:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4878:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 746,
												"nodeType": "ExpressionStatement",
												"src": "4878:22:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 748,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "4931:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 747,
														"name": "_getApproved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 922,
														"src": "4918:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4918:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 742,
												"id": 750,
												"nodeType": "Return",
												"src": "4911:28:2"
											}
										]
									},
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "4737:50:2",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 752,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4801:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "4813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4813:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4812:17:2"
									},
									"returnParameters": {
										"id": 742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "4859:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4859:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4858:9:2"
									},
									"scope": 1580,
									"src": "4792:154:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2176
									],
									"body": {
										"id": 767,
										"nodeType": "Block",
										"src": "5088:69:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 761,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1707,
																"src": "5117:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5117:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 763,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "5131:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 764,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 757,
															"src": "5141:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 760,
														"name": "_setApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1486,
														"src": "5098:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5098:52:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 766,
												"nodeType": "ExpressionStatement",
												"src": "5098:52:2"
											}
										]
									},
									"documentation": {
										"id": 753,
										"nodeType": "StructuredDocumentation",
										"src": "4952:56:2",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 768,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "5022:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5048:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "5040:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5040:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "5063:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "5058:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 756,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5058:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5039:33:2"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5088:0:2"
									},
									"scope": 1580,
									"src": "5013:144:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2194
									],
									"body": {
										"id": 791,
										"nodeType": "Block",
										"src": "5317:116:2",
										"statements": [
											{
												"assignments": [
													780
												],
												"declarations": [
													{
														"constant": false,
														"id": 780,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "5349:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 791,
														"src": "5327:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 779,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 778,
																"name": "ERC721Storage",
																"nameLocations": [
																	"5327:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "5327:13:2"
															},
															"referencedDeclaration": 508,
															"src": "5327:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 783,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 781,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "5353:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5353:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5327:45:2"
											},
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"expression": {
																"id": 784,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "5389:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																	"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
																}
															},
															"id": 785,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5391:18:2",
															"memberName": "_operatorApprovals",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 507,
															"src": "5389:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 787,
														"indexExpression": {
															"id": 786,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 771,
															"src": "5410:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5389:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 789,
													"indexExpression": {
														"id": 788,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 773,
														"src": "5417:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5389:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 777,
												"id": 790,
												"nodeType": "Return",
												"src": "5382:44:2"
											}
										]
									},
									"documentation": {
										"id": 769,
										"nodeType": "StructuredDocumentation",
										"src": "5163:55:2",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 792,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "5232:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5257:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "5249:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 770,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5249:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5272:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "5264:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 772,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5264:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5248:33:2"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "5311:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 775,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5311:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5310:6:2"
									},
									"scope": 1580,
									"src": "5223:210:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2160
									],
									"body": {
										"id": 837,
										"nodeType": "Block",
										"src": "5575:498:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 802,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 797,
														"src": "5589:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 805,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5603:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5595:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 803,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5595:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5595:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5589:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 816,
												"nodeType": "IfStatement",
												"src": "5585:87:2",
												"trueBody": {
													"id": 815,
													"nodeType": "Block",
													"src": "5607:65:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 811,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5658:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 810,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5650:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 809,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5650:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 812,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5650:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 808,
																	"name": "ERC721InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2013,
																	"src": "5628:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 813,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5628:33:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 814,
															"nodeType": "RevertStatement",
															"src": "5621:40:2"
														}
													]
												}
											},
											{
												"assignments": [
													818
												],
												"declarations": [
													{
														"constant": false,
														"id": 818,
														"mutability": "mutable",
														"name": "previousOwner",
														"nameLocation": "5898:13:2",
														"nodeType": "VariableDeclaration",
														"scope": 837,
														"src": "5890:21:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 817,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5890:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 825,
												"initialValue": {
													"arguments": [
														{
															"id": 820,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 797,
															"src": "5922:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 821,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "5926:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 822,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1707,
																"src": "5935:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5935:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 819,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "5914:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5914:34:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5890:58:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 826,
														"name": "previousOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 818,
														"src": "5962:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 827,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 795,
														"src": "5979:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5962:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 836,
												"nodeType": "IfStatement",
												"src": "5958:109:2",
												"trueBody": {
													"id": 835,
													"nodeType": "Block",
													"src": "5985:82:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 830,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 795,
																		"src": "6027:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 831,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 799,
																		"src": "6033:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 832,
																		"name": "previousOwner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 818,
																		"src": "6042:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 829,
																	"name": "ERC721IncorrectOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2003,
																	"src": "6006:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$",
																		"typeString": "function (address,uint256,address) pure"
																	}
																},
																"id": 833,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6006:50:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 834,
															"nodeType": "RevertStatement",
															"src": "5999:57:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "5439:51:2",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 838,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5504:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5525:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "5517:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 794,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5517:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5539:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "5531:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 796,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5531:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5551:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "5543:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5543:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5516:43:2"
									},
									"returnParameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5575:0:2"
									},
									"scope": 1580,
									"src": "5495:578:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2150
									],
									"body": {
										"id": 855,
										"nodeType": "Block",
										"src": "6215:56:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 849,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 841,
															"src": "6242:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 850,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "6248:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 851,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "6252:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6261:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 848,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															856,
															882
														],
														"referencedDeclaration": 882,
														"src": "6225:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6225:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 854,
												"nodeType": "ExpressionStatement",
												"src": "6225:39:2"
											}
										]
									},
									"documentation": {
										"id": 839,
										"nodeType": "StructuredDocumentation",
										"src": "6079:55:2",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 856,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "6148:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6173:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "6165:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6165:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6187:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "6179:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 842,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6179:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6199:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "6191:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6191:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6164:43:2"
									},
									"returnParameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6215:0:2"
									},
									"scope": 1580,
									"src": "6139:132:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2140
									],
									"body": {
										"id": 881,
										"nodeType": "Block",
										"src": "6440:105:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 869,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "6463:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 870,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "6469:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 871,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 863,
															"src": "6473:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 868,
														"name": "transferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 838,
														"src": "6450:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6450:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 873,
												"nodeType": "ExpressionStatement",
												"src": "6450:31:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 875,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "6514:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 876,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "6520:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 877,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 863,
															"src": "6524:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 878,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 865,
															"src": "6533:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 874,
														"name": "_checkOnERC721Received",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1579,
														"src": "6491:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6491:47:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 880,
												"nodeType": "ExpressionStatement",
												"src": "6491:47:2"
											}
										]
									},
									"documentation": {
										"id": 857,
										"nodeType": "StructuredDocumentation",
										"src": "6277:55:2",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 882,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "6346:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6371:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6363:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 858,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6363:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6385:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6377:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 860,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6377:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 863,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6397:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6389:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 862,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6389:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 865,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6419:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6406:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 864,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6406:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6362:62:2"
									},
									"returnParameters": {
										"id": 867,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6440:0:2"
									},
									"scope": 1580,
									"src": "6337:208:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 901,
										"nodeType": "Block",
										"src": "7134:97:2",
										"statements": [
											{
												"assignments": [
													892
												],
												"declarations": [
													{
														"constant": false,
														"id": 892,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7166:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 901,
														"src": "7144:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 891,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 890,
																"name": "ERC721Storage",
																"nameLocations": [
																	"7144:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "7144:13:2"
															},
															"referencedDeclaration": 508,
															"src": "7144:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 895,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 893,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "7170:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7170:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7144:45:2"
											},
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 896,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 892,
															"src": "7206:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
															}
														},
														"id": 897,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7208:7:2",
														"memberName": "_owners",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 493,
														"src": "7206:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 899,
													"indexExpression": {
														"id": 898,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 885,
														"src": "7216:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7206:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 889,
												"id": 900,
												"nodeType": "Return",
												"src": "7199:25:2"
											}
										]
									},
									"documentation": {
										"id": 883,
										"nodeType": "StructuredDocumentation",
										"src": "6551:503:2",
										"text": " @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."
									},
									"id": 902,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownerOf",
									"nameLocation": "7068:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7085:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "7077:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 884,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7077:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7076:17:2"
									},
									"returnParameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "7125:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7125:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7124:9:2"
									},
									"scope": 1580,
									"src": "7059:172:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "7426:105:2",
										"statements": [
											{
												"assignments": [
													912
												],
												"declarations": [
													{
														"constant": false,
														"id": 912,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7458:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 921,
														"src": "7436:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 911,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 910,
																"name": "ERC721Storage",
																"nameLocations": [
																	"7436:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "7436:13:2"
															},
															"referencedDeclaration": 508,
															"src": "7436:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 915,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 913,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "7462:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7462:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7436:45:2"
											},
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 916,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 912,
															"src": "7498:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
															}
														},
														"id": 917,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7500:15:2",
														"memberName": "_tokenApprovals",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 501,
														"src": "7498:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 919,
													"indexExpression": {
														"id": 918,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "7516:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7498:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 909,
												"id": 920,
												"nodeType": "Return",
												"src": "7491:33:2"
											}
										]
									},
									"documentation": {
										"id": 903,
										"nodeType": "StructuredDocumentation",
										"src": "7237:105:2",
										"text": " @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."
									},
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getApproved",
									"nameLocation": "7356:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7377:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "7369:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7369:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7368:17:2"
									},
									"returnParameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 908,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "7417:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 907,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7417:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7416:9:2"
									},
									"scope": 1580,
									"src": "7347:184:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 957,
										"nodeType": "Block",
										"src": "7951:163:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 955,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 939,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 934,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 927,
															"src": "7980:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 937,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7999:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 936,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7991:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 935,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7991:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 938,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7991:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "7980:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 953,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 942,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 940,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 925,
																			"src": "8018:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 941,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 927,
																			"src": "8027:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "8018:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 944,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 925,
																				"src": "8055:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 945,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 927,
																				"src": "8062:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 943,
																			"name": "isApprovedForAll",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 792,
																			"src": "8038:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																				"typeString": "function (address,address) view returns (bool)"
																			}
																		},
																		"id": 946,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8038:32:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "8018:52:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 952,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 949,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 929,
																				"src": "8087:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 948,
																			"name": "_getApproved",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 922,
																			"src": "8074:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																				"typeString": "function (uint256) view returns (address)"
																			}
																		},
																		"id": 950,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8074:21:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 951,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 927,
																		"src": "8099:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "8074:32:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "8018:88:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 954,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8017:90:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "7980:127:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 933,
												"id": 956,
												"nodeType": "Return",
												"src": "7961:146:2"
											}
										]
									},
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "7537:300:2",
										"text": " @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."
									},
									"id": 958,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isAuthorized",
									"nameLocation": "7851:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "7873:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "7865:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 924,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7865:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7888:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "7880:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7880:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7905:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "7897:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 928,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7897:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7864:49:2"
									},
									"returnParameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "7945:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 931,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7945:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7944:6:2"
									},
									"scope": 1580,
									"src": "7842:272:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 994,
										"nodeType": "Block",
										"src": "8645:271:2",
										"statements": [
											{
												"condition": {
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "8659:39:2",
													"subExpression": {
														"arguments": [
															{
																"id": 969,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 961,
																"src": "8674:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 970,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 963,
																"src": "8681:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 971,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 965,
																"src": "8690:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 968,
															"name": "_isAuthorized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 958,
															"src": "8660:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,address,uint256) view returns (bool)"
															}
														},
														"id": 972,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8660:38:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 993,
												"nodeType": "IfStatement",
												"src": "8655:255:2",
												"trueBody": {
													"id": 992,
													"nodeType": "Block",
													"src": "8700:210:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 974,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 961,
																	"src": "8718:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 977,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8735:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 976,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8727:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 975,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8727:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8727:10:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "8718:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 990,
																"nodeType": "Block",
																"src": "8816:84:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 986,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 963,
																					"src": "8868:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 987,
																					"name": "tokenId",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 965,
																					"src": "8877:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 985,
																				"name": "ERC721InsufficientApproval",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2020,
																				"src": "8841:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256) pure"
																				}
																			},
																			"id": 988,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8841:44:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 989,
																		"nodeType": "RevertStatement",
																		"src": "8834:51:2"
																	}
																]
															},
															"id": 991,
															"nodeType": "IfStatement",
															"src": "8714:186:2",
															"trueBody": {
																"id": 984,
																"nodeType": "Block",
																"src": "8739:71:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 981,
																					"name": "tokenId",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 965,
																					"src": "8787:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 980,
																				"name": "ERC721NonexistentToken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1994,
																				"src": "8764:22:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																					"typeString": "function (uint256) pure"
																				}
																			},
																			"id": 982,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8764:31:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 983,
																		"nodeType": "RevertStatement",
																		"src": "8757:38:2"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 959,
										"nodeType": "StructuredDocumentation",
										"src": "8120:423:2",
										"text": " @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."
									},
									"id": 995,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkAuthorized",
									"nameLocation": "8557:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8582:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "8574:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8574:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8597:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "8589:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 962,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8589:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8614:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "8606:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 964,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8606:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8573:49:2"
									},
									"returnParameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8645:0:2"
									},
									"scope": 1580,
									"src": "8548:368:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1018,
										"nodeType": "Block",
										"src": "9633:135:2",
										"statements": [
											{
												"assignments": [
													1005
												],
												"declarations": [
													{
														"constant": false,
														"id": 1005,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "9665:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 1018,
														"src": "9643:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 1004,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1003,
																"name": "ERC721Storage",
																"nameLocations": [
																	"9643:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "9643:13:2"
															},
															"referencedDeclaration": 508,
															"src": "9643:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1008,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1006,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "9669:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 1007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9669:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9643:45:2"
											},
											{
												"id": 1017,
												"nodeType": "UncheckedBlock",
												"src": "9698:64:2",
												"statements": [
													{
														"expression": {
															"id": 1015,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"expression": {
																		"id": 1009,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1005,
																		"src": "9722:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																			"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
																		}
																	},
																	"id": 1012,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9724:9:2",
																	"memberName": "_balances",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 497,
																	"src": "9722:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1013,
																"indexExpression": {
																	"id": 1011,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 998,
																	"src": "9734:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9722:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 1014,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1000,
																"src": "9746:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"src": "9722:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1016,
														"nodeType": "ExpressionStatement",
														"src": "9722:29:2"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 996,
										"nodeType": "StructuredDocumentation",
										"src": "8922:631:2",
										"text": " @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."
									},
									"id": 1019,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_increaseBalance",
									"nameLocation": "9567:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9592:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "9584:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 997,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9584:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9609:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "9601:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 999,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "9601:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9583:32:2"
									},
									"returnParameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9633:0:2"
									},
									"scope": 1580,
									"src": "9558:210:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1120,
										"nodeType": "Block",
										"src": "10456:761:2",
										"statements": [
											{
												"assignments": [
													1033
												],
												"declarations": [
													{
														"constant": false,
														"id": 1033,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "10488:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 1120,
														"src": "10466:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 1032,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1031,
																"name": "ERC721Storage",
																"nameLocations": [
																	"10466:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "10466:13:2"
															},
															"referencedDeclaration": 508,
															"src": "10466:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1036,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1034,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "10492:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 1035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10492:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10466:45:2"
											},
											{
												"assignments": [
													1038
												],
												"declarations": [
													{
														"constant": false,
														"id": 1038,
														"mutability": "mutable",
														"name": "from",
														"nameLocation": "10529:4:2",
														"nodeType": "VariableDeclaration",
														"scope": 1120,
														"src": "10521:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1037,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10521:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1042,
												"initialValue": {
													"arguments": [
														{
															"id": 1040,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1024,
															"src": "10545:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1039,
														"name": "_ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 902,
														"src": "10536:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10536:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10521:32:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1048,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1043,
														"name": "auth",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1026,
														"src": "10613:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1046,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10629:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1045,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10621:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1044,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10621:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1047,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10621:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10613:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1056,
												"nodeType": "IfStatement",
												"src": "10609:86:2",
												"trueBody": {
													"id": 1055,
													"nodeType": "Block",
													"src": "10633:62:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1050,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "10664:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1051,
																		"name": "auth",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1026,
																		"src": "10670:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1052,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1024,
																		"src": "10676:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1049,
																	"name": "_checkAuthorized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 995,
																	"src": "10647:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256) view"
																	}
																},
																"id": 1053,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10647:37:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1054,
															"nodeType": "ExpressionStatement",
															"src": "10647:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1057,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1038,
														"src": "10739:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1060,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10755:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10747:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1058,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10747:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1061,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10747:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10739:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1086,
												"nodeType": "IfStatement",
												"src": "10735:258:2",
												"trueBody": {
													"id": 1085,
													"nodeType": "Block",
													"src": "10759:234:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1066,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10872:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1065,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10864:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1064,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10864:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1067,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10864:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1068,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1024,
																		"src": "10876:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1071,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10893:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1070,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10885:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1069,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10885:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1072,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10885:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "66616c7365",
																		"id": 1073,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10897:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 1063,
																	"name": "_approve",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1367,
																		1441
																	],
																	"referencedDeclaration": 1441,
																	"src": "10855:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$",
																		"typeString": "function (address,uint256,address,bool)"
																	}
																},
																"id": 1074,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10855:48:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1075,
															"nodeType": "ExpressionStatement",
															"src": "10855:48:2"
														},
														{
															"id": 1084,
															"nodeType": "UncheckedBlock",
															"src": "10918:65:2",
															"statements": [
																{
																	"expression": {
																		"id": 1082,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 1076,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1033,
																					"src": "10946:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																						"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
																					}
																				},
																				"id": 1079,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "10948:9:2",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 497,
																				"src": "10946:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1080,
																			"indexExpression": {
																				"id": 1078,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1038,
																				"src": "10958:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "10946:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1081,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10967:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10946:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1083,
																	"nodeType": "ExpressionStatement",
																	"src": "10946:22:2"
																}
															]
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1092,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1087,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1022,
														"src": "11007:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11021:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1089,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11013:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1088,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11013:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1091,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11013:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11007:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1103,
												"nodeType": "IfStatement",
												"src": "11003:109:2",
												"trueBody": {
													"id": 1102,
													"nodeType": "Block",
													"src": "11025:87:2",
													"statements": [
														{
															"id": 1101,
															"nodeType": "UncheckedBlock",
															"src": "11039:63:2",
															"statements": [
																{
																	"expression": {
																		"id": 1099,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 1093,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1033,
																					"src": "11067:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																						"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
																					}
																				},
																				"id": 1096,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "11069:9:2",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 497,
																				"src": "11067:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1097,
																			"indexExpression": {
																				"id": 1095,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1022,
																				"src": "11079:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "11067:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1098,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11086:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11067:20:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1100,
																	"nodeType": "ExpressionStatement",
																	"src": "11067:20:2"
																}
															]
														}
													]
												}
											},
											{
												"expression": {
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"id": 1104,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1033,
																"src": "11122:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																	"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
																}
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11124:7:2",
															"memberName": "_owners",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 493,
															"src": "11122:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 1108,
														"indexExpression": {
															"id": 1106,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1024,
															"src": "11132:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11122:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1109,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1022,
														"src": "11143:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11122:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1111,
												"nodeType": "ExpressionStatement",
												"src": "11122:23:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1113,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1038,
															"src": "11170:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1114,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1022,
															"src": "11176:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1115,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1024,
															"src": "11180:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1112,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2094,
														"src": "11161:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11161:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1117,
												"nodeType": "EmitStatement",
												"src": "11156:32:2"
											},
											{
												"expression": {
													"id": 1118,
													"name": "from",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1038,
													"src": "11206:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1030,
												"id": 1119,
												"nodeType": "Return",
												"src": "11199:11:2"
											}
										]
									},
									"documentation": {
										"id": 1020,
										"nodeType": "StructuredDocumentation",
										"src": "9774:582:2",
										"text": " @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."
									},
									"id": 1121,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "10370:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10386:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "10378:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1021,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10378:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10398:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "10390:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1023,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10390:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "auth",
												"nameLocation": "10415:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "10407:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1025,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10407:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10377:43:2"
									},
									"returnParameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "10447:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10447:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10446:9:2"
									},
									"scope": 1580,
									"src": "10361:856:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1170,
										"nodeType": "Block",
										"src": "11592:274:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1129,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1124,
														"src": "11606:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11620:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1131,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11612:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1130,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11612:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1133,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11612:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11606:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1143,
												"nodeType": "IfStatement",
												"src": "11602:87:2",
												"trueBody": {
													"id": 1142,
													"nodeType": "Block",
													"src": "11624:65:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1138,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11675:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1137,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11667:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1136,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11667:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11667:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1135,
																	"name": "ERC721InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2013,
																	"src": "11645:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1140,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11645:33:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1141,
															"nodeType": "RevertStatement",
															"src": "11638:40:2"
														}
													]
												}
											},
											{
												"assignments": [
													1145
												],
												"declarations": [
													{
														"constant": false,
														"id": 1145,
														"mutability": "mutable",
														"name": "previousOwner",
														"nameLocation": "11706:13:2",
														"nodeType": "VariableDeclaration",
														"scope": 1170,
														"src": "11698:21:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1144,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "11698:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1154,
												"initialValue": {
													"arguments": [
														{
															"id": 1147,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1124,
															"src": "11730:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1148,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1126,
															"src": "11734:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11751:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1150,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11743:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1149,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11743:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 1152,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11743:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1146,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "11722:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11722:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11698:56:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1155,
														"name": "previousOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1145,
														"src": "11768:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1158,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11793:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1157,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11785:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1156,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11785:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1159,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11785:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11768:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1169,
												"nodeType": "IfStatement",
												"src": "11764:96:2",
												"trueBody": {
													"id": 1168,
													"nodeType": "Block",
													"src": "11797:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1164,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11846:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1163,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11838:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1162,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11838:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1165,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11838:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1161,
																	"name": "ERC721InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2008,
																	"src": "11818:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1166,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11818:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1167,
															"nodeType": "RevertStatement",
															"src": "11811:38:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1122,
										"nodeType": "StructuredDocumentation",
										"src": "11223:311:2",
										"text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
									},
									"id": 1171,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "11548:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11562:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "11554:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11554:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "11574:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "11566:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11566:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11553:29:2"
									},
									"returnParameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11592:0:2"
									},
									"scope": 1580,
									"src": "11539:327:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1185,
										"nodeType": "Block",
										"src": "12274:43:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1180,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1174,
															"src": "12294:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1181,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1176,
															"src": "12298:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1182,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12307:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1179,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1186,
															1212
														],
														"referencedDeclaration": 1212,
														"src": "12284:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12284:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1184,
												"nodeType": "ExpressionStatement",
												"src": "12284:26:2"
											}
										]
									},
									"documentation": {
										"id": 1172,
										"nodeType": "StructuredDocumentation",
										"src": "11872:340:2",
										"text": " @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 1186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "12226:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12244:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "12236:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12236:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "12256:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "12248:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12248:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12235:29:2"
									},
									"returnParameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12274:0:2"
									},
									"scope": 1580,
									"src": "12217:100:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1211,
										"nodeType": "Block",
										"src": "12622:98:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1197,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1189,
															"src": "12638:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1198,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "12642:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1196,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1171,
														"src": "12632:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12632:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1200,
												"nodeType": "ExpressionStatement",
												"src": "12632:18:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1204,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12691:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1203,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12683:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1202,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12683:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12683:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1206,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1189,
															"src": "12695:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1207,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "12699:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1208,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "12708:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1201,
														"name": "_checkOnERC721Received",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1579,
														"src": "12660:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12660:53:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1210,
												"nodeType": "ExpressionStatement",
												"src": "12660:53:2"
											}
										]
									},
									"documentation": {
										"id": 1187,
										"nodeType": "StructuredDocumentation",
										"src": "12323:210:2",
										"text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
									},
									"id": 1212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "12547:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12565:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "12557:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12557:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "12577:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "12569:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12569:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "12599:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "12586:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1192,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12586:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12556:48:2"
									},
									"returnParameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12622:0:2"
									},
									"scope": 1580,
									"src": "12538:182:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1244,
										"nodeType": "Block",
										"src": "13087:186:2",
										"statements": [
											{
												"assignments": [
													1219
												],
												"declarations": [
													{
														"constant": false,
														"id": 1219,
														"mutability": "mutable",
														"name": "previousOwner",
														"nameLocation": "13105:13:2",
														"nodeType": "VariableDeclaration",
														"scope": 1244,
														"src": "13097:21:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1218,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "13097:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1231,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1223,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13137:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1222,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "13129:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1221,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "13129:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13129:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1225,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1215,
															"src": "13141:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1228,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13158:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1227,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "13150:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1226,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "13150:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 1229,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13150:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1220,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "13121:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 1230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13121:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13097:64:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1232,
														"name": "previousOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1219,
														"src": "13175:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1235,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13200:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1234,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "13192:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1233,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "13192:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1236,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13192:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13175:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1243,
												"nodeType": "IfStatement",
												"src": "13171:96:2",
												"trueBody": {
													"id": 1242,
													"nodeType": "Block",
													"src": "13204:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1239,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1215,
																		"src": "13248:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1238,
																	"name": "ERC721NonexistentToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1994,
																	"src": "13225:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 1240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13225:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1241,
															"nodeType": "RevertStatement",
															"src": "13218:38:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1213,
										"nodeType": "StructuredDocumentation",
										"src": "12726:315:2",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 1245,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "13055:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1215,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13069:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1245,
												"src": "13061:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13061:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13060:17:2"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13087:0:2"
									},
									"scope": 1580,
									"src": "13046:227:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1304,
										"nodeType": "Block",
										"src": "13668:389:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1255,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1250,
														"src": "13682:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1258,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13696:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1257,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "13688:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1256,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "13688:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1259,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13688:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13682:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1269,
												"nodeType": "IfStatement",
												"src": "13678:87:2",
												"trueBody": {
													"id": 1268,
													"nodeType": "Block",
													"src": "13700:65:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1264,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13751:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1263,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "13743:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1262,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "13743:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1265,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "13743:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1261,
																	"name": "ERC721InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2013,
																	"src": "13721:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1266,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13721:33:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1267,
															"nodeType": "RevertStatement",
															"src": "13714:40:2"
														}
													]
												}
											},
											{
												"assignments": [
													1271
												],
												"declarations": [
													{
														"constant": false,
														"id": 1271,
														"mutability": "mutable",
														"name": "previousOwner",
														"nameLocation": "13782:13:2",
														"nodeType": "VariableDeclaration",
														"scope": 1304,
														"src": "13774:21:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1270,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "13774:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1280,
												"initialValue": {
													"arguments": [
														{
															"id": 1273,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1250,
															"src": "13806:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1274,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1252,
															"src": "13810:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1277,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13827:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1276,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "13819:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1275,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "13819:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 1278,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13819:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1272,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "13798:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 1279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13798:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13774:56:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1281,
														"name": "previousOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1271,
														"src": "13844:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13869:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1283,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "13861:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1282,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "13861:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1285,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13861:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13844:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1294,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1292,
															"name": "previousOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1271,
															"src": "13946:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 1293,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1248,
															"src": "13963:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "13946:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1302,
													"nodeType": "IfStatement",
													"src": "13942:109:2",
													"trueBody": {
														"id": 1301,
														"nodeType": "Block",
														"src": "13969:82:2",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"id": 1296,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1248,
																			"src": "14011:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1297,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1252,
																			"src": "14017:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1298,
																			"name": "previousOwner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1271,
																			"src": "14026:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1295,
																		"name": "ERC721IncorrectOwner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2003,
																		"src": "13990:20:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$",
																			"typeString": "function (address,uint256,address) pure"
																		}
																	},
																	"id": 1299,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "13990:50:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1300,
																"nodeType": "RevertStatement",
																"src": "13983:57:2"
															}
														]
													}
												},
												"id": 1303,
												"nodeType": "IfStatement",
												"src": "13840:211:2",
												"trueBody": {
													"id": 1291,
													"nodeType": "Block",
													"src": "13873:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1288,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "13917:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1287,
																	"name": "ERC721NonexistentToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1994,
																	"src": "13894:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 1289,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13894:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1290,
															"nodeType": "RevertStatement",
															"src": "13887:38:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1246,
										"nodeType": "StructuredDocumentation",
										"src": "13279:313:2",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 1305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "13606:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13624:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "13616:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13616:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13638:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "13630:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13630:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1252,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13650:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "13642:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13642:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13615:43:2"
									},
									"returnParameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13668:0:2"
									},
									"scope": 1580,
									"src": "13597:460:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1322,
										"nodeType": "Block",
										"src": "15065:53:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1316,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "15089:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1317,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1310,
															"src": "15095:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1318,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1312,
															"src": "15099:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1319,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15108:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1315,
														"name": "_safeTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1323,
															1349
														],
														"referencedDeclaration": 1349,
														"src": "15075:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15075:36:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1321,
												"nodeType": "ExpressionStatement",
												"src": "15075:36:2"
											}
										]
									},
									"documentation": {
										"id": 1306,
										"nodeType": "StructuredDocumentation",
										"src": "14063:922:2",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 1323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "14999:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "15021:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "15013:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15013:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15035:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "15027:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15027:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "15047:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "15039:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15039:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15012:43:2"
									},
									"returnParameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15065:0:2"
									},
									"scope": 1580,
									"src": "14990:128:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1348,
										"nodeType": "Block",
										"src": "15457:102:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1336,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1326,
															"src": "15477:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1337,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1328,
															"src": "15483:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1338,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1330,
															"src": "15487:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1335,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1305,
														"src": "15467:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15467:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1340,
												"nodeType": "ExpressionStatement",
												"src": "15467:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1342,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1326,
															"src": "15528:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1343,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1328,
															"src": "15534:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1344,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1330,
															"src": "15538:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1345,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1332,
															"src": "15547:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1341,
														"name": "_checkOnERC721Received",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1579,
														"src": "15505:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15505:47:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1347,
												"nodeType": "ExpressionStatement",
												"src": "15505:47:2"
											}
										]
									},
									"documentation": {
										"id": 1324,
										"nodeType": "StructuredDocumentation",
										"src": "15124:226:2",
										"text": " @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
									},
									"id": 1349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "15364:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "15386:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "15378:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1325,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15378:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15400:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "15392:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15392:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "15412:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "15404:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15404:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "15434:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "15421:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1331,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15421:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15377:62:2"
									},
									"returnParameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15457:0:2"
									},
									"scope": 1580,
									"src": "15355:204:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1366,
										"nodeType": "Block",
										"src": "16072:50:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1360,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1352,
															"src": "16091:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1361,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1354,
															"src": "16095:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1362,
															"name": "auth",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1356,
															"src": "16104:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16110:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1359,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1367,
															1441
														],
														"referencedDeclaration": 1441,
														"src": "16082:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,uint256,address,bool)"
														}
													},
													"id": 1364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16082:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1365,
												"nodeType": "ExpressionStatement",
												"src": "16082:33:2"
											}
										]
									},
									"documentation": {
										"id": 1350,
										"nodeType": "StructuredDocumentation",
										"src": "15565:432:2",
										"text": " @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 1367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "16011:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16028:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "16020:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16020:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16040:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "16032:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16032:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "auth",
												"nameLocation": "16057:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "16049:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16049:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16019:43:2"
									},
									"returnParameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16072:0:2"
									},
									"scope": 1580,
									"src": "16002:120:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1440,
										"nodeType": "Block",
										"src": "16398:625:2",
										"statements": [
											{
												"assignments": [
													1381
												],
												"declarations": [
													{
														"constant": false,
														"id": 1381,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "16430:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 1440,
														"src": "16408:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 1380,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1379,
																"name": "ERC721Storage",
																"nameLocations": [
																	"16408:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "16408:13:2"
															},
															"referencedDeclaration": 508,
															"src": "16408:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1384,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1382,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "16434:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16434:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16408:45:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1385,
														"name": "emitEvent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1376,
														"src": "16519:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1391,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1386,
															"name": "auth",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1374,
															"src": "16532:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "16548:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1388,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16540:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1387,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16540:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 1390,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16540:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "16532:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "16519:31:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1431,
												"nodeType": "IfStatement",
												"src": "16515:460:2",
												"trueBody": {
													"id": 1430,
													"nodeType": "Block",
													"src": "16552:423:2",
													"statements": [
														{
															"assignments": [
																1394
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1394,
																	"mutability": "mutable",
																	"name": "owner",
																	"nameLocation": "16574:5:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 1430,
																	"src": "16566:13:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1393,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "16566:7:2",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1398,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1396,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1372,
																		"src": "16596:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1395,
																	"name": "_requireOwned",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1515,
																	"src": "16582:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 1397,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16582:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "16566:38:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1414,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 1408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1404,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1399,
																			"name": "auth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1374,
																			"src": "16732:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 1402,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "16748:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 1401,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "16740:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1400,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "16740:7:2",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1403,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "16740:10:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "16732:18:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "&&",
																	"rightExpression": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1407,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1405,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1394,
																			"src": "16754:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1406,
																			"name": "auth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1374,
																			"src": "16763:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "16754:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "16732:35:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"id": 1413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "!",
																	"prefix": true,
																	"src": "16771:30:2",
																	"subExpression": {
																		"arguments": [
																			{
																				"id": 1410,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1394,
																				"src": "16789:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1411,
																				"name": "auth",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1374,
																				"src": "16796:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1409,
																			"name": "isApprovedForAll",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 792,
																			"src": "16772:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																				"typeString": "function (address,address) view returns (bool)"
																			}
																		},
																		"id": 1412,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "16772:29:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "16732:69:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1420,
															"nodeType": "IfStatement",
															"src": "16728:142:2",
															"trueBody": {
																"id": 1419,
																"nodeType": "Block",
																"src": "16803:67:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1416,
																					"name": "auth",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1374,
																					"src": "16850:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1415,
																				"name": "ERC721InvalidApprover",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2025,
																				"src": "16828:21:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 1417,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "16828:27:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1418,
																		"nodeType": "RevertStatement",
																		"src": "16821:34:2"
																	}
																]
															}
														},
														{
															"condition": {
																"id": 1421,
																"name": "emitEvent",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1376,
																"src": "16888:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1429,
															"nodeType": "IfStatement",
															"src": "16884:81:2",
															"trueBody": {
																"id": 1428,
																"nodeType": "Block",
																"src": "16899:66:2",
																"statements": [
																	{
																		"eventCall": {
																			"arguments": [
																				{
																					"id": 1423,
																					"name": "owner",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1394,
																					"src": "16931:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1424,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1370,
																					"src": "16938:2:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1425,
																					"name": "tokenId",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1372,
																					"src": "16942:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1422,
																				"name": "Approval",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2103,
																				"src": "16922:8:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,uint256)"
																				}
																			},
																			"id": 1426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "16922:28:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1427,
																		"nodeType": "EmitStatement",
																		"src": "16917:33:2"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"id": 1438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"id": 1432,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1381,
																"src": "16985:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																	"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
																}
															},
															"id": 1435,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "16987:15:2",
															"memberName": "_tokenApprovals",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 501,
															"src": "16985:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 1436,
														"indexExpression": {
															"id": 1434,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1372,
															"src": "17003:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "16985:26:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1437,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1370,
														"src": "17014:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "16985:31:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1439,
												"nodeType": "ExpressionStatement",
												"src": "16985:31:2"
											}
										]
									},
									"documentation": {
										"id": 1368,
										"nodeType": "StructuredDocumentation",
										"src": "16128:171:2",
										"text": " @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."
									},
									"id": 1441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "16313:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16330:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "16322:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16322:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16342:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "16334:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16334:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "auth",
												"nameLocation": "16359:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "16351:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16351:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "16370:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "16365:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1375,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16365:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16321:59:2"
									},
									"returnParameters": {
										"id": 1378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16398:0:2"
									},
									"scope": 1580,
									"src": "16304:719:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1485,
										"nodeType": "Block",
										"src": "17325:276:2",
										"statements": [
											{
												"assignments": [
													1453
												],
												"declarations": [
													{
														"constant": false,
														"id": 1453,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "17357:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 1485,
														"src": "17335:23:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
															"typeString": "struct ERC721Upgradeable.ERC721Storage"
														},
														"typeName": {
															"id": 1452,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1451,
																"name": "ERC721Storage",
																"nameLocations": [
																	"17335:13:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 508,
																"src": "17335:13:2"
															},
															"referencedDeclaration": 508,
															"src": "17335:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																"typeString": "struct ERC721Upgradeable.ERC721Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1456,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1454,
														"name": "_getERC721Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "17361:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$508_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"
														}
													},
													"id": 1455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17361:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
														"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17335:45:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1457,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1446,
														"src": "17394:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1460,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17414:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1459,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "17406:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1458,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "17406:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1461,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17406:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "17394:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1468,
												"nodeType": "IfStatement",
												"src": "17390:91:2",
												"trueBody": {
													"id": 1467,
													"nodeType": "Block",
													"src": "17418:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1464,
																		"name": "operator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1446,
																		"src": "17461:8:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1463,
																	"name": "ERC721InvalidOperator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2030,
																	"src": "17439:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17439:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1466,
															"nodeType": "RevertStatement",
															"src": "17432:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"expression": {
																	"id": 1469,
																	"name": "$",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1453,
																	"src": "17490:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ERC721Storage_$508_storage_ptr",
																		"typeString": "struct ERC721Upgradeable.ERC721Storage storage pointer"
																	}
																},
																"id": 1473,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "17492:18:2",
																"memberName": "_operatorApprovals",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 507,
																"src": "17490:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 1474,
															"indexExpression": {
																"id": 1471,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1444,
																"src": "17511:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "17490:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1475,
														"indexExpression": {
															"id": 1472,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1446,
															"src": "17518:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "17490:37:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1476,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "17530:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "17490:48:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1478,
												"nodeType": "ExpressionStatement",
												"src": "17490:48:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1480,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1444,
															"src": "17568:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1481,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1446,
															"src": "17575:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1482,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1448,
															"src": "17585:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1479,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2112,
														"src": "17553:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 1483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17553:41:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1484,
												"nodeType": "EmitStatement",
												"src": "17548:46:2"
											}
										]
									},
									"documentation": {
										"id": 1442,
										"nodeType": "StructuredDocumentation",
										"src": "17029:198:2",
										"text": " @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"id": 1486,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setApprovalForAll",
									"nameLocation": "17241:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "17268:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1486,
												"src": "17260:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17260:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1446,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "17283:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1486,
												"src": "17275:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1445,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17275:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "17298:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1486,
												"src": "17293:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1447,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "17293:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17259:48:2"
									},
									"returnParameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17325:0:2"
									},
									"scope": 1580,
									"src": "17232:369:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1514,
										"nodeType": "Block",
										"src": "17908:169:2",
										"statements": [
											{
												"assignments": [
													1495
												],
												"declarations": [
													{
														"constant": false,
														"id": 1495,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "17926:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 1514,
														"src": "17918:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1494,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "17918:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1499,
												"initialValue": {
													"arguments": [
														{
															"id": 1497,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1489,
															"src": "17943:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1496,
														"name": "_ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 902,
														"src": "17934:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17934:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17918:33:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1500,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1495,
														"src": "17965:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1503,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17982:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1502,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "17974:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1501,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "17974:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 1504,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17974:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "17965:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1511,
												"nodeType": "IfStatement",
												"src": "17961:88:2",
												"trueBody": {
													"id": 1510,
													"nodeType": "Block",
													"src": "17986:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1507,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1489,
																		"src": "18030:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1506,
																	"name": "ERC721NonexistentToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1994,
																	"src": "18007:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 1508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18007:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1509,
															"nodeType": "RevertStatement",
															"src": "18000:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1512,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1495,
													"src": "18065:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1493,
												"id": 1513,
												"nodeType": "Return",
												"src": "18058:12:2"
											}
										]
									},
									"documentation": {
										"id": 1487,
										"nodeType": "StructuredDocumentation",
										"src": "17607:224:2",
										"text": " @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."
									},
									"id": 1515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireOwned",
									"nameLocation": "17845:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1489,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "17867:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "17859:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17859:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17858:17:2"
									},
									"returnParameters": {
										"id": 1493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "17899:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1491,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17899:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17898:9:2"
									},
									"scope": 1580,
									"src": "17836:241:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1578,
										"nodeType": "Block",
										"src": "18718:680:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1527,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1520,
																"src": "18732:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1528,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "18735:4:2",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "18732:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1529,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "18740:6:2",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "18732:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1530,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "18749:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "18732:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1577,
												"nodeType": "IfStatement",
												"src": "18728:664:2",
												"trueBody": {
													"id": 1576,
													"nodeType": "Block",
													"src": "18752:640:2",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 1556,
																		"nodeType": "Block",
																		"src": "18866:162:2",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					},
																					"id": 1549,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1545,
																						"name": "retval",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1543,
																						"src": "18888:6:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "!=",
																					"rightExpression": {
																						"expression": {
																							"expression": {
																								"id": 1546,
																								"name": "IERC721Receiver",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2213,
																								"src": "18898:15:2",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$2213_$",
																									"typeString": "type(contract IERC721Receiver)"
																								}
																							},
																							"id": 1547,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberLocation": "18914:16:2",
																							"memberName": "onERC721Received",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 2212,
																							"src": "18898:32:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
																								"typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
																							}
																						},
																						"id": 1548,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberLocation": "18931:8:2",
																						"memberName": "selector",
																						"nodeType": "MemberAccess",
																						"src": "18898:41:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"src": "18888:51:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1555,
																				"nodeType": "IfStatement",
																				"src": "18884:130:2",
																				"trueBody": {
																					"id": 1554,
																					"nodeType": "Block",
																					"src": "18941:73:2",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [
																									{
																										"id": 1551,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1520,
																										"src": "18992:2:2",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									],
																									"id": 1550,
																									"name": "ERC721InvalidReceiver",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2013,
																									"src": "18970:21:2",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																										"typeString": "function (address) pure"
																									}
																								},
																								"id": 1552,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "18970:25:2",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 1553,
																							"nodeType": "RevertStatement",
																							"src": "18963:32:2"
																						}
																					]
																				}
																			}
																		]
																	},
																	"errorName": "",
																	"id": 1557,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 1544,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 1543,
																				"mutability": "mutable",
																				"name": "retval",
																				"nameLocation": "18858:6:2",
																				"nodeType": "VariableDeclaration",
																				"scope": 1557,
																				"src": "18851:13:2",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				"typeName": {
																					"id": 1542,
																					"name": "bytes4",
																					"nodeType": "ElementaryTypeName",
																					"src": "18851:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "18850:15:2"
																	},
																	"src": "18842:186:2"
																},
																{
																	"block": {
																		"id": 1573,
																		"nodeType": "Block",
																		"src": "19057:325:2",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1564,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 1561,
																							"name": "reason",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1559,
																							"src": "19079:6:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 1562,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "19086:6:2",
																						"memberName": "length",
																						"nodeType": "MemberAccess",
																						"src": "19079:13:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"hexValue": "30",
																						"id": 1563,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "19096:1:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					},
																					"src": "19079:18:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"falseBody": {
																					"id": 1571,
																					"nodeType": "Block",
																					"src": "19178:190:2",
																					"statements": [
																						{
																							"AST": {
																								"nodeType": "YulBlock",
																								"src": "19264:86:2",
																								"statements": [
																									{
																										"expression": {
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nodeType": "YulLiteral",
																															"src": "19301:2:2",
																															"type": "",
																															"value": "32"
																														},
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "19305:6:2"
																														}
																													],
																													"functionName": {
																														"name": "add",
																														"nodeType": "YulIdentifier",
																														"src": "19297:3:2"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "19297:15:2"
																												},
																												{
																													"arguments": [
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "19320:6:2"
																														}
																													],
																													"functionName": {
																														"name": "mload",
																														"nodeType": "YulIdentifier",
																														"src": "19314:5:2"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "19314:13:2"
																												}
																											],
																											"functionName": {
																												"name": "revert",
																												"nodeType": "YulIdentifier",
																												"src": "19290:6:2"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "19290:38:2"
																										},
																										"nodeType": "YulExpressionStatement",
																										"src": "19290:38:2"
																									}
																								]
																							},
																							"documentation": "@solidity memory-safe-assembly",
																							"evmVersion": "shanghai",
																							"externalReferences": [
																								{
																									"declaration": 1559,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "19305:6:2",
																									"valueSize": 1
																								},
																								{
																									"declaration": 1559,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "19320:6:2",
																									"valueSize": 1
																								}
																							],
																							"id": 1570,
																							"nodeType": "InlineAssembly",
																							"src": "19255:95:2"
																						}
																					]
																				},
																				"id": 1572,
																				"nodeType": "IfStatement",
																				"src": "19075:293:2",
																				"trueBody": {
																					"id": 1569,
																					"nodeType": "Block",
																					"src": "19099:73:2",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [
																									{
																										"id": 1566,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1520,
																										"src": "19150:2:2",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									],
																									"id": 1565,
																									"name": "ERC721InvalidReceiver",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2013,
																									"src": "19128:21:2",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																										"typeString": "function (address) pure"
																									}
																								},
																								"id": 1567,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "19128:25:2",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 1568,
																							"nodeType": "RevertStatement",
																							"src": "19121:32:2"
																						}
																					]
																				}
																			}
																		]
																	},
																	"errorName": "",
																	"id": 1574,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 1560,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 1559,
																				"mutability": "mutable",
																				"name": "reason",
																				"nameLocation": "19049:6:2",
																				"nodeType": "VariableDeclaration",
																				"scope": 1574,
																				"src": "19036:19:2",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes"
																				},
																				"typeName": {
																					"id": 1558,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "19036:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_storage_ptr",
																						"typeString": "bytes"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "19035:21:2"
																	},
																	"src": "19029:353:2"
																}
															],
															"externalCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1536,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1707,
																			"src": "18807:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 1537,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "18807:12:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1538,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1518,
																		"src": "18821:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1539,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1522,
																		"src": "18827:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1540,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1524,
																		"src": "18836:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1533,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1520,
																				"src": "18786:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1532,
																			"name": "IERC721Receiver",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2213,
																			"src": "18770:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$2213_$",
																				"typeString": "type(contract IERC721Receiver)"
																			}
																		},
																		"id": 1534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "18770:19:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721Receiver_$2213",
																			"typeString": "contract IERC721Receiver"
																		}
																	},
																	"id": 1535,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "18790:16:2",
																	"memberName": "onERC721Received",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2212,
																	"src": "18770:36:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																		"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																	}
																},
																"id": 1541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18770:71:2",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"id": 1575,
															"nodeType": "TryStatement",
															"src": "18766:616:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1516,
										"nodeType": "StructuredDocumentation",
										"src": "18083:528:2",
										"text": " @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"
									},
									"id": 1579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnERC721Received",
									"nameLocation": "18625:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1518,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "18656:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "18648:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18648:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1520,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "18670:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "18662:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18662:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "18682:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "18674:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1521,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18674:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1524,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "18704:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "18691:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1523,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18691:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18647:62:2"
									},
									"returnParameters": {
										"id": 1526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18718:0:2"
									},
									"scope": 1580,
									"src": "18616:782:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1581,
							"src": "1100:18300:2",
							"usedErrors": [
								211,
								214,
								1989,
								1994,
								2003,
								2008,
								2013,
								2020,
								2025,
								2030
							],
							"usedEvents": [
								219,
								2094,
								2103,
								2112
							]
						}
					],
					"src": "107:19294:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1725
						],
						"ERC721BurnableUpgradeable": [
							1625
						],
						"ERC721Upgradeable": [
							1580
						],
						"Initializable": [
							448
						]
					},
					"id": 1626,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1582,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "126:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
							"file": "../ERC721Upgradeable.sol",
							"id": 1584,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1626,
							"sourceUnit": 1581,
							"src": "152:59:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1583,
										"name": "ERC721Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1580,
										"src": "160:17:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../../utils/ContextUpgradeable.sol",
							"id": 1586,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1626,
							"sourceUnit": 1726,
							"src": "212:73:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1585,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1725,
										"src": "220:18:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../../proxy/utils/Initializable.sol",
							"id": 1588,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1626,
							"sourceUnit": 449,
							"src": "286:69:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1587,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "294:13:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1590,
										"name": "Initializable",
										"nameLocations": [
											"497:13:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "497:13:3"
									},
									"id": 1591,
									"nodeType": "InheritanceSpecifier",
									"src": "497:13:3"
								},
								{
									"baseName": {
										"id": 1592,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"512:18:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1725,
										"src": "512:18:3"
									},
									"id": 1593,
									"nodeType": "InheritanceSpecifier",
									"src": "512:18:3"
								},
								{
									"baseName": {
										"id": 1594,
										"name": "ERC721Upgradeable",
										"nameLocations": [
											"532:17:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1580,
										"src": "532:17:3"
									},
									"id": 1595,
									"nodeType": "InheritanceSpecifier",
									"src": "532:17:3"
								}
							],
							"canonicalName": "ERC721BurnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1589,
								"nodeType": "StructuredDocumentation",
								"src": "357:92:3",
								"text": " @title ERC721 Burnable Token\n @dev ERC721 Token that can be burned (destroyed)."
							},
							"fullyImplemented": true,
							"id": 1625,
							"linearizedBaseContracts": [
								1625,
								1580,
								2031,
								2241,
								2195,
								1941,
								2508,
								1725,
								448
							],
							"name": "ERC721BurnableUpgradeable",
							"nameLocation": "468:25:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1600,
										"nodeType": "Block",
										"src": "615:7:3",
										"statements": []
									},
									"id": 1601,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1598,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1597,
												"name": "onlyInitializing",
												"nameLocations": [
													"598:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "598:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "598:16:3"
										}
									],
									"name": "__ERC721Burnable_init",
									"nameLocation": "565:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "586:2:3"
									},
									"returnParameters": {
										"id": 1599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "615:0:3"
									},
									"scope": 1625,
									"src": "556:66:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1606,
										"nodeType": "Block",
										"src": "697:7:3",
										"statements": []
									},
									"id": 1607,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1604,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1603,
												"name": "onlyInitializing",
												"nameLocations": [
													"680:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "680:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "680:16:3"
										}
									],
									"name": "__ERC721Burnable_init_unchained",
									"nameLocation": "637:31:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1602,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "668:2:3"
									},
									"returnParameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "697:0:3"
									},
									"scope": 1625,
									"src": "628:76:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1623,
										"nodeType": "Block",
										"src": "922:268:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1616,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1157:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1615,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1149:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1614,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1149:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1617,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1149:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1618,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1610,
															"src": "1161:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1619,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1707,
																"src": "1170:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1170:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1613,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "1141:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 1621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1141:42:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1622,
												"nodeType": "ExpressionStatement",
												"src": "1141:42:3"
											}
										]
									},
									"documentation": {
										"id": 1608,
										"nodeType": "StructuredDocumentation",
										"src": "709:162:3",
										"text": " @dev Burns `tokenId`. See {ERC721-_burn}.\n Requirements:\n - The caller must own `tokenId` or be an approved operator."
									},
									"functionSelector": "42966c68",
									"id": 1624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "885:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1610,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "898:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1624,
												"src": "890:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:17:3"
									},
									"returnParameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "922:0:3"
									},
									"scope": 1625,
									"src": "876:314:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1626,
							"src": "450:742:3",
							"usedErrors": [
								211,
								214,
								1989,
								1994,
								2003,
								2008,
								2013,
								2020,
								2025,
								2030
							],
							"usedEvents": [
								219,
								2094,
								2103,
								2112
							]
						}
					],
					"src": "126:1067:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol",
					"exportedSymbols": {
						"ERC721PausableUpgradeable": [
							1679
						],
						"ERC721Upgradeable": [
							1580
						],
						"Initializable": [
							448
						],
						"PausableUpgradeable": [
							1901
						]
					},
					"id": 1680,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1627,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "126:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
							"file": "../ERC721Upgradeable.sol",
							"id": 1629,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1680,
							"sourceUnit": 1581,
							"src": "152:59:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1628,
										"name": "ERC721Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1580,
										"src": "160:17:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
							"file": "../../../utils/PausableUpgradeable.sol",
							"id": 1631,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1680,
							"sourceUnit": 1902,
							"src": "212:75:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1630,
										"name": "PausableUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1901,
										"src": "220:19:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../../proxy/utils/Initializable.sol",
							"id": 1633,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1680,
							"sourceUnit": 449,
							"src": "288:69:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1632,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "296:13:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1635,
										"name": "Initializable",
										"nameLocations": [
											"1095:13:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "1095:13:4"
									},
									"id": 1636,
									"nodeType": "InheritanceSpecifier",
									"src": "1095:13:4"
								},
								{
									"baseName": {
										"id": 1637,
										"name": "ERC721Upgradeable",
										"nameLocations": [
											"1110:17:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1580,
										"src": "1110:17:4"
									},
									"id": 1638,
									"nodeType": "InheritanceSpecifier",
									"src": "1110:17:4"
								},
								{
									"baseName": {
										"id": 1639,
										"name": "PausableUpgradeable",
										"nameLocations": [
											"1129:19:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1901,
										"src": "1129:19:4"
									},
									"id": 1640,
									"nodeType": "InheritanceSpecifier",
									"src": "1129:19:4"
								}
							],
							"canonicalName": "ERC721PausableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1634,
								"nodeType": "StructuredDocumentation",
								"src": "359:688:4",
								"text": " @dev ERC721 token with pausable token transfers, minting and burning.\n Useful for scenarios such as preventing trades until the end of an evaluation\n period, or having an emergency switch for freezing all token transfers in the\n event of a large bug.\n IMPORTANT: This contract does not include public pause and unpause functions. In\n addition to inheriting this contract, you must define both functions, invoking the\n {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n make the contract pause mechanism of the contract unreachable, and thus unusable."
							},
							"fullyImplemented": true,
							"id": 1679,
							"linearizedBaseContracts": [
								1679,
								1901,
								1580,
								2031,
								2241,
								2195,
								1941,
								2508,
								1725,
								448
							],
							"name": "ERC721PausableUpgradeable",
							"nameLocation": "1066:25:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1648,
										"nodeType": "Block",
										"src": "1214:44:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1645,
														"name": "__Pausable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1795,
														"src": "1224:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1224:27:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1647,
												"nodeType": "ExpressionStatement",
												"src": "1224:27:4"
											}
										]
									},
									"id": 1649,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1643,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1642,
												"name": "onlyInitializing",
												"nameLocations": [
													"1197:16:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1197:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1197:16:4"
										}
									],
									"name": "__ERC721Pausable_init",
									"nameLocation": "1164:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1185:2:4"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1214:0:4"
									},
									"scope": 1679,
									"src": "1155:103:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1654,
										"nodeType": "Block",
										"src": "1333:7:4",
										"statements": []
									},
									"id": 1655,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1652,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1651,
												"name": "onlyInitializing",
												"nameLocations": [
													"1316:16:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1316:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1316:16:4"
										}
									],
									"name": "__ERC721Pausable_init_unchained",
									"nameLocation": "1273:31:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1650,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1304:2:4"
									},
									"returnParameters": {
										"id": 1653,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1333:0:4"
									},
									"scope": 1679,
									"src": "1264:76:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1121
									],
									"body": {
										"id": 1677,
										"nodeType": "Block",
										"src": "1620:56:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1672,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1658,
															"src": "1651:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1673,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1660,
															"src": "1655:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1674,
															"name": "auth",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1662,
															"src": "1664:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1670,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1637:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC721PausableUpgradeable_$1679_$",
																"typeString": "type(contract super ERC721PausableUpgradeable)"
															}
														},
														"id": 1671,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1643:7:4",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1121,
														"src": "1637:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 1675,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1637:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1669,
												"id": 1676,
												"nodeType": "Return",
												"src": "1630:39:4"
											}
										]
									},
									"documentation": {
										"id": 1656,
										"nodeType": "StructuredDocumentation",
										"src": "1345:122:4",
										"text": " @dev See {ERC721-_update}.\n Requirements:\n - the contract must not be paused."
									},
									"id": 1678,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1666,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1665,
												"name": "whenNotPaused",
												"nameLocations": [
													"1588:13:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1803,
												"src": "1588:13:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1588:13:4"
										}
									],
									"name": "_update",
									"nameLocation": "1481:7:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1664,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1579:8:4"
									},
									"parameters": {
										"id": 1663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1506:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "1498:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1657,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1526:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "1518:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1518:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1662,
												"mutability": "mutable",
												"name": "auth",
												"nameLocation": "1551:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "1543:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1661,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1543:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1488:73:4"
									},
									"returnParameters": {
										"id": 1669,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1668,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "1611:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1667,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1611:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1610:9:4"
									},
									"scope": 1679,
									"src": "1472:204:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1680,
							"src": "1048:630:4",
							"usedErrors": [
								211,
								214,
								1764,
								1767,
								1989,
								1994,
								2003,
								2008,
								2013,
								2020,
								2025,
								2030
							],
							"usedEvents": [
								219,
								1756,
								1761,
								2094,
								2103,
								2112
							]
						}
					],
					"src": "126:1553:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1725
						],
						"Initializable": [
							448
						]
					},
					"id": 1726,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1681,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1683,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1726,
							"sourceUnit": 449,
							"src": "126:63:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1682,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "134:13:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1685,
										"name": "Initializable",
										"nameLocations": [
											"728:13:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "728:13:5"
									},
									"id": 1686,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:5"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1684,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1725,
							"linearizedBaseContracts": [
								1725,
								448
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1691,
										"nodeType": "Block",
										"src": "800:7:5",
										"statements": []
									},
									"id": 1692,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1689,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1688,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "783:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:5"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:5"
									},
									"returnParameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:5"
									},
									"scope": 1725,
									"src": "748:59:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1697,
										"nodeType": "Block",
										"src": "875:7:5",
										"statements": []
									},
									"id": 1698,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1695,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1694,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "858:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:5"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1693,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:5"
									},
									"returnParameters": {
										"id": 1696,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:5"
									},
									"scope": 1725,
									"src": "813:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1706,
										"nodeType": "Block",
										"src": "949:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1703,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:5",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1702,
												"id": 1705,
												"nodeType": "Return",
												"src": "959:17:5"
											}
										]
									},
									"id": 1707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1699,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:5"
									},
									"returnParameters": {
										"id": 1702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1701,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "940:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:5"
									},
									"scope": 1725,
									"src": "887:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1715,
										"nodeType": "Block",
										"src": "1056:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1712,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1713,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:5",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1711,
												"id": 1714,
												"nodeType": "Return",
												"src": "1066:15:5"
											}
										]
									},
									"id": 1716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:5"
									},
									"returnParameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1710,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "1040:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1709,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:5"
									},
									"scope": 1725,
									"src": "989:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1723,
										"nodeType": "Block",
										"src": "1166:25:5",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1721,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1720,
												"id": 1722,
												"nodeType": "Return",
												"src": "1176:8:5"
											}
										]
									},
									"id": 1724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1717,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:5"
									},
									"returnParameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "1157:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:5"
									},
									"scope": 1725,
									"src": "1094:97:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1726,
							"src": "688:505:5",
							"usedErrors": [
								211,
								214
							],
							"usedEvents": [
								219
							]
						}
					],
					"src": "101:1093:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1725
						],
						"Initializable": [
							448
						],
						"PausableUpgradeable": [
							1901
						]
					},
					"id": 1902,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1727,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 1729,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1902,
							"sourceUnit": 1726,
							"src": "128:67:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1728,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1725,
										"src": "136:18:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1731,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1902,
							"sourceUnit": 449,
							"src": "196:63:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1730,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "204:13:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1733,
										"name": "Initializable",
										"nameLocations": [
											"742:13:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "742:13:6"
									},
									"id": 1734,
									"nodeType": "InheritanceSpecifier",
									"src": "742:13:6"
								},
								{
									"baseName": {
										"id": 1735,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"757:18:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1725,
										"src": "757:18:6"
									},
									"id": 1736,
									"nodeType": "InheritanceSpecifier",
									"src": "757:18:6"
								}
							],
							"canonicalName": "PausableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1732,
								"nodeType": "StructuredDocumentation",
								"src": "261:439:6",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 1901,
							"linearizedBaseContracts": [
								1901,
								1725,
								448
							],
							"name": "PausableUpgradeable",
							"nameLocation": "719:19:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "PausableUpgradeable.PausableStorage",
									"documentation": {
										"id": 1737,
										"nodeType": "StructuredDocumentation",
										"src": "782:66:6",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Pausable"
									},
									"id": 1740,
									"members": [
										{
											"constant": false,
											"id": 1739,
											"mutability": "mutable",
											"name": "_paused",
											"nameLocation": "891:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 1740,
											"src": "886:12:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1738,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "886:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PausableStorage",
									"nameLocation": "860:15:6",
									"nodeType": "StructDefinition",
									"scope": 1901,
									"src": "853:52:6",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 1743,
									"mutability": "constant",
									"name": "PausableStorageLocation",
									"nameLocation": "1048:23:6",
									"nodeType": "VariableDeclaration",
									"scope": 1901,
									"src": "1023:117:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1741,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1023:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307863643565643135633665313837653737653961656538383138346332316634663231383261623538323763623362376530376662656463643633663033333030",
										"id": 1742,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1074:66:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_92891662540554778686986514950364265630913525426840345632122912437671245656832_by_1",
											"typeString": "int_const 9289...(69 digits omitted)...6832"
										},
										"value": "0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1750,
										"nodeType": "Block",
										"src": "1227:82:6",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1246:57:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1260:33:6",
															"value": {
																"name": "PausableStorageLocation",
																"nodeType": "YulIdentifier",
																"src": "1270:23:6"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nodeType": "YulIdentifier",
																	"src": "1260:6:6"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1747,
														"isOffset": false,
														"isSlot": true,
														"src": "1260:6:6",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1743,
														"isOffset": false,
														"isSlot": false,
														"src": "1270:23:6",
														"valueSize": 1
													}
												],
												"id": 1749,
												"nodeType": "InlineAssembly",
												"src": "1237:66:6"
											}
										]
									},
									"id": 1751,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getPausableStorage",
									"nameLocation": "1156:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1175:2:6"
									},
									"returnParameters": {
										"id": 1748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1747,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1224:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "1200:25:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
													"typeString": "struct PausableUpgradeable.PausableStorage"
												},
												"typeName": {
													"id": 1746,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1745,
														"name": "PausableStorage",
														"nameLocations": [
															"1200:15:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1740,
														"src": "1200:15:6"
													},
													"referencedDeclaration": 1740,
													"src": "1200:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1199:27:6"
									},
									"scope": 1901,
									"src": "1147:162:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1752,
										"nodeType": "StructuredDocumentation",
										"src": "1315:73:6",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 1756,
									"name": "Paused",
									"nameLocation": "1399:6:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1754,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1414:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "1406:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1753,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1405:17:6"
									},
									"src": "1393:30:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1757,
										"nodeType": "StructuredDocumentation",
										"src": "1429:70:6",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 1761,
									"name": "Unpaused",
									"nameLocation": "1510:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1759,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1527:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1761,
												"src": "1519:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1758,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1518:17:6"
									},
									"src": "1504:32:6"
								},
								{
									"documentation": {
										"id": 1762,
										"nodeType": "StructuredDocumentation",
										"src": "1542:76:6",
										"text": " @dev The operation failed because the contract is paused."
									},
									"errorSelector": "d93c0665",
									"id": 1764,
									"name": "EnforcedPause",
									"nameLocation": "1629:13:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1642:2:6"
									},
									"src": "1623:22:6"
								},
								{
									"documentation": {
										"id": 1765,
										"nodeType": "StructuredDocumentation",
										"src": "1651:80:6",
										"text": " @dev The operation failed because the contract is not paused."
									},
									"errorSelector": "8dfc202b",
									"id": 1767,
									"name": "ExpectedPause",
									"nameLocation": "1742:13:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1755:2:6"
									},
									"src": "1736:22:6"
								},
								{
									"body": {
										"id": 1776,
										"nodeType": "Block",
										"src": "1889:44:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1773,
														"name": "__Pausable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1795,
														"src": "1899:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1899:27:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1775,
												"nodeType": "ExpressionStatement",
												"src": "1899:27:6"
											}
										]
									},
									"documentation": {
										"id": 1768,
										"nodeType": "StructuredDocumentation",
										"src": "1764:67:6",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 1777,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1771,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1770,
												"name": "onlyInitializing",
												"nameLocations": [
													"1872:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1872:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1872:16:6"
										}
									],
									"name": "__Pausable_init",
									"nameLocation": "1845:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1769,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1860:2:6"
									},
									"returnParameters": {
										"id": 1772,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1889:0:6"
									},
									"scope": 1901,
									"src": "1836:97:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1794,
										"nodeType": "Block",
										"src": "2002:93:6",
										"statements": [
											{
												"assignments": [
													1784
												],
												"declarations": [
													{
														"constant": false,
														"id": 1784,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2036:1:6",
														"nodeType": "VariableDeclaration",
														"scope": 1794,
														"src": "2012:25:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage"
														},
														"typeName": {
															"id": 1783,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1782,
																"name": "PausableStorage",
																"nameLocations": [
																	"2012:15:6"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1740,
																"src": "2012:15:6"
															},
															"referencedDeclaration": 1740,
															"src": "2012:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1787,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1785,
														"name": "_getPausableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1751,
														"src": "2040:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$1740_storage_ptr_$",
															"typeString": "function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"
														}
													},
													"id": 1786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2040:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2012:49:6"
											},
											{
												"expression": {
													"id": 1792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1788,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1784,
															"src": "2071:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
															}
														},
														"id": 1790,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2073:7:6",
														"memberName": "_paused",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1739,
														"src": "2071:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1791,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2083:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2071:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1793,
												"nodeType": "ExpressionStatement",
												"src": "2071:17:6"
											}
										]
									},
									"id": 1795,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1780,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1779,
												"name": "onlyInitializing",
												"nameLocations": [
													"1985:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1985:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1985:16:6"
										}
									],
									"name": "__Pausable_init_unchained",
									"nameLocation": "1948:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1778,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1973:2:6"
									},
									"returnParameters": {
										"id": 1781,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2002:0:6"
									},
									"scope": 1901,
									"src": "1939:156:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1802,
										"nodeType": "Block",
										"src": "2306:47:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1798,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1839,
														"src": "2316:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2316:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1800,
												"nodeType": "ExpressionStatement",
												"src": "2316:19:6"
											},
											{
												"id": 1801,
												"nodeType": "PlaceholderStatement",
												"src": "2345:1:6"
											}
										]
									},
									"documentation": {
										"id": 1796,
										"nodeType": "StructuredDocumentation",
										"src": "2101:175:6",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1803,
									"name": "whenNotPaused",
									"nameLocation": "2290:13:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1797,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2303:2:6"
									},
									"src": "2281:72:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1810,
										"nodeType": "Block",
										"src": "2553:44:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1806,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1852,
														"src": "2563:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2563:16:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1808,
												"nodeType": "ExpressionStatement",
												"src": "2563:16:6"
											},
											{
												"id": 1809,
												"nodeType": "PlaceholderStatement",
												"src": "2589:1:6"
											}
										]
									},
									"documentation": {
										"id": 1804,
										"nodeType": "StructuredDocumentation",
										"src": "2359:167:6",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 1811,
									"name": "whenPaused",
									"nameLocation": "2540:10:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2550:2:6"
									},
									"src": "2531:66:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1826,
										"nodeType": "Block",
										"src": "2745:92:6",
										"statements": [
											{
												"assignments": [
													1819
												],
												"declarations": [
													{
														"constant": false,
														"id": 1819,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2779:1:6",
														"nodeType": "VariableDeclaration",
														"scope": 1826,
														"src": "2755:25:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage"
														},
														"typeName": {
															"id": 1818,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1817,
																"name": "PausableStorage",
																"nameLocations": [
																	"2755:15:6"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1740,
																"src": "2755:15:6"
															},
															"referencedDeclaration": 1740,
															"src": "2755:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1822,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1820,
														"name": "_getPausableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1751,
														"src": "2783:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$1740_storage_ptr_$",
															"typeString": "function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"
														}
													},
													"id": 1821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2783:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2755:49:6"
											},
											{
												"expression": {
													"expression": {
														"id": 1823,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1819,
														"src": "2821:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
														}
													},
													"id": 1824,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2823:7:6",
													"memberName": "_paused",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1739,
													"src": "2821:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1816,
												"id": 1825,
												"nodeType": "Return",
												"src": "2814:16:6"
											}
										]
									},
									"documentation": {
										"id": 1812,
										"nodeType": "StructuredDocumentation",
										"src": "2603:84:6",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 1827,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "2701:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1813,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2707:2:6"
									},
									"returnParameters": {
										"id": 1816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1815,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "2739:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1814,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2739:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2738:6:6"
									},
									"scope": 1901,
									"src": "2692:145:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1838,
										"nodeType": "Block",
										"src": "2956:77:6",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1831,
														"name": "paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1827,
														"src": "2970:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 1832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2970:8:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1837,
												"nodeType": "IfStatement",
												"src": "2966:61:6",
												"trueBody": {
													"id": 1836,
													"nodeType": "Block",
													"src": "2980:47:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1833,
																	"name": "EnforcedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1764,
																	"src": "3001:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3001:15:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1835,
															"nodeType": "RevertStatement",
															"src": "2994:22:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1828,
										"nodeType": "StructuredDocumentation",
										"src": "2843:57:6",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 1839,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "2914:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2931:2:6"
									},
									"returnParameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2956:0:6"
									},
									"scope": 1901,
									"src": "2905:128:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1851,
										"nodeType": "Block",
										"src": "3153:78:6",
										"statements": [
											{
												"condition": {
													"id": 1845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3167:9:6",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1843,
															"name": "paused",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1827,
															"src": "3168:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1844,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3168:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1850,
												"nodeType": "IfStatement",
												"src": "3163:62:6",
												"trueBody": {
													"id": 1849,
													"nodeType": "Block",
													"src": "3178:47:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1846,
																	"name": "ExpectedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1767,
																	"src": "3199:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1847,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3199:15:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1848,
															"nodeType": "RevertStatement",
															"src": "3192:22:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1840,
										"nodeType": "StructuredDocumentation",
										"src": "3039:61:6",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 1852,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "3114:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3128:2:6"
									},
									"returnParameters": {
										"id": 1842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3153:0:6"
									},
									"scope": 1901,
									"src": "3105:126:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1875,
										"nodeType": "Block",
										"src": "3415:127:6",
										"statements": [
											{
												"assignments": [
													1860
												],
												"declarations": [
													{
														"constant": false,
														"id": 1860,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3449:1:6",
														"nodeType": "VariableDeclaration",
														"scope": 1875,
														"src": "3425:25:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage"
														},
														"typeName": {
															"id": 1859,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1858,
																"name": "PausableStorage",
																"nameLocations": [
																	"3425:15:6"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1740,
																"src": "3425:15:6"
															},
															"referencedDeclaration": 1740,
															"src": "3425:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1863,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1861,
														"name": "_getPausableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1751,
														"src": "3453:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$1740_storage_ptr_$",
															"typeString": "function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"
														}
													},
													"id": 1862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3453:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3425:49:6"
											},
											{
												"expression": {
													"id": 1868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1864,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1860,
															"src": "3484:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
															}
														},
														"id": 1866,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3486:7:6",
														"memberName": "_paused",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1739,
														"src": "3484:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1867,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3496:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3484:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1869,
												"nodeType": "ExpressionStatement",
												"src": "3484:16:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1871,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1707,
																"src": "3522:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3522:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1870,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1756,
														"src": "3515:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1873,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3515:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1874,
												"nodeType": "EmitStatement",
												"src": "3510:25:6"
											}
										]
									},
									"documentation": {
										"id": 1853,
										"nodeType": "StructuredDocumentation",
										"src": "3237:124:6",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1876,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1856,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1855,
												"name": "whenNotPaused",
												"nameLocations": [
													"3401:13:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1803,
												"src": "3401:13:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "3401:13:6"
										}
									],
									"name": "_pause",
									"nameLocation": "3375:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3381:2:6"
									},
									"returnParameters": {
										"id": 1857,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3415:0:6"
									},
									"scope": 1901,
									"src": "3366:176:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1899,
										"nodeType": "Block",
										"src": "3722:130:6",
										"statements": [
											{
												"assignments": [
													1884
												],
												"declarations": [
													{
														"constant": false,
														"id": 1884,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3756:1:6",
														"nodeType": "VariableDeclaration",
														"scope": 1899,
														"src": "3732:25:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
															"typeString": "struct PausableUpgradeable.PausableStorage"
														},
														"typeName": {
															"id": 1883,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1882,
																"name": "PausableStorage",
																"nameLocations": [
																	"3732:15:6"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1740,
																"src": "3732:15:6"
															},
															"referencedDeclaration": 1740,
															"src": "3732:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1887,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1885,
														"name": "_getPausableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1751,
														"src": "3760:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$1740_storage_ptr_$",
															"typeString": "function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"
														}
													},
													"id": 1886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3760:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
														"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3732:49:6"
											},
											{
												"expression": {
													"id": 1892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1888,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1884,
															"src": "3791:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PausableStorage_$1740_storage_ptr",
																"typeString": "struct PausableUpgradeable.PausableStorage storage pointer"
															}
														},
														"id": 1890,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3793:7:6",
														"memberName": "_paused",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1739,
														"src": "3791:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1891,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3803:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3791:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1893,
												"nodeType": "ExpressionStatement",
												"src": "3791:17:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1895,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1707,
																"src": "3832:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3832:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1894,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1761,
														"src": "3823:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3823:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1898,
												"nodeType": "EmitStatement",
												"src": "3818:27:6"
											}
										]
									},
									"documentation": {
										"id": 1877,
										"nodeType": "StructuredDocumentation",
										"src": "3548:121:6",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 1900,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1880,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1879,
												"name": "whenPaused",
												"nameLocations": [
													"3711:10:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1811,
												"src": "3711:10:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "3711:10:6"
										}
									],
									"name": "_unpause",
									"nameLocation": "3683:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1878,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3691:2:6"
									},
									"returnParameters": {
										"id": 1881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3722:0:6"
									},
									"scope": 1901,
									"src": "3674:178:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1902,
							"src": "701:3153:6",
							"usedErrors": [
								211,
								214,
								1764,
								1767
							],
							"usedEvents": [
								219,
								1756,
								1761
							]
						}
					],
					"src": "102:3753:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol",
					"exportedSymbols": {
						"ERC165Upgradeable": [
							1941
						],
						"IERC165": [
							2508
						],
						"Initializable": [
							448
						]
					},
					"id": 1942,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1903,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "114:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"id": 1905,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1942,
							"sourceUnit": 2509,
							"src": "140:80:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1904,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2508,
										"src": "148:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 1907,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1942,
							"sourceUnit": 449,
							"src": "221:66:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1906,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 448,
										"src": "229:13:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1909,
										"name": "Initializable",
										"nameLocations": [
											"807:13:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "807:13:7"
									},
									"id": 1910,
									"nodeType": "InheritanceSpecifier",
									"src": "807:13:7"
								},
								{
									"baseName": {
										"id": 1911,
										"name": "IERC165",
										"nameLocations": [
											"822:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2508,
										"src": "822:7:7"
									},
									"id": 1912,
									"nodeType": "InheritanceSpecifier",
									"src": "822:7:7"
								}
							],
							"canonicalName": "ERC165Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1908,
								"nodeType": "StructuredDocumentation",
								"src": "289:478:7",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1941,
							"linearizedBaseContracts": [
								1941,
								2508,
								448
							],
							"name": "ERC165Upgradeable",
							"nameLocation": "786:17:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1917,
										"nodeType": "Block",
										"src": "887:7:7",
										"statements": []
									},
									"id": 1918,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1915,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1914,
												"name": "onlyInitializing",
												"nameLocations": [
													"870:16:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "870:16:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "870:16:7"
										}
									],
									"name": "__ERC165_init",
									"nameLocation": "845:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1913,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:2:7"
									},
									"returnParameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "887:0:7"
									},
									"scope": 1941,
									"src": "836:58:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1923,
										"nodeType": "Block",
										"src": "961:7:7",
										"statements": []
									},
									"id": 1924,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1921,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1920,
												"name": "onlyInitializing",
												"nameLocations": [
													"944:16:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "944:16:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "944:16:7"
										}
									],
									"name": "__ERC165_init_unchained",
									"nameLocation": "909:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "932:2:7"
									},
									"returnParameters": {
										"id": 1922,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "961:0:7"
									},
									"scope": 1941,
									"src": "900:68:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2507
									],
									"body": {
										"id": 1939,
										"nodeType": "Block",
										"src": "1116:64:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 1937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1932,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1927,
														"src": "1133:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1934,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2508,
																	"src": "1153:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$2508_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$2508_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 1933,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "1148:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1935,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1148:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$2508",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 1936,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1162:11:7",
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "1148:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "1133:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1931,
												"id": 1938,
												"nodeType": "Return",
												"src": "1126:47:7"
											}
										]
									},
									"documentation": {
										"id": 1925,
										"nodeType": "StructuredDocumentation",
										"src": "973:56:7",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1940,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "1043:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1927,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "1068:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1940,
												"src": "1061:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1926,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:20:7"
									},
									"returnParameters": {
										"id": 1931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1940,
												"src": "1110:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1929,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1110:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1109:6:7"
									},
									"scope": 1941,
									"src": "1034:146:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1942,
							"src": "768:414:7",
							"usedErrors": [
								211,
								214
							],
							"usedEvents": [
								219
							]
						}
					],
					"src": "114:1069:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							2078
						],
						"IERC20Errors": [
							1983
						],
						"IERC721Errors": [
							2031
						]
					},
					"id": 2079,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1943,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1944,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:8",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 1983,
							"linearizedBaseContracts": [
								1983
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1945,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:8",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 1953,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1947,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1953,
												"src": "652:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1949,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1953,
												"src": "668:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1948,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1951,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1953,
												"src": "685:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1950,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:8"
									},
									"src": "621:80:8"
								},
								{
									"documentation": {
										"id": 1954,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:8",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 1958,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1956,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "889:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:8"
									},
									"src": "864:41:8"
								},
								{
									"documentation": {
										"id": 1959,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:8",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 1963,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1961,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1963,
												"src": "1102:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:8"
									},
									"src": "1075:45:8"
								},
								{
									"documentation": {
										"id": 1964,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:8",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 1972,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1966,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1972,
												"src": "1509:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1965,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1968,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1972,
												"src": "1526:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1970,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1972,
												"src": "1545:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:8"
									},
									"src": "1476:85:8"
								},
								{
									"documentation": {
										"id": 1973,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:8",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 1977,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1975,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1977,
												"src": "1773:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:8"
									},
									"src": "1746:45:8"
								},
								{
									"documentation": {
										"id": 1978,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:8",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 1982,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1980,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "2023:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1979,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:8"
									},
									"src": "1997:43:8"
								}
							],
							"scope": 2079,
							"src": "278:1764:8",
							"usedErrors": [
								1953,
								1958,
								1963,
								1972,
								1977,
								1982
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1984,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:8",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 2031,
							"linearizedBaseContracts": [
								2031
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1985,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:8",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 1989,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1989,
												"src": "2465:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:8"
									},
									"src": "2440:40:8"
								},
								{
									"documentation": {
										"id": 1990,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:8",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 1994,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1992,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "2652:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1991,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:8"
									},
									"src": "2623:46:8"
								},
								{
									"documentation": {
										"id": 1995,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:8",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 2003,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1997,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2003,
												"src": "2996:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1996,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1999,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2003,
												"src": "3012:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1998,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2001,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2003,
												"src": "3029:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:8"
									},
									"src": "2969:75:8"
								},
								{
									"documentation": {
										"id": 2004,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:8",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 2008,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2006,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2008,
												"src": "3233:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2005,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:8"
									},
									"src": "3207:42:8"
								},
								{
									"documentation": {
										"id": 2009,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:8",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 2013,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2011,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "3447:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2010,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:8"
									},
									"src": "3419:46:8"
								},
								{
									"documentation": {
										"id": 2014,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:8",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 2020,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2016,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2020,
												"src": "3756:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2015,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2018,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2020,
												"src": "3774:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:8"
									},
									"src": "3723:68:8"
								},
								{
									"documentation": {
										"id": 2021,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:8",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 2025,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2023,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "4004:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2022,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:8"
									},
									"src": "3976:46:8"
								},
								{
									"documentation": {
										"id": 2026,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:8",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 2030,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2028,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2030,
												"src": "4258:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:8"
									},
									"src": "4230:46:8"
								}
							],
							"scope": 2079,
							"src": "2186:2092:8",
							"usedErrors": [
								1989,
								1994,
								2003,
								2008,
								2013,
								2020,
								2025,
								2030
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2032,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:8",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 2078,
							"linearizedBaseContracts": [
								2078
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2033,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:8",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 2043,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2043,
												"src": "4854:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2043,
												"src": "4870:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2039,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2043,
												"src": "4887:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2041,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2043,
												"src": "4903:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:8"
									},
									"src": "4821:99:8"
								},
								{
									"documentation": {
										"id": 2044,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:8",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 2048,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2046,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2048,
												"src": "5110:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2045,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:8"
									},
									"src": "5083:43:8"
								},
								{
									"documentation": {
										"id": 2049,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:8",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 2053,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2051,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2053,
												"src": "5325:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2050,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:8"
									},
									"src": "5296:47:8"
								},
								{
									"documentation": {
										"id": 2054,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:8",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 2060,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2056,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5645:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2055,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2058,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5663:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2057,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:8"
									},
									"src": "5610:68:8"
								},
								{
									"documentation": {
										"id": 2061,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:8",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 2065,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2065,
												"src": "5892:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2062,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:8"
									},
									"src": "5863:47:8"
								},
								{
									"documentation": {
										"id": 2066,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:8",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 2070,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2068,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2070,
												"src": "6147:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:8"
									},
									"src": "6118:47:8"
								},
								{
									"documentation": {
										"id": 2071,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:8",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 2077,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2076,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2073,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 2077,
												"src": "6488:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2072,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2075,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2077,
												"src": "6507:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2074,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:8"
									},
									"src": "6456:73:8"
								}
							],
							"scope": 2079,
							"src": "4424:2107:8",
							"usedErrors": [
								2043,
								2048,
								2053,
								2060,
								2065,
								2070,
								2077
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							2508
						],
						"IERC721": [
							2195
						]
					},
					"id": 2196,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2080,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "108:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 2082,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2196,
							"sourceUnit": 2509,
							"src": "134:62:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2081,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2508,
										"src": "142:7:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2084,
										"name": "IERC165",
										"nameLocations": [
											"287:7:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2508,
										"src": "287:7:9"
									},
									"id": 2085,
									"nodeType": "InheritanceSpecifier",
									"src": "287:7:9"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2083,
								"nodeType": "StructuredDocumentation",
								"src": "198:67:9",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 2195,
							"linearizedBaseContracts": [
								2195,
								2508
							],
							"name": "IERC721",
							"nameLocation": "276:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2086,
										"nodeType": "StructuredDocumentation",
										"src": "301:88:9",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 2094,
									"name": "Transfer",
									"nameLocation": "400:8:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2088,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "425:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "409:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "409:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2090,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "447:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "431:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "431:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2092,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "467:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2094,
												"src": "451:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2091,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "451:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "408:67:9"
									},
									"src": "394:82:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2095,
										"nodeType": "StructuredDocumentation",
										"src": "482:94:9",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 2103,
									"name": "Approval",
									"nameLocation": "587:8:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2097,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "612:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "596:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2096,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2099,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "635:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "619:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2098,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2101,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "661:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2103,
												"src": "645:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "595:74:9"
									},
									"src": "581:89:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2104,
										"nodeType": "StructuredDocumentation",
										"src": "676:117:9",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 2112,
									"name": "ApprovalForAll",
									"nameLocation": "804:14:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2106,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "835:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2112,
												"src": "819:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2108,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "858:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2112,
												"src": "842:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "842:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2110,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "873:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2112,
												"src": "868:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2109,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "868:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:64:9"
									},
									"src": "798:85:9"
								},
								{
									"documentation": {
										"id": 2113,
										"nodeType": "StructuredDocumentation",
										"src": "889:76:9",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 2120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "979:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "997:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2120,
												"src": "989:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "989:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "988:15:9"
									},
									"returnParameters": {
										"id": 2119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2118,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1035:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2120,
												"src": "1027:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1027:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1026:17:9"
									},
									"scope": 2195,
									"src": "970:74:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2121,
										"nodeType": "StructuredDocumentation",
										"src": "1050:131:9",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 2128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1195:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2123,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1211:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2128,
												"src": "1203:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1203:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1202:17:9"
									},
									"returnParameters": {
										"id": 2127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2126,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1251:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2128,
												"src": "1243:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1243:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1242:15:9"
									},
									"scope": 2195,
									"src": "1186:72:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2129,
										"nodeType": "StructuredDocumentation",
										"src": "1264:565:9",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 2140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1843:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2131,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1868:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "1860:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1860:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2133,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1882:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "1874:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1874:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2135,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "1886:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2137,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1918:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "1903:19:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2136,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1903:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1859:64:9"
									},
									"returnParameters": {
										"id": 2139,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1932:0:9"
									},
									"scope": 2195,
									"src": "1834:99:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2141,
										"nodeType": "StructuredDocumentation",
										"src": "1939:705:9",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 2150,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2658:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2143,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2683:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2150,
												"src": "2675:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2675:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2145,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2697:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2150,
												"src": "2689:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2689:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2709:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2150,
												"src": "2701:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2674:43:9"
									},
									"returnParameters": {
										"id": 2149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2726:0:9"
									},
									"scope": 2195,
									"src": "2649:78:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2151,
										"nodeType": "StructuredDocumentation",
										"src": "2733:732:9",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 2160,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3479:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2153,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3500:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2160,
												"src": "3492:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3492:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2155,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3514:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2160,
												"src": "3506:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3506:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3526:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2160,
												"src": "3518:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3518:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3491:43:9"
									},
									"returnParameters": {
										"id": 2159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3543:0:9"
									},
									"scope": 2195,
									"src": "3470:74:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2161,
										"nodeType": "StructuredDocumentation",
										"src": "3550:452:9",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 2168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4016:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2163,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4032:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2168,
												"src": "4024:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4024:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2165,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4044:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2168,
												"src": "4036:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4036:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4023:29:9"
									},
									"returnParameters": {
										"id": 2167,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4061:0:9"
									},
									"scope": 2195,
									"src": "4007:55:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2169,
										"nodeType": "StructuredDocumentation",
										"src": "4068:315:9",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 2176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4397:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2171,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4423:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2176,
												"src": "4415:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4415:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2173,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4438:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2176,
												"src": "4433:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2172,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4433:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4414:33:9"
									},
									"returnParameters": {
										"id": 2175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4456:0:9"
									},
									"scope": 2195,
									"src": "4388:69:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2177,
										"nodeType": "StructuredDocumentation",
										"src": "4463:139:9",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 2184,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4616:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2179,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4636:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2184,
												"src": "4628:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4628:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4627:17:9"
									},
									"returnParameters": {
										"id": 2183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2182,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4676:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2184,
												"src": "4668:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4668:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4667:18:9"
									},
									"scope": 2195,
									"src": "4607:79:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2185,
										"nodeType": "StructuredDocumentation",
										"src": "4692:138:9",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 2194,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4844:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2187,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4869:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2194,
												"src": "4861:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4861:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2189,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4884:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2194,
												"src": "4876:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4860:33:9"
									},
									"returnParameters": {
										"id": 2193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2194,
												"src": "4917:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2191,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4917:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4916:6:9"
									},
									"scope": 2195,
									"src": "4835:88:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2196,
							"src": "266:4659:9",
							"usedErrors": [],
							"usedEvents": [
								2094,
								2103,
								2112
							]
						}
					],
					"src": "108:4818:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							2213
						]
					},
					"id": 2214,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2197,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "116:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2198,
								"nodeType": "StructuredDocumentation",
								"src": "142:152:10",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 2213,
							"linearizedBaseContracts": [
								2213
							],
							"name": "IERC721Receiver",
							"nameLocation": "305:15:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2199,
										"nodeType": "StructuredDocumentation",
										"src": "327:500:10",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 2212,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "841:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2201,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "875:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "867:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2203,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "901:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "893:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "893:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2205,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "923:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "915:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "915:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2207,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "955:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "940:19:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2206,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "940:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:108:10"
									},
									"returnParameters": {
										"id": 2211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "984:6:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2209,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "984:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "983:8:10"
									},
									"scope": 2213,
									"src": "832:160:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2214,
							"src": "295:699:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "116:879:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC721": [
							2195
						],
						"IERC721Metadata": [
							2241
						]
					},
					"id": 2242,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2215,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "127:24:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 2217,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2242,
							"sourceUnit": 2196,
							"src": "153:39:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2216,
										"name": "IERC721",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2195,
										"src": "161:7:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2219,
										"name": "IERC721",
										"nameLocations": [
											"357:7:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2195,
										"src": "357:7:11"
									},
									"id": 2220,
									"nodeType": "InheritanceSpecifier",
									"src": "357:7:11"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2218,
								"nodeType": "StructuredDocumentation",
								"src": "194:133:11",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 2241,
							"linearizedBaseContracts": [
								2241,
								2195,
								2508
							],
							"name": "IERC721Metadata",
							"nameLocation": "338:15:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2221,
										"nodeType": "StructuredDocumentation",
										"src": "371:58:11",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 2226,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "443:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:11"
									},
									"returnParameters": {
										"id": 2225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2224,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2226,
												"src": "473:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2223,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "473:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "472:15:11"
									},
									"scope": 2241,
									"src": "434:54:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2227,
										"nodeType": "StructuredDocumentation",
										"src": "494:60:11",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 2232,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "568:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "574:2:11"
									},
									"returnParameters": {
										"id": 2231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2230,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2232,
												"src": "600:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2229,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "600:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "599:15:11"
									},
									"scope": 2241,
									"src": "559:56:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2233,
										"nodeType": "StructuredDocumentation",
										"src": "621:90:11",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 2240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "725:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2235,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "742:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2240,
												"src": "734:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "734:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "733:17:11"
									},
									"returnParameters": {
										"id": 2239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2240,
												"src": "774:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2237,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "774:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "773:15:11"
									},
									"scope": 2241,
									"src": "716:73:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2242,
							"src": "328:463:11",
							"usedErrors": [],
							"usedEvents": [
								2094,
								2103,
								2112
							]
						}
					],
					"src": "127:665:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3562
						],
						"SignedMath": [
							3667
						],
						"Strings": [
							2496
						]
					},
					"id": 2497,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2243,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 2245,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 3563,
							"src": "127:37:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2244,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3562,
										"src": "135:4:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 2247,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 3668,
							"src": "165:49:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2246,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3667,
										"src": "173:10:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2248,
								"nodeType": "StructuredDocumentation",
								"src": "216:34:12",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 2496,
							"linearizedBaseContracts": [
								2496
							],
							"name": "Strings",
							"nameLocation": "259:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2251,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "298:10:12",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "273:56:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 2249,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "273:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 2250,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:12",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 2254,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "358:14:12",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "335:42:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2252,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 2253,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "375:2:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 2255,
										"nodeType": "StructuredDocumentation",
										"src": "384:81:12",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 2261,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "476:28:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2257,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2261,
												"src": "505:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2259,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "528:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2261,
												"src": "520:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "504:31:12"
									},
									"src": "470:66:12"
								},
								{
									"body": {
										"id": 2308,
										"nodeType": "Block",
										"src": "708:627:12",
										"statements": [
											{
												"id": 2307,
												"nodeType": "UncheckedBlock",
												"src": "718:611:12",
												"statements": [
													{
														"assignments": [
															2270
														],
														"declarations": [
															{
																"constant": false,
																"id": 2270,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "750:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 2307,
																"src": "742:14:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2269,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "742:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2277,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2276,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 2273,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2264,
																		"src": "770:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2271,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3562,
																		"src": "759:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3562_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 2272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "764:5:12",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3382,
																	"src": "759:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 2274,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "759:17:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "759:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "742:38:12"
													},
													{
														"assignments": [
															2279
														],
														"declarations": [
															{
																"constant": false,
																"id": 2279,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "808:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 2307,
																"src": "794:20:12",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 2278,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "794:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2284,
														"initialValue": {
															"arguments": [
																{
																	"id": 2282,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2270,
																	"src": "828:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2281,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "817:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 2280,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "821:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 2283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:18:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "794:41:12"
													},
													{
														"assignments": [
															2286
														],
														"declarations": [
															{
																"constant": false,
																"id": 2286,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "857:3:12",
																"nodeType": "VariableDeclaration",
																"scope": 2307,
																"src": "849:11:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2285,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "849:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2287,
														"nodeType": "VariableDeclarationStatement",
														"src": "849:11:12"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "930:67:12",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "948:35:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "959:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "971:2:12",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "967:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "967:15:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "955:28:12"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "948:3:12"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2279,
																"isOffset": false,
																"isSlot": false,
																"src": "959:6:12",
																"valueSize": 1
															},
															{
																"declaration": 2270,
																"isOffset": false,
																"isSlot": false,
																"src": "975:6:12",
																"valueSize": 1
															},
															{
																"declaration": 2286,
																"isOffset": false,
																"isSlot": false,
																"src": "948:3:12",
																"valueSize": 1
															}
														],
														"id": 2288,
														"nodeType": "InlineAssembly",
														"src": "921:76:12"
													},
													{
														"body": {
															"id": 2303,
															"nodeType": "Block",
															"src": "1023:269:12",
															"statements": [
																{
																	"expression": {
																		"id": 2291,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1041:5:12",
																		"subExpression": {
																			"id": 2290,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2286,
																			"src": "1041:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2292,
																	"nodeType": "ExpressionStatement",
																	"src": "1041:5:12"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "1124:86:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "1154:3:12"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "1168:5:12"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "1175:2:12",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "1164:3:12"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1164:14:12"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nodeType": "YulIdentifier",
																									"src": "1180:10:12"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "1159:4:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1159:32:12"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "1146:7:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1146:46:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1146:46:12"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "shanghai",
																	"externalReferences": [
																		{
																			"declaration": 2251,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1180:10:12",
																			"valueSize": 1
																		},
																		{
																			"declaration": 2286,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1154:3:12",
																			"valueSize": 1
																		},
																		{
																			"declaration": 2264,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1168:5:12",
																			"valueSize": 1
																		}
																	],
																	"id": 2293,
																	"nodeType": "InlineAssembly",
																	"src": "1115:95:12"
																},
																{
																	"expression": {
																		"id": 2296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2294,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2264,
																			"src": "1227:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 2295,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1236:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1227:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2297,
																	"nodeType": "ExpressionStatement",
																	"src": "1227:11:12"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2300,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2298,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2264,
																			"src": "1260:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2299,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1269:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1260:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2302,
																	"nodeType": "IfStatement",
																	"src": "1256:21:12",
																	"trueBody": {
																		"id": 2301,
																		"nodeType": "Break",
																		"src": "1272:5:12"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 2289,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1017:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 2304,
														"nodeType": "WhileStatement",
														"src": "1010:282:12"
													},
													{
														"expression": {
															"id": 2305,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2279,
															"src": "1312:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 2268,
														"id": 2306,
														"nodeType": "Return",
														"src": "1305:13:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2262,
										"nodeType": "StructuredDocumentation",
										"src": "542:90:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 2309,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "646:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2264,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "663:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2309,
												"src": "655:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2263,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:15:12"
									},
									"returnParameters": {
										"id": 2268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2309,
												"src": "693:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "693:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:15:12"
									},
									"scope": 2496,
									"src": "637:698:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2334,
										"nodeType": "Block",
										"src": "1511:92:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2322,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2320,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2312,
																	"src": "1542:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1550:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1542:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 2324,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1560:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 2325,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1542:20:12",
															"trueExpression": {
																"hexValue": "2d",
																"id": 2323,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1554:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2329,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2312,
																			"src": "1588:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 2327,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3667,
																			"src": "1573:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3667_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 2328,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1584:3:12",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3666,
																		"src": "1573:14:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 2330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1573:21:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2326,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2309,
																"src": "1564:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 2331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:31:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 2318,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 2317,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1528:6:12",
																"typeDescriptions": {}
															}
														},
														"id": 2319,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1535:6:12",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1528:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 2332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1528:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2316,
												"id": 2333,
												"nodeType": "Return",
												"src": "1521:75:12"
											}
										]
									},
									"documentation": {
										"id": 2310,
										"nodeType": "StructuredDocumentation",
										"src": "1341:89:12",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 2335,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1444:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2312,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1466:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2335,
												"src": "1459:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2311,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1458:14:12"
									},
									"returnParameters": {
										"id": 2316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2315,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2335,
												"src": "1496:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2314,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1496:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:15:12"
									},
									"scope": 2496,
									"src": "1435:168:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2354,
										"nodeType": "Block",
										"src": "1782:100:12",
										"statements": [
											{
												"id": 2353,
												"nodeType": "UncheckedBlock",
												"src": "1792:84:12",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 2344,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2338,
																	"src": "1835:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 2347,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2338,
																				"src": "1854:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2345,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3562,
																				"src": "1842:4:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3562_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 2346,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1847:6:12",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3504,
																			"src": "1842:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 2348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1842:18:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 2349,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1863:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1842:22:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2343,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2355,
																	2438,
																	2458
																],
																"referencedDeclaration": 2438,
																"src": "1823:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 2351,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1823:42:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 2342,
														"id": 2352,
														"nodeType": "Return",
														"src": "1816:49:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2336,
										"nodeType": "StructuredDocumentation",
										"src": "1609:94:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 2355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1717:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2338,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1737:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "1729:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2337,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:15:12"
									},
									"returnParameters": {
										"id": 2342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2341,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "1767:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2340,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:15:12"
									},
									"scope": 2496,
									"src": "1708:174:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2437,
										"nodeType": "Block",
										"src": "2095:435:12",
										"statements": [
											{
												"assignments": [
													2366
												],
												"declarations": [
													{
														"constant": false,
														"id": 2366,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2113:10:12",
														"nodeType": "VariableDeclaration",
														"scope": 2437,
														"src": "2105:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2365,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2105:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2368,
												"initialValue": {
													"id": 2367,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2358,
													"src": "2126:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2105:26:12"
											},
											{
												"assignments": [
													2370
												],
												"declarations": [
													{
														"constant": false,
														"id": 2370,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2154:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2437,
														"src": "2141:19:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2369,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2141:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2379,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2377,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2375,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2373,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2173:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2374,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2360,
																	"src": "2177:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2173:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 2376,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2186:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2173:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2372,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2163:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 2371,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2167:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 2378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2163:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2141:47:12"
											},
											{
												"expression": {
													"id": 2384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2380,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2370,
															"src": "2198:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2382,
														"indexExpression": {
															"hexValue": "30",
															"id": 2381,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2205:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2198:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 2383,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2210:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2198:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2385,
												"nodeType": "ExpressionStatement",
												"src": "2198:15:12"
											},
											{
												"expression": {
													"id": 2390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2386,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2370,
															"src": "2223:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2388,
														"indexExpression": {
															"hexValue": "31",
															"id": 2387,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2223:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 2389,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2235:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2223:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2391,
												"nodeType": "ExpressionStatement",
												"src": "2223:15:12"
											},
											{
												"body": {
													"id": 2420,
													"nodeType": "Block",
													"src": "2293:95:12",
													"statements": [
														{
															"expression": {
																"id": 2414,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2406,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2370,
																		"src": "2307:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2408,
																	"indexExpression": {
																		"id": 2407,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2393,
																		"src": "2314:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2307:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 2409,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2251,
																		"src": "2319:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 2413,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2412,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2410,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2366,
																			"src": "2330:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 2411,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2343:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2330:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2319:28:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2307:40:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 2415,
															"nodeType": "ExpressionStatement",
															"src": "2307:40:12"
														},
														{
															"expression": {
																"id": 2418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2416,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2366,
																	"src": "2361:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2376:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2361:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2419,
															"nodeType": "ExpressionStatement",
															"src": "2361:16:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2402,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2400,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2393,
														"src": "2281:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 2401,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2285:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2281:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2421,
												"initializationExpression": {
													"assignments": [
														2393
													],
													"declarations": [
														{
															"constant": false,
															"id": 2393,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2261:1:12",
															"nodeType": "VariableDeclaration",
															"scope": 2421,
															"src": "2253:9:12",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2392,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2253:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2399,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2398,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 2394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2265:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2395,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2360,
																"src": "2269:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2397,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2278:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2265:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2253:26:12"
												},
												"loopExpression": {
													"expression": {
														"id": 2404,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2288:3:12",
														"subExpression": {
															"id": 2403,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2393,
															"src": "2290:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2405,
													"nodeType": "ExpressionStatement",
													"src": "2288:3:12"
												},
												"nodeType": "ForStatement",
												"src": "2248:140:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2422,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2366,
														"src": "2401:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2423,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2415:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2401:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2431,
												"nodeType": "IfStatement",
												"src": "2397:96:12",
												"trueBody": {
													"id": 2430,
													"nodeType": "Block",
													"src": "2418:75:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 2426,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2358,
																		"src": "2468:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2427,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2360,
																		"src": "2475:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2425,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2261,
																	"src": "2439:28:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 2428,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2439:43:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2429,
															"nodeType": "RevertStatement",
															"src": "2432:50:12"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2434,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2370,
															"src": "2516:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2433,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2509:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 2432,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2509:6:12",
															"typeDescriptions": {}
														}
													},
													"id": 2435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2509:14:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2364,
												"id": 2436,
												"nodeType": "Return",
												"src": "2502:21:12"
											}
										]
									},
									"documentation": {
										"id": 2356,
										"nodeType": "StructuredDocumentation",
										"src": "1888:112:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 2438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2014:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2034:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "2026:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2026:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2360,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2049:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "2041:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2359,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:31:12"
									},
									"returnParameters": {
										"id": 2364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "2080:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2362,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2080:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:15:12"
									},
									"scope": 2496,
									"src": "2005:525:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2457,
										"nodeType": "Block",
										"src": "2762:75:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2451,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2441,
																			"src": "2807:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2799:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 2449,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2799:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 2448,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2791:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2447,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2791:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2791:22:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2454,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2254,
															"src": "2815:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 2446,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2355,
															2438,
															2458
														],
														"referencedDeclaration": 2438,
														"src": "2779:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 2455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2779:51:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2445,
												"id": 2456,
												"nodeType": "Return",
												"src": "2772:58:12"
											}
										]
									},
									"documentation": {
										"id": 2439,
										"nodeType": "StructuredDocumentation",
										"src": "2536:148:12",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 2458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2698:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2441,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2718:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2458,
												"src": "2710:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:14:12"
									},
									"returnParameters": {
										"id": 2445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2444,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2458,
												"src": "2747:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2443,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2747:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:15:12"
									},
									"scope": 2496,
									"src": "2689:148:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2494,
										"nodeType": "Block",
										"src": "2992:104:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2478,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2470,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2461,
																		"src": "3015:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3009:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2468,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3009:5:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2471,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3009:8:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2472,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:12",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3009:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2475,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2463,
																		"src": "3034:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2474,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3028:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2473,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3028:5:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2476,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3028:8:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2477,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3037:6:12",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3028:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3009:34:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 2491,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2482,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2461,
																			"src": "3063:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2481,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3057:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2480,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3057:5:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2483,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3057:8:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2479,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3047:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:19:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2488,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2463,
																			"src": "3086:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2487,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3080:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2486,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3080:5:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2489,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3080:8:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2485,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3070:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3070:19:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3047:42:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3009:80:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2467,
												"id": 2493,
												"nodeType": "Return",
												"src": "3002:87:12"
											}
										]
									},
									"documentation": {
										"id": 2459,
										"nodeType": "StructuredDocumentation",
										"src": "2843:66:12",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 2495,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2923:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2943:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2495,
												"src": "2929:15:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2460,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2929:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2463,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2960:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2495,
												"src": "2946:15:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2462,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2946:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2928:34:12"
									},
									"returnParameters": {
										"id": 2467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2495,
												"src": "2986:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2465,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2986:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:6:12"
									},
									"scope": 2496,
									"src": "2914:182:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2497,
							"src": "251:2847:12",
							"usedErrors": [
								2261
							],
							"usedEvents": []
						}
					],
					"src": "101:2998:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							2508
						]
					},
					"id": 2509,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2498,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2499,
								"nodeType": "StructuredDocumentation",
								"src": "141:279:13",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 2508,
							"linearizedBaseContracts": [
								2508
							],
							"name": "IERC165",
							"nameLocation": "431:7:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2500,
										"nodeType": "StructuredDocumentation",
										"src": "445:340:13",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 2507,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "799:17:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2502,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "824:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 2507,
												"src": "817:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2501,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "817:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "816:20:13"
									},
									"returnParameters": {
										"id": 2506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2505,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2507,
												"src": "860:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2504,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "860:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "859:6:13"
									},
									"scope": 2508,
									"src": "790:76:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2509,
							"src": "421:447:13",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:754:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3562
						]
					},
					"id": 3563,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2510,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2511,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:14",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3562,
							"linearizedBaseContracts": [
								3562
							],
							"name": "Math",
							"nameLocation": "211:4:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2512,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:14",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2514,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2513,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:14"
									},
									"src": "277:29:14"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2519,
									"members": [
										{
											"id": 2515,
											"name": "Floor",
											"nameLocation": "336:5:14",
											"nodeType": "EnumValue",
											"src": "336:5:14"
										},
										{
											"id": 2516,
											"name": "Ceil",
											"nameLocation": "379:4:14",
											"nodeType": "EnumValue",
											"src": "379:4:14"
										},
										{
											"id": 2517,
											"name": "Trunc",
											"nameLocation": "421:5:14",
											"nodeType": "EnumValue",
											"src": "421:5:14"
										},
										{
											"id": 2518,
											"name": "Expand",
											"nameLocation": "451:6:14",
											"nodeType": "EnumValue",
											"src": "451:6:14"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:14",
									"nodeType": "EnumDefinition",
									"src": "312:169:14"
								},
								{
									"body": {
										"id": 2550,
										"nodeType": "Block",
										"src": "661:140:14",
										"statements": [
											{
												"id": 2549,
												"nodeType": "UncheckedBlock",
												"src": "671:124:14",
												"statements": [
													{
														"assignments": [
															2532
														],
														"declarations": [
															{
																"constant": false,
																"id": 2532,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:14",
																"nodeType": "VariableDeclaration",
																"scope": 2549,
																"src": "695:9:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2531,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2536,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2535,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2533,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2522,
																"src": "707:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2534,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2524,
																"src": "711:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:14"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2537,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "730:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2538,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2522,
																"src": "734:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2544,
														"nodeType": "IfStatement",
														"src": "726:28:14",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2542,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2530,
															"id": 2543,
															"nodeType": "Return",
															"src": "737:17:14"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2545,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2546,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2532,
																	"src": "782:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2547,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2530,
														"id": 2548,
														"nodeType": "Return",
														"src": "768:16:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2520,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:14",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2551,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2522,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2551,
												"src": "601:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2521,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2524,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2551,
												"src": "612:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:14"
									},
									"returnParameters": {
										"id": 2530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2527,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2551,
												"src": "646:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2526,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2529,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2551,
												"src": "652:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:14"
									},
									"scope": 3562,
									"src": "585:216:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2578,
										"nodeType": "Block",
										"src": "984:113:14",
										"statements": [
											{
												"id": 2577,
												"nodeType": "UncheckedBlock",
												"src": "994:97:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2565,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2563,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2556,
																"src": "1022:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2564,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2554,
																"src": "1026:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2570,
														"nodeType": "IfStatement",
														"src": "1018:28:14",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2568,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2562,
															"id": 2569,
															"nodeType": "Return",
															"src": "1029:17:14"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2572,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2554,
																		"src": "1074:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2573,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2556,
																		"src": "1078:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2575,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:14",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2562,
														"id": 2576,
														"nodeType": "Return",
														"src": "1060:20:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2552,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:14",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2554,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2579,
												"src": "924:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2556,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2579,
												"src": "935:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:14"
									},
									"returnParameters": {
										"id": 2562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2579,
												"src": "969:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2558,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2579,
												"src": "975:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:14"
									},
									"scope": 3562,
									"src": "908:189:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2620,
										"nodeType": "Block",
										"src": "1283:417:14",
										"statements": [
											{
												"id": 2619,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2593,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2591,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2582,
																"src": "1551:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2592,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2598,
														"nodeType": "IfStatement",
														"src": "1547:28:14",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2595,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2596,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2590,
															"id": 2597,
															"nodeType": "Return",
															"src": "1559:16:14"
														}
													},
													{
														"assignments": [
															2600
														],
														"declarations": [
															{
																"constant": false,
																"id": 2600,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:14",
																"nodeType": "VariableDeclaration",
																"scope": 2619,
																"src": "1589:9:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2599,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2604,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2603,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2601,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2582,
																"src": "1601:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2602,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2584,
																"src": "1605:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:14"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2607,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2605,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2600,
																	"src": "1624:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2606,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2582,
																	"src": "1628:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2608,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2584,
																"src": "1633:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2614,
														"nodeType": "IfStatement",
														"src": "1620:33:14",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2612,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2590,
															"id": 2613,
															"nodeType": "Return",
															"src": "1636:17:14"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2615,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2616,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2600,
																	"src": "1681:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2617,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2590,
														"id": 2618,
														"nodeType": "Return",
														"src": "1667:16:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2580,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:14",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2621,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2582,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "1223:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2581,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2584,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "1234:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:14"
									},
									"returnParameters": {
										"id": 2590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2587,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "1268:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2586,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "1274:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:14"
									},
									"scope": 3562,
									"src": "1207:493:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2648,
										"nodeType": "Block",
										"src": "1887:114:14",
										"statements": [
											{
												"id": 2647,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2635,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2633,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2626,
																"src": "1925:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2634,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2640,
														"nodeType": "IfStatement",
														"src": "1921:29:14",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2636,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2637,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2638,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2632,
															"id": 2639,
															"nodeType": "Return",
															"src": "1933:17:14"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2641,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2644,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2642,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2624,
																		"src": "1978:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2643,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2626,
																		"src": "1982:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2645,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:14",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2632,
														"id": 2646,
														"nodeType": "Return",
														"src": "1964:20:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2622,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:14",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2624,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2649,
												"src": "1827:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2623,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2626,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2649,
												"src": "1838:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:14"
									},
									"returnParameters": {
										"id": 2632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2629,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2649,
												"src": "1872:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2628,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2631,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2649,
												"src": "1878:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:14"
									},
									"scope": 3562,
									"src": "1811:190:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2676,
										"nodeType": "Block",
										"src": "2198:114:14",
										"statements": [
											{
												"id": 2675,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2661,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2654,
																"src": "2236:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2668,
														"nodeType": "IfStatement",
														"src": "2232:29:14",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2665,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2666,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2660,
															"id": 2667,
															"nodeType": "Return",
															"src": "2244:17:14"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2669,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2672,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2670,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2652,
																		"src": "2289:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2671,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2654,
																		"src": "2293:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2673,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:14",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2660,
														"id": 2674,
														"nodeType": "Return",
														"src": "2275:20:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2650,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:14",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2677,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2652,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "2138:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2654,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "2149:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:14"
									},
									"returnParameters": {
										"id": 2660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2657,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "2183:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2656,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2659,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "2189:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2658,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:14"
									},
									"scope": 3562,
									"src": "2122:190:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2694,
										"nodeType": "Block",
										"src": "2449:37:14",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2689,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2687,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2680,
															"src": "2466:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2688,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2682,
															"src": "2470:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2691,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2682,
														"src": "2478:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:14",
													"trueExpression": {
														"id": 2690,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2680,
														"src": "2474:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2686,
												"id": 2693,
												"nodeType": "Return",
												"src": "2459:20:14"
											}
										]
									},
									"documentation": {
										"id": 2678,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:14",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2695,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2680,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2695,
												"src": "2395:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2682,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2695,
												"src": "2406:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:14"
									},
									"returnParameters": {
										"id": 2686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2685,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2695,
												"src": "2440:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:14"
									},
									"scope": 3562,
									"src": "2382:104:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2712,
										"nodeType": "Block",
										"src": "2624:37:14",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2707,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2705,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2698,
															"src": "2641:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2706,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2700,
															"src": "2645:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2709,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2700,
														"src": "2653:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:14",
													"trueExpression": {
														"id": 2708,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2698,
														"src": "2649:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2704,
												"id": 2711,
												"nodeType": "Return",
												"src": "2634:20:14"
											}
										]
									},
									"documentation": {
										"id": 2696,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:14",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2698,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "2570:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2697,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2700,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "2581:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:14"
									},
									"returnParameters": {
										"id": 2704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2703,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "2615:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:14"
									},
									"scope": 3562,
									"src": "2557:104:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2735,
										"nodeType": "Block",
										"src": "2845:82:14",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2725,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2723,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2716,
																	"src": "2900:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2724,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2718,
																	"src": "2904:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2726,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2732,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2729,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2727,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2716,
																		"src": "2910:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2728,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2718,
																		"src": "2914:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2730,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2731,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2722,
												"id": 2734,
												"nodeType": "Return",
												"src": "2892:28:14"
											}
										]
									},
									"documentation": {
										"id": 2714,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:14",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2736,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2716,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2736,
												"src": "2791:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2718,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2736,
												"src": "2802:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:14"
									},
									"returnParameters": {
										"id": 2722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2721,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2736,
												"src": "2836:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2720,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:14"
									},
									"scope": 3562,
									"src": "2774:153:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2769,
										"nodeType": "Block",
										"src": "3219:260:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2748,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2746,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2741,
														"src": "3233:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2747,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2754,
												"nodeType": "IfStatement",
												"src": "3229:127:14",
												"trueBody": {
													"id": 2753,
													"nodeType": "Block",
													"src": "3241:115:14",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2751,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2749,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2739,
																	"src": "3340:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2750,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2741,
																	"src": "3344:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2745,
															"id": 2752,
															"nodeType": "Return",
															"src": "3333:12:14"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2757,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2755,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2739,
															"src": "3444:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2756,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2766,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2761,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2759,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2739,
																			"src": "3458:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2760,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2762,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2763,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2741,
																"src": "3467:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2765,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:14",
													"trueExpression": {
														"hexValue": "30",
														"id": 2758,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2745,
												"id": 2768,
												"nodeType": "Return",
												"src": "3437:35:14"
											}
										]
									},
									"documentation": {
										"id": 2737,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:14",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2739,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2770,
												"src": "3165:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2741,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2770,
												"src": "3176:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2740,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:14"
									},
									"returnParameters": {
										"id": 2745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2744,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2770,
												"src": "3210:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:14"
									},
									"scope": 3562,
									"src": "3148:331:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2895,
										"nodeType": "Block",
										"src": "3901:4018:14",
										"statements": [
											{
												"id": 2894,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:14",
												"statements": [
													{
														"assignments": [
															2783
														],
														"declarations": [
															{
																"constant": false,
																"id": 2783,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:14",
																"nodeType": "VariableDeclaration",
																"scope": 2894,
																"src": "4232:13:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2782,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2787,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2784,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2773,
																"src": "4248:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2785,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2775,
																"src": "4252:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:14"
													},
													{
														"assignments": [
															2789
														],
														"declarations": [
															{
																"constant": false,
																"id": 2789,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:14",
																"nodeType": "VariableDeclaration",
																"scope": 2894,
																"src": "4312:13:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2788,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2790,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:14"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "4392:122:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:14"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:14"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:14",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:14"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:14"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4457:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:14"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:14"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:14"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:14"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:14"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2783,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2783,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2789,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2773,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:14",
																"valueSize": 1
															},
															{
																"declaration": 2775,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:14",
																"valueSize": 1
															}
														],
														"id": 2791,
														"nodeType": "InlineAssembly",
														"src": "4383:131:14"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2792,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2789,
																"src": "4595:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2793,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2800,
														"nodeType": "IfStatement",
														"src": "4591:368:14",
														"trueBody": {
															"id": 2799,
															"nodeType": "Block",
															"src": "4607:352:14",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2797,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2795,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2783,
																			"src": "4925:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2796,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2777,
																			"src": "4933:11:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2781,
																	"id": 2798,
																	"nodeType": "Return",
																	"src": "4918:26:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2801,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2777,
																"src": "5065:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2802,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2789,
																"src": "5080:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2808,
														"nodeType": "IfStatement",
														"src": "5061:88:14",
														"trueBody": {
															"id": 2807,
															"nodeType": "Block",
															"src": "5087:62:14",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2804,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2514,
																			"src": "5112:20:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2805,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2806,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:14"
																}
															]
														}
													},
													{
														"assignments": [
															2810
														],
														"declarations": [
															{
																"constant": false,
																"id": 2810,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:14",
																"nodeType": "VariableDeclaration",
																"scope": 2894,
																"src": "5404:17:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2809,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2811,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:14"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "5444:291:14",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "5513:38:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:14"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:14"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:14"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:14"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5633:41:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:14"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:14"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5691:30:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:14"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:14"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2777,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:14",
																"valueSize": 1
															},
															{
																"declaration": 2783,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2783,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2783,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2789,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2789,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2810,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:14",
																"valueSize": 1
															},
															{
																"declaration": 2810,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:14",
																"valueSize": 1
															},
															{
																"declaration": 2810,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:14",
																"valueSize": 1
															},
															{
																"declaration": 2773,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:14",
																"valueSize": 1
															},
															{
																"declaration": 2775,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:14",
																"valueSize": 1
															}
														],
														"id": 2812,
														"nodeType": "InlineAssembly",
														"src": "5435:300:14"
													},
													{
														"assignments": [
															2814
														],
														"declarations": [
															{
																"constant": false,
																"id": 2814,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:14",
																"nodeType": "VariableDeclaration",
																"scope": 2894,
																"src": "5939:12:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2813,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2821,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2820,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2815,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2777,
																"src": "5954:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2818,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2816,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2817,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2777,
																			"src": "5973:11:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2819,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:14"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "6008:362:14",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "6073:37:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:14"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:14"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:14"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6177:25:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:14"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:14"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:14"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:14"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6317:39:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:14",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:14"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:14"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:14"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:14"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:14"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2777,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:14",
																"valueSize": 1
															},
															{
																"declaration": 2777,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:14",
																"valueSize": 1
															},
															{
																"declaration": 2783,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2783,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:14",
																"valueSize": 1
															},
															{
																"declaration": 2814,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:14",
																"valueSize": 1
															},
															{
																"declaration": 2814,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:14",
																"valueSize": 1
															},
															{
																"declaration": 2814,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:14",
																"valueSize": 1
															},
															{
																"declaration": 2814,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:14",
																"valueSize": 1
															},
															{
																"declaration": 2814,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:14",
																"valueSize": 1
															}
														],
														"id": 2822,
														"nodeType": "InlineAssembly",
														"src": "5999:371:14"
													},
													{
														"expression": {
															"id": 2827,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2823,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2783,
																"src": "6436:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2826,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2824,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2789,
																	"src": "6445:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2825,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2814,
																	"src": "6453:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2828,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:14"
													},
													{
														"assignments": [
															2830
														],
														"declarations": [
															{
																"constant": false,
																"id": 2830,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:14",
																"nodeType": "VariableDeclaration",
																"scope": 2894,
																"src": "6775:15:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2829,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2837,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2836,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2831,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2832,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2777,
																			"src": "6798:11:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2834,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2835,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:14"
													},
													{
														"expression": {
															"id": 2844,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2838,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2830,
																"src": "7031:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2843,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2839,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2840,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2777,
																		"src": "7046:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2841,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2830,
																		"src": "7060:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2845,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:14"
													},
													{
														"expression": {
															"id": 2852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2846,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2830,
																"src": "7100:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2851,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2847,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2850,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2848,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2777,
																		"src": "7115:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2849,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2830,
																		"src": "7129:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2853,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:14"
													},
													{
														"expression": {
															"id": 2860,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2854,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2830,
																"src": "7170:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2859,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2855,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2858,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2856,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2777,
																		"src": "7185:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2857,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2830,
																		"src": "7199:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2861,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:14"
													},
													{
														"expression": {
															"id": 2868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2862,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2830,
																"src": "7240:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2867,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2863,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2866,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2864,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2777,
																		"src": "7255:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2865,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2830,
																		"src": "7269:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2869,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:14"
													},
													{
														"expression": {
															"id": 2876,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2870,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2830,
																"src": "7310:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2875,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2871,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2874,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2872,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2777,
																		"src": "7325:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2873,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2830,
																		"src": "7339:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2877,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:14"
													},
													{
														"expression": {
															"id": 2884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2878,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2830,
																"src": "7381:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2879,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2880,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2777,
																		"src": "7396:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2881,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2830,
																		"src": "7410:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2885,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:14"
													},
													{
														"expression": {
															"id": 2890,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2886,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2780,
																"src": "7851:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2889,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2887,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2783,
																	"src": "7860:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2888,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2830,
																	"src": "7868:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2891,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:14"
													},
													{
														"expression": {
															"id": 2892,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2780,
															"src": "7896:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2781,
														"id": 2893,
														"nodeType": "Return",
														"src": "7889:13:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2771,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:14",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2896,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2773,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2896,
												"src": "3819:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2772,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2775,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2896,
												"src": "3830:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2774,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2896,
												"src": "3841:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:14"
									},
									"returnParameters": {
										"id": 2781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2780,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2896,
												"src": "3885:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2779,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:14"
									},
									"scope": 3562,
									"src": "3803:4116:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2938,
										"nodeType": "Block",
										"src": "8161:192:14",
										"statements": [
											{
												"assignments": [
													2912
												],
												"declarations": [
													{
														"constant": false,
														"id": 2912,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 2938,
														"src": "8171:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2911,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2918,
												"initialValue": {
													"arguments": [
														{
															"id": 2914,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2899,
															"src": "8195:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2915,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2901,
															"src": "8198:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2916,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2903,
															"src": "8201:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2913,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2896,
															2939
														],
														"referencedDeclaration": 2896,
														"src": "8188:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:14"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2920,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2906,
																"src": "8244:8:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2519",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2519",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2919,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3561,
															"src": "8227:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2519_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2921,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2928,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2923,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2899,
																	"src": "8264:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2924,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2901,
																	"src": "8267:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2925,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2903,
																	"src": "8270:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2922,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2926,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2927,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2935,
												"nodeType": "IfStatement",
												"src": "8223:101:14",
												"trueBody": {
													"id": 2934,
													"nodeType": "Block",
													"src": "8288:36:14",
													"statements": [
														{
															"expression": {
																"id": 2932,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2930,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2912,
																	"src": "8302:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2931,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2933,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:14"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2936,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2912,
													"src": "8340:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2910,
												"id": 2937,
												"nodeType": "Return",
												"src": "8333:13:14"
											}
										]
									},
									"documentation": {
										"id": 2897,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:14",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2939,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2899,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "8067:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2901,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "8078:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2900,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2903,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "8089:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2906,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "8110:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2519",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2905,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2904,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2519,
														"src": "8110:8:14"
													},
													"referencedDeclaration": 2519,
													"src": "8110:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2519",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:14"
									},
									"returnParameters": {
										"id": 2910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2909,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "8152:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2908,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:14"
									},
									"scope": 3562,
									"src": "8051:302:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3050,
										"nodeType": "Block",
										"src": "8644:1585:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2947,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2942,
														"src": "8658:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2948,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2953,
												"nodeType": "IfStatement",
												"src": "8654:45:14",
												"trueBody": {
													"id": 2952,
													"nodeType": "Block",
													"src": "8666:33:14",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2950,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2946,
															"id": 2951,
															"nodeType": "Return",
															"src": "8680:8:14"
														}
													]
												}
											},
											{
												"assignments": [
													2955
												],
												"declarations": [
													{
														"constant": false,
														"id": 2955,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 3050,
														"src": "9378:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2954,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2964,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2956,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2961,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2958,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2942,
																			"src": "9406:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2957,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3218,
																			3253
																		],
																		"referencedDeclaration": 3218,
																		"src": "9401:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2959,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2960,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2962,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:14"
											},
											{
												"id": 3049,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:14",
												"statements": [
													{
														"expression": {
															"id": 2974,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2965,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2955,
																"src": "9839:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2970,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2966,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2955,
																				"src": "9849:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2969,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2967,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2942,
																					"src": "9858:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2968,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "9862:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2971,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2975,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:14"
													},
													{
														"expression": {
															"id": 2985,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2976,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2955,
																"src": "9888:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2984,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2981,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2977,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2955,
																				"src": "9898:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2980,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2978,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2942,
																					"src": "9907:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2979,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "9911:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2982,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2983,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2986,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:14"
													},
													{
														"expression": {
															"id": 2996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2987,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2955,
																"src": "9937:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2995,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2992,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2988,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2955,
																				"src": "9947:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2991,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2989,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2942,
																					"src": "9956:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2990,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "9960:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2993,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2994,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2997,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:14"
													},
													{
														"expression": {
															"id": 3007,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2998,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2955,
																"src": "9986:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3006,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3003,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2999,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2955,
																				"src": "9996:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3002,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3000,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2942,
																					"src": "10005:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3001,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "10009:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3004,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3005,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3008,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:14"
													},
													{
														"expression": {
															"id": 3018,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3009,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2955,
																"src": "10035:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3014,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3010,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2955,
																				"src": "10045:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3013,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3011,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2942,
																					"src": "10054:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3012,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "10058:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3015,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3019,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:14"
													},
													{
														"expression": {
															"id": 3029,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3020,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2955,
																"src": "10084:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3028,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3025,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3021,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2955,
																				"src": "10094:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3024,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3022,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2942,
																					"src": "10103:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3023,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "10107:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3026,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3027,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3030,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:14"
													},
													{
														"expression": {
															"id": 3040,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3031,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2955,
																"src": "10133:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3039,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3036,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3032,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2955,
																				"src": "10143:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3035,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3033,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2942,
																					"src": "10152:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3034,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "10156:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3037,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3038,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3041,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:14"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3043,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2955,
																	"src": "10193:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3046,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3044,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2942,
																		"src": "10201:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3045,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2955,
																		"src": "10205:6:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3042,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2713,
																"src": "10189:3:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3047,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2946,
														"id": 3048,
														"nodeType": "Return",
														"src": "10182:30:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2940,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:14",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3051,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 3051,
												"src": "8601:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:14"
									},
									"returnParameters": {
										"id": 2946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2945,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3051,
												"src": "8635:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:14"
									},
									"scope": 3562,
									"src": "8587:1642:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3085,
										"nodeType": "Block",
										"src": "10405:164:14",
										"statements": [
											{
												"id": 3084,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:14",
												"statements": [
													{
														"assignments": [
															3063
														],
														"declarations": [
															{
																"constant": false,
																"id": 3063,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:14",
																"nodeType": "VariableDeclaration",
																"scope": 3084,
																"src": "10439:14:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3062,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3067,
														"initialValue": {
															"arguments": [
																{
																	"id": 3065,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3054,
																	"src": "10461:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3064,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3051,
																	3086
																],
																"referencedDeclaration": 3051,
																"src": "10456:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:14"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3082,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3068,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3063,
																"src": "10484:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3077,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3070,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3057,
																						"src": "10511:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2519",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2519",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3069,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3561,
																					"src": "10494:16:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2519_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3071,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:14",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3076,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3074,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3072,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3063,
																						"src": "10524:6:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3073,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3063,
																						"src": "10533:6:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3075,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3054,
																					"src": "10542:1:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3079,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3080,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:14",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3078,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3081,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3061,
														"id": 3083,
														"nodeType": "Return",
														"src": "10477:75:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3052,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:14",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3086,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3054,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 3086,
												"src": "10343:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3053,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3057,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 3086,
												"src": "10354:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2519",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3056,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3055,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2519,
														"src": "10354:8:14"
													},
													"referencedDeclaration": 2519,
													"src": "10354:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2519",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:14"
									},
									"returnParameters": {
										"id": 3061,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3060,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3086,
												"src": "10396:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3059,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:14"
									},
									"scope": 3562,
									"src": "10329:240:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3217,
										"nodeType": "Block",
										"src": "10760:922:14",
										"statements": [
											{
												"assignments": [
													3095
												],
												"declarations": [
													{
														"constant": false,
														"id": 3095,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 3217,
														"src": "10770:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3094,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3097,
												"initialValue": {
													"hexValue": "30",
													"id": 3096,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:14",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:14"
											},
											{
												"id": 3214,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3102,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3100,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3098,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3089,
																	"src": "10826:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3099,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3101,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3112,
														"nodeType": "IfStatement",
														"src": "10822:99:14",
														"trueBody": {
															"id": 3111,
															"nodeType": "Block",
															"src": "10844:77:14",
															"statements": [
																{
																	"expression": {
																		"id": 3105,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3103,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3089,
																			"src": "10862:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3104,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3106,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:14"
																},
																{
																	"expression": {
																		"id": 3109,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3107,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3095,
																			"src": "10893:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3108,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3110,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3115,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3113,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3089,
																	"src": "10938:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3114,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3116,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3127,
														"nodeType": "IfStatement",
														"src": "10934:96:14",
														"trueBody": {
															"id": 3126,
															"nodeType": "Block",
															"src": "10955:75:14",
															"statements": [
																{
																	"expression": {
																		"id": 3120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3118,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3089,
																			"src": "10973:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3119,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3121,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:14"
																},
																{
																	"expression": {
																		"id": 3124,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3122,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3095,
																			"src": "11003:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3123,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3125,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3128,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3089,
																	"src": "11047:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3131,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3142,
														"nodeType": "IfStatement",
														"src": "11043:96:14",
														"trueBody": {
															"id": 3141,
															"nodeType": "Block",
															"src": "11064:75:14",
															"statements": [
																{
																	"expression": {
																		"id": 3135,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3133,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3089,
																			"src": "11082:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3134,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3136,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:14"
																},
																{
																	"expression": {
																		"id": 3139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3137,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3095,
																			"src": "11112:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3138,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3140,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3145,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3143,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3089,
																	"src": "11156:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3144,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3146,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3157,
														"nodeType": "IfStatement",
														"src": "11152:96:14",
														"trueBody": {
															"id": 3156,
															"nodeType": "Block",
															"src": "11173:75:14",
															"statements": [
																{
																	"expression": {
																		"id": 3150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3148,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3089,
																			"src": "11191:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3151,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:14"
																},
																{
																	"expression": {
																		"id": 3154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3152,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3095,
																			"src": "11221:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3153,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3155,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3158,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3089,
																	"src": "11265:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3161,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3172,
														"nodeType": "IfStatement",
														"src": "11261:93:14",
														"trueBody": {
															"id": 3171,
															"nodeType": "Block",
															"src": "11281:73:14",
															"statements": [
																{
																	"expression": {
																		"id": 3165,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3163,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3089,
																			"src": "11299:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3164,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3166,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:14"
																},
																{
																	"expression": {
																		"id": 3169,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3167,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3095,
																			"src": "11328:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3170,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3175,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3173,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3089,
																	"src": "11371:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3174,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3176,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3187,
														"nodeType": "IfStatement",
														"src": "11367:93:14",
														"trueBody": {
															"id": 3186,
															"nodeType": "Block",
															"src": "11387:73:14",
															"statements": [
																{
																	"expression": {
																		"id": 3180,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3178,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3089,
																			"src": "11405:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3179,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3181,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:14"
																},
																{
																	"expression": {
																		"id": 3184,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3182,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3095,
																			"src": "11434:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3185,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3188,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3089,
																	"src": "11477:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3191,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3202,
														"nodeType": "IfStatement",
														"src": "11473:93:14",
														"trueBody": {
															"id": 3201,
															"nodeType": "Block",
															"src": "11493:73:14",
															"statements": [
																{
																	"expression": {
																		"id": 3195,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3193,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3089,
																			"src": "11511:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3194,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3196,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:14"
																},
																{
																	"expression": {
																		"id": 3199,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3197,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3095,
																			"src": "11540:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3198,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3200,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3207,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3205,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3203,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3089,
																	"src": "11583:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3204,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3206,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3213,
														"nodeType": "IfStatement",
														"src": "11579:64:14",
														"trueBody": {
															"id": 3212,
															"nodeType": "Block",
															"src": "11599:44:14",
															"statements": [
																{
																	"expression": {
																		"id": 3210,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3208,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3095,
																			"src": "11617:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3209,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3211,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:14"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3215,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3095,
													"src": "11669:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3093,
												"id": 3216,
												"nodeType": "Return",
												"src": "11662:13:14"
											}
										]
									},
									"documentation": {
										"id": 3087,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:14",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3218,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3089,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3218,
												"src": "10713:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3088,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:14"
									},
									"returnParameters": {
										"id": 3093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3092,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3218,
												"src": "10751:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3091,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:14"
									},
									"scope": 3562,
									"src": "10699:983:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3252,
										"nodeType": "Block",
										"src": "11915:168:14",
										"statements": [
											{
												"id": 3251,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:14",
												"statements": [
													{
														"assignments": [
															3230
														],
														"declarations": [
															{
																"constant": false,
																"id": 3230,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:14",
																"nodeType": "VariableDeclaration",
																"scope": 3251,
																"src": "11949:14:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3229,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3234,
														"initialValue": {
															"arguments": [
																{
																	"id": 3232,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3221,
																	"src": "11971:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3231,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3218,
																	3253
																],
																"referencedDeclaration": 3218,
																"src": "11966:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3233,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:14"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3235,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3230,
																"src": "11998:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3244,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3237,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3224,
																						"src": "12025:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2519",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2519",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3236,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3561,
																					"src": "12008:16:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2519_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3238,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:14",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3243,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3241,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3239,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3240,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3230,
																						"src": "12043:6:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3242,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3221,
																					"src": "12052:5:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3246,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:14",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3245,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3248,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3228,
														"id": 3250,
														"nodeType": "Return",
														"src": "11991:75:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3219,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:14",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3221,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "11849:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3224,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "11864:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2519",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3223,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3222,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2519,
														"src": "11864:8:14"
													},
													"referencedDeclaration": 2519,
													"src": "11864:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2519",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:14"
									},
									"returnParameters": {
										"id": 3228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3227,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "11906:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:14"
									},
									"scope": 3562,
									"src": "11835:248:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3381,
										"nodeType": "Block",
										"src": "12276:854:14",
										"statements": [
											{
												"assignments": [
													3262
												],
												"declarations": [
													{
														"constant": false,
														"id": 3262,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 3381,
														"src": "12286:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3261,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3264,
												"initialValue": {
													"hexValue": "30",
													"id": 3263,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:14",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:14"
											},
											{
												"id": 3378,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3269,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3265,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3256,
																"src": "12342:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3266,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3267,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3281,
														"nodeType": "IfStatement",
														"src": "12338:103:14",
														"trueBody": {
															"id": 3280,
															"nodeType": "Block",
															"src": "12361:80:14",
															"statements": [
																{
																	"expression": {
																		"id": 3274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3270,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3256,
																			"src": "12379:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3273,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3271,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3272,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3275,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:14"
																},
																{
																	"expression": {
																		"id": 3278,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3276,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3262,
																			"src": "12414:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3277,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3279,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3282,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3256,
																"src": "12458:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3285,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3283,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3284,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3298,
														"nodeType": "IfStatement",
														"src": "12454:103:14",
														"trueBody": {
															"id": 3297,
															"nodeType": "Block",
															"src": "12477:80:14",
															"statements": [
																{
																	"expression": {
																		"id": 3291,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3287,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3256,
																			"src": "12495:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3290,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3288,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3289,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3292,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:14"
																},
																{
																	"expression": {
																		"id": 3295,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3293,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3262,
																			"src": "12530:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3294,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3296,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3299,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3256,
																"src": "12574:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3302,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3315,
														"nodeType": "IfStatement",
														"src": "12570:103:14",
														"trueBody": {
															"id": 3314,
															"nodeType": "Block",
															"src": "12593:80:14",
															"statements": [
																{
																	"expression": {
																		"id": 3308,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3304,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3256,
																			"src": "12611:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3307,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3305,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3306,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3309,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:14"
																},
																{
																	"expression": {
																		"id": 3312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3310,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3262,
																			"src": "12646:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3311,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3313,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3316,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3256,
																"src": "12690:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3319,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3318,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3332,
														"nodeType": "IfStatement",
														"src": "12686:100:14",
														"trueBody": {
															"id": 3331,
															"nodeType": "Block",
															"src": "12708:78:14",
															"statements": [
																{
																	"expression": {
																		"id": 3325,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3321,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3256,
																			"src": "12726:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3324,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3322,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3323,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3326,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:14"
																},
																{
																	"expression": {
																		"id": 3329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3327,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3262,
																			"src": "12760:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3328,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3330,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3333,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3256,
																"src": "12803:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3336,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3335,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3349,
														"nodeType": "IfStatement",
														"src": "12799:100:14",
														"trueBody": {
															"id": 3348,
															"nodeType": "Block",
															"src": "12821:78:14",
															"statements": [
																{
																	"expression": {
																		"id": 3342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3338,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3256,
																			"src": "12839:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3341,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3339,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3340,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3343,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:14"
																},
																{
																	"expression": {
																		"id": 3346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3344,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3262,
																			"src": "12873:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3347,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3354,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3350,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3256,
																"src": "12916:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3353,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3351,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3366,
														"nodeType": "IfStatement",
														"src": "12912:100:14",
														"trueBody": {
															"id": 3365,
															"nodeType": "Block",
															"src": "12934:78:14",
															"statements": [
																{
																	"expression": {
																		"id": 3359,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3355,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3256,
																			"src": "12952:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3358,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3356,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3357,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3360,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:14"
																},
																{
																	"expression": {
																		"id": 3363,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3361,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3262,
																			"src": "12986:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3362,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3364,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3371,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3367,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3256,
																"src": "13029:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3370,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3377,
														"nodeType": "IfStatement",
														"src": "13025:66:14",
														"trueBody": {
															"id": 3376,
															"nodeType": "Block",
															"src": "13047:44:14",
															"statements": [
																{
																	"expression": {
																		"id": 3374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3372,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3262,
																			"src": "13065:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3373,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3375,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:14"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3379,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3262,
													"src": "13117:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3260,
												"id": 3380,
												"nodeType": "Return",
												"src": "13110:13:14"
											}
										]
									},
									"documentation": {
										"id": 3254,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:14",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3382,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3256,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3382,
												"src": "12229:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:14"
									},
									"returnParameters": {
										"id": 3260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3259,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3382,
												"src": "12267:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:14"
									},
									"scope": 3562,
									"src": "12214:916:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3416,
										"nodeType": "Block",
										"src": "13365:170:14",
										"statements": [
											{
												"id": 3415,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:14",
												"statements": [
													{
														"assignments": [
															3394
														],
														"declarations": [
															{
																"constant": false,
																"id": 3394,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:14",
																"nodeType": "VariableDeclaration",
																"scope": 3415,
																"src": "13399:14:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3393,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3398,
														"initialValue": {
															"arguments": [
																{
																	"id": 3396,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3385,
																	"src": "13422:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3395,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3382,
																	3417
																],
																"referencedDeclaration": 3382,
																"src": "13416:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:14"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3399,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3394,
																"src": "13449:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3408,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3401,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3388,
																						"src": "13476:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2519",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2519",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3400,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3561,
																					"src": "13459:16:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2519_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3402,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:14",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3407,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3405,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3403,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3404,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3394,
																						"src": "13495:6:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3406,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3385,
																					"src": "13504:5:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3410,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:14",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3412,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3392,
														"id": 3414,
														"nodeType": "Return",
														"src": "13442:76:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3383,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:14",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3417,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3385,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3417,
												"src": "13299:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3384,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3388,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 3417,
												"src": "13314:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2519",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3387,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3386,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2519,
														"src": "13314:8:14"
													},
													"referencedDeclaration": 2519,
													"src": "13314:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2519",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:14"
									},
									"returnParameters": {
										"id": 3392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3391,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3417,
												"src": "13356:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:14"
									},
									"scope": 3562,
									"src": "13284:251:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3503,
										"nodeType": "Block",
										"src": "13855:600:14",
										"statements": [
											{
												"assignments": [
													3426
												],
												"declarations": [
													{
														"constant": false,
														"id": 3426,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 3503,
														"src": "13865:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3425,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3428,
												"initialValue": {
													"hexValue": "30",
													"id": 3427,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:14",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:14"
											},
											{
												"id": 3500,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:14",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3429,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3420,
																	"src": "13921:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3443,
														"nodeType": "IfStatement",
														"src": "13917:98:14",
														"trueBody": {
															"id": 3442,
															"nodeType": "Block",
															"src": "13939:76:14",
															"statements": [
																{
																	"expression": {
																		"id": 3436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3434,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3420,
																			"src": "13957:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3435,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3437,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:14"
																},
																{
																	"expression": {
																		"id": 3440,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3438,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3426,
																			"src": "13988:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3439,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3441,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3446,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3444,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3420,
																	"src": "14032:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3458,
														"nodeType": "IfStatement",
														"src": "14028:95:14",
														"trueBody": {
															"id": 3457,
															"nodeType": "Block",
															"src": "14049:74:14",
															"statements": [
																{
																	"expression": {
																		"id": 3451,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3449,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3420,
																			"src": "14067:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3450,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3452,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:14"
																},
																{
																	"expression": {
																		"id": 3455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3453,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3426,
																			"src": "14097:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3454,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3456,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3459,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3420,
																	"src": "14140:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3462,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3473,
														"nodeType": "IfStatement",
														"src": "14136:95:14",
														"trueBody": {
															"id": 3472,
															"nodeType": "Block",
															"src": "14157:74:14",
															"statements": [
																{
																	"expression": {
																		"id": 3466,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3464,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3420,
																			"src": "14175:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3465,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3467,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:14"
																},
																{
																	"expression": {
																		"id": 3470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3468,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3426,
																			"src": "14205:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3469,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3471,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3478,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3476,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3474,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3420,
																	"src": "14248:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3475,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3477,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3488,
														"nodeType": "IfStatement",
														"src": "14244:95:14",
														"trueBody": {
															"id": 3487,
															"nodeType": "Block",
															"src": "14265:74:14",
															"statements": [
																{
																	"expression": {
																		"id": 3481,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3479,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3420,
																			"src": "14283:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3480,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3482,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:14"
																},
																{
																	"expression": {
																		"id": 3485,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3483,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3426,
																			"src": "14313:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3484,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3486,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:14"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3489,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3420,
																	"src": "14356:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3492,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3499,
														"nodeType": "IfStatement",
														"src": "14352:64:14",
														"trueBody": {
															"id": 3498,
															"nodeType": "Block",
															"src": "14372:44:14",
															"statements": [
																{
																	"expression": {
																		"id": 3496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3494,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3426,
																			"src": "14390:6:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3495,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3497,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:14"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3501,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3426,
													"src": "14442:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3424,
												"id": 3502,
												"nodeType": "Return",
												"src": "14435:13:14"
											}
										]
									},
									"documentation": {
										"id": 3418,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:14",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3504,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3420,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3504,
												"src": "13808:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:14"
									},
									"returnParameters": {
										"id": 3424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3423,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3504,
												"src": "13846:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:14"
									},
									"scope": 3562,
									"src": "13792:663:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3541,
										"nodeType": "Block",
										"src": "14692:177:14",
										"statements": [
											{
												"id": 3540,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:14",
												"statements": [
													{
														"assignments": [
															3516
														],
														"declarations": [
															{
																"constant": false,
																"id": 3516,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:14",
																"nodeType": "VariableDeclaration",
																"scope": 3540,
																"src": "14726:14:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3515,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3520,
														"initialValue": {
															"arguments": [
																{
																	"id": 3518,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3507,
																	"src": "14750:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3517,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3504,
																	3542
																],
																"referencedDeclaration": 3504,
																"src": "14743:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:14"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3521,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3516,
																"src": "14777:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3523,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3510,
																						"src": "14804:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2519",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2519",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3522,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3561,
																					"src": "14787:16:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2519_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3524,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:14",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3532,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3530,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3525,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3528,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3526,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3516,
																									"src": "14823:6:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3527,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3529,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3531,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3507,
																					"src": "14838:5:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3535,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3536,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:14",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3534,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3537,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3514,
														"id": 3539,
														"nodeType": "Return",
														"src": "14770:82:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3505,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:14",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3507,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 3542,
												"src": "14626:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3510,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 3542,
												"src": "14641:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2519",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3509,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3508,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2519,
														"src": "14641:8:14"
													},
													"referencedDeclaration": 2519,
													"src": "14641:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2519",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:14"
									},
									"returnParameters": {
										"id": 3514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3513,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3542,
												"src": "14683:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:14"
									},
									"scope": 3562,
									"src": "14610:259:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3560,
										"nodeType": "Block",
										"src": "15067:48:14",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3556,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3553,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3546,
																	"src": "15090:8:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2519",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2519",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3552,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3551,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:14",
																	"typeDescriptions": {}
																}
															},
															"id": 3554,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3557,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3550,
												"id": 3559,
												"nodeType": "Return",
												"src": "15077:31:14"
											}
										]
									},
									"documentation": {
										"id": 3543,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:14",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3561,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3546,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 3561,
												"src": "15019:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2519",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3545,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3544,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2519,
														"src": "15019:8:14"
													},
													"referencedDeclaration": 2519,
													"src": "15019:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2519",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:14"
									},
									"returnParameters": {
										"id": 3550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3561,
												"src": "15061:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3548,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:14"
									},
									"scope": 3562,
									"src": "14993:122:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3563,
							"src": "203:14914:14",
							"usedErrors": [
								2514
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3667
						]
					},
					"id": 3668,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3564,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3565,
								"nodeType": "StructuredDocumentation",
								"src": "135:80:15",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3667,
							"linearizedBaseContracts": [
								3667
							],
							"name": "SignedMath",
							"nameLocation": "224:10:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3582,
										"nodeType": "Block",
										"src": "376:37:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3577,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3575,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3568,
															"src": "393:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3576,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3570,
															"src": "397:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "393:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3579,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3570,
														"src": "405:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "393:13:15",
													"trueExpression": {
														"id": 3578,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3568,
														"src": "401:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3574,
												"id": 3581,
												"nodeType": "Return",
												"src": "386:20:15"
											}
										]
									},
									"documentation": {
										"id": 3566,
										"nodeType": "StructuredDocumentation",
										"src": "241:66:15",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "321:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3568,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "332:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3583,
												"src": "325:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3567,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "325:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3570,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "342:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3583,
												"src": "335:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3569,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:20:15"
									},
									"returnParameters": {
										"id": 3574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3573,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3583,
												"src": "368:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3572,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "368:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "367:8:15"
									},
									"scope": 3667,
									"src": "312:101:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3600,
										"nodeType": "Block",
										"src": "555:37:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3595,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3593,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3586,
															"src": "572:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3594,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3588,
															"src": "576:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "572:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3597,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3588,
														"src": "584:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "572:13:15",
													"trueExpression": {
														"id": 3596,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3586,
														"src": "580:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3592,
												"id": 3599,
												"nodeType": "Return",
												"src": "565:20:15"
											}
										]
									},
									"documentation": {
										"id": 3584,
										"nodeType": "StructuredDocumentation",
										"src": "419:67:15",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "500:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3586,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "511:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3601,
												"src": "504:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3585,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "504:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3588,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "521:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3601,
												"src": "514:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3587,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "503:20:15"
									},
									"returnParameters": {
										"id": 3592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3591,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3601,
												"src": "547:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3590,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "547:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:8:15"
									},
									"scope": 3667,
									"src": "491:101:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3644,
										"nodeType": "Block",
										"src": "797:162:15",
										"statements": [
											{
												"assignments": [
													3612
												],
												"declarations": [
													{
														"constant": false,
														"id": 3612,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "866:1:15",
														"nodeType": "VariableDeclaration",
														"scope": 3644,
														"src": "859:8:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3611,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "859:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3625,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3613,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3604,
																	"src": "871:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3614,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3606,
																	"src": "875:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "871:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3616,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "870:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3622,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3619,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3617,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3604,
																				"src": "882:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3618,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3606,
																				"src": "886:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "882:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3620,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "881:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3621,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "892:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "881:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3623,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "870:24:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:35:15"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3626,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3612,
														"src": "911:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3640,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3634,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3631,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3612,
																						"src": "931:1:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3630,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "923:7:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3629,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "923:7:15",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3632,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "923:10:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3633,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "937:3:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "923:17:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3628,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "916:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3627,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "916:6:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3635,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "916:25:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3638,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3636,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3604,
																				"src": "945:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3637,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3606,
																				"src": "949:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "945:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3639,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "944:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "916:35:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3641,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "915:37:15",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "911:41:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3610,
												"id": 3643,
												"nodeType": "Return",
												"src": "904:48:15"
											}
										]
									},
									"documentation": {
										"id": 3602,
										"nodeType": "StructuredDocumentation",
										"src": "598:126:15",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3645,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "738:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3604,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "753:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3645,
												"src": "746:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3603,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "746:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3606,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "763:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3645,
												"src": "756:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3605,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:20:15"
									},
									"returnParameters": {
										"id": 3610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3609,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3645,
												"src": "789:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3608,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:8:15"
									},
									"scope": 3667,
									"src": "729:230:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3665,
										"nodeType": "Block",
										"src": "1103:158:15",
										"statements": [
											{
												"id": 3664,
												"nodeType": "UncheckedBlock",
												"src": "1113:142:15",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3655,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3648,
																			"src": "1228:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3656,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1233:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1228:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1241:2:15",
																		"subExpression": {
																			"id": 3659,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3648,
																			"src": "1242:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3661,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1228:15:15",
																	"trueExpression": {
																		"id": 3658,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3648,
																		"src": "1237:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3654,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1220:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3653,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1220:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 3662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1220:24:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3652,
														"id": 3663,
														"nodeType": "Return",
														"src": "1213:31:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3646,
										"nodeType": "StructuredDocumentation",
										"src": "965:78:15",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1057:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3648,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1068:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 3666,
												"src": "1061:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3647,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:10:15"
									},
									"returnParameters": {
										"id": 3652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3666,
												"src": "1094:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:15"
									},
									"scope": 3667,
									"src": "1048:213:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3668,
							"src": "216:1047:15",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:1155:15"
				},
				"id": 15
			},
			"contracts/MyToken.sol": {
				"ast": {
					"absolutePath": "contracts/MyToken.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1725
						],
						"ERC165Upgradeable": [
							1941
						],
						"ERC721BurnableUpgradeable": [
							1625
						],
						"ERC721PausableUpgradeable": [
							1679
						],
						"ERC721Upgradeable": [
							1580
						],
						"IERC165": [
							2508
						],
						"IERC721": [
							2195
						],
						"IERC721Errors": [
							2031
						],
						"IERC721Metadata": [
							2241
						],
						"IERC721Receiver": [
							2213
						],
						"Initializable": [
							448
						],
						"MyToken": [
							3771
						],
						"OwnableUpgradeable": [
							194
						],
						"PausableUpgradeable": [
							1901
						],
						"Strings": [
							2496
						]
					},
					"id": 3772,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3669,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:16"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol",
							"id": 3670,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3772,
							"sourceUnit": 1581,
							"src": "58:80:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol",
							"id": 3671,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3772,
							"sourceUnit": 1680,
							"src": "139:99:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 3672,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3772,
							"sourceUnit": 195,
							"src": "239:75:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
							"id": 3673,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3772,
							"sourceUnit": 1626,
							"src": "315:99:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"id": 3674,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3772,
							"sourceUnit": 449,
							"src": "415:75:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3675,
										"name": "Initializable",
										"nameLocations": [
											"512:13:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 448,
										"src": "512:13:16"
									},
									"id": 3676,
									"nodeType": "InheritanceSpecifier",
									"src": "512:13:16"
								},
								{
									"baseName": {
										"id": 3677,
										"name": "ERC721Upgradeable",
										"nameLocations": [
											"527:17:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1580,
										"src": "527:17:16"
									},
									"id": 3678,
									"nodeType": "InheritanceSpecifier",
									"src": "527:17:16"
								},
								{
									"baseName": {
										"id": 3679,
										"name": "ERC721PausableUpgradeable",
										"nameLocations": [
											"546:25:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1679,
										"src": "546:25:16"
									},
									"id": 3680,
									"nodeType": "InheritanceSpecifier",
									"src": "546:25:16"
								},
								{
									"baseName": {
										"id": 3681,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"573:18:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 194,
										"src": "573:18:16"
									},
									"id": 3682,
									"nodeType": "InheritanceSpecifier",
									"src": "573:18:16"
								},
								{
									"baseName": {
										"id": 3683,
										"name": "ERC721BurnableUpgradeable",
										"nameLocations": [
											"593:25:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1625,
										"src": "593:25:16"
									},
									"id": 3684,
									"nodeType": "InheritanceSpecifier",
									"src": "593:25:16"
								}
							],
							"canonicalName": "MyToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3771,
							"linearizedBaseContracts": [
								3771,
								1625,
								194,
								1679,
								1901,
								1580,
								2031,
								2241,
								2195,
								1941,
								2508,
								1725,
								448
							],
							"name": "MyToken",
							"nameLocation": "501:7:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3691,
										"nodeType": "Block",
										"src": "692:39:16",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3688,
														"name": "_disableInitializers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "702:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "702:22:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3690,
												"nodeType": "ExpressionStatement",
												"src": "702:22:16"
											}
										]
									},
									"documentation": {
										"id": 3685,
										"nodeType": "StructuredDocumentation",
										"src": "625:48:16",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 3692,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3686,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "689:2:16"
									},
									"returnParameters": {
										"id": 3687,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "692:0:16"
									},
									"scope": 3771,
									"src": "678:53:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3714,
										"nodeType": "Block",
										"src": "798:152:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "4d79546f6b656e",
															"id": 3700,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "822:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245c734e6d4ec044daf7beffa09d54d4bafba490113c199734d790b04a7390e5",
																"typeString": "literal_string \"MyToken\""
															},
															"value": "MyToken"
														},
														{
															"hexValue": "4d544b",
															"id": 3701,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "833:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_793539e36336d70961c91bdb898dff4b065dbb5ef5ac709025f5b68be91dd01e",
																"typeString": "literal_string \"MTK\""
															},
															"value": "MTK"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_245c734e6d4ec044daf7beffa09d54d4bafba490113c199734d790b04a7390e5",
																"typeString": "literal_string \"MyToken\""
															},
															{
																"typeIdentifier": "t_stringliteral_793539e36336d70961c91bdb898dff4b065dbb5ef5ac709025f5b68be91dd01e",
																"typeString": "literal_string \"MTK\""
															}
														],
														"id": 3699,
														"name": "__ERC721_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 535,
														"src": "808:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 3702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "808:31:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3703,
												"nodeType": "ExpressionStatement",
												"src": "808:31:16"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3704,
														"name": "__ERC721Pausable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1649,
														"src": "849:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "849:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3706,
												"nodeType": "ExpressionStatement",
												"src": "849:23:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3708,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3694,
															"src": "897:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3707,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "882:14:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 3709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "882:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3710,
												"nodeType": "ExpressionStatement",
												"src": "882:28:16"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3711,
														"name": "__ERC721Burnable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1601,
														"src": "920:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "920:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3713,
												"nodeType": "ExpressionStatement",
												"src": "920:23:16"
											}
										]
									},
									"functionSelector": "c4d66de8",
									"id": 3715,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3697,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3696,
												"name": "initializer",
												"nameLocations": [
													"779:11:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 302,
												"src": "779:11:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "779:11:16"
										}
									],
									"name": "initialize",
									"nameLocation": "746:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3694,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "765:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 3715,
												"src": "757:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3693,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "757:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "756:22:16"
									},
									"returnParameters": {
										"id": 3698,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "798:0:16"
									},
									"scope": 3771,
									"src": "737:213:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3723,
										"nodeType": "Block",
										"src": "990:25:16",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3720,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1876,
														"src": "1000:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1000:8:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3722,
												"nodeType": "ExpressionStatement",
												"src": "1000:8:16"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 3724,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3718,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3717,
												"name": "onlyOwner",
												"nameLocations": [
													"980:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "980:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "980:9:16"
										}
									],
									"name": "pause",
									"nameLocation": "965:5:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "970:2:16"
									},
									"returnParameters": {
										"id": 3719,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "990:0:16"
									},
									"scope": 3771,
									"src": "956:59:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3732,
										"nodeType": "Block",
										"src": "1057:27:16",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3729,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1900,
														"src": "1067:8:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1067:10:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3731,
												"nodeType": "ExpressionStatement",
												"src": "1067:10:16"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 3733,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3727,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3726,
												"name": "onlyOwner",
												"nameLocations": [
													"1047:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "1047:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "1047:9:16"
										}
									],
									"name": "unpause",
									"nameLocation": "1030:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3725,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1037:2:16"
									},
									"returnParameters": {
										"id": 3728,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1057:0:16"
									},
									"scope": 3771,
									"src": "1021:63:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3747,
										"nodeType": "Block",
										"src": "1154:39:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3743,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3735,
															"src": "1174:2:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3744,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3737,
															"src": "1178:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3742,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1186,
															1212
														],
														"referencedDeclaration": 1186,
														"src": "1164:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1164:22:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3746,
												"nodeType": "ExpressionStatement",
												"src": "1164:22:16"
											}
										]
									},
									"functionSelector": "a1448194",
									"id": 3748,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3740,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3739,
												"name": "onlyOwner",
												"nameLocations": [
													"1144:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "1144:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "1144:9:16"
										}
									],
									"name": "safeMint",
									"nameLocation": "1099:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3735,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1116:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 3748,
												"src": "1108:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3734,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1108:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3737,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1128:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 3748,
												"src": "1120:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3736,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1120:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1107:29:16"
									},
									"returnParameters": {
										"id": 3741,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1154:0:16"
									},
									"scope": 3771,
									"src": "1090:103:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1121,
										1678
									],
									"body": {
										"id": 3769,
										"nodeType": "Block",
										"src": "1437:56:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3764,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3750,
															"src": "1468:2:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3765,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3752,
															"src": "1472:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3766,
															"name": "auth",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3754,
															"src": "1481:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3762,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1454:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_MyToken_$3771_$",
																"typeString": "type(contract super MyToken)"
															}
														},
														"id": 3763,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1460:7:16",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1678,
														"src": "1454:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 3767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1454:32:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 3761,
												"id": 3768,
												"nodeType": "Return",
												"src": "1447:39:16"
											}
										]
									},
									"id": 3770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "1276:7:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3758,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3756,
												"name": "ERC721Upgradeable",
												"nameLocations": [
													"1361:17:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1580,
												"src": "1361:17:16"
											},
											{
												"id": 3757,
												"name": "ERC721PausableUpgradeable",
												"nameLocations": [
													"1380:25:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1679,
												"src": "1380:25:16"
											}
										],
										"src": "1352:54:16"
									},
									"parameters": {
										"id": 3755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3750,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1292:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 3770,
												"src": "1284:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3749,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1284:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3752,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1304:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 3770,
												"src": "1296:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3751,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1296:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3754,
												"mutability": "mutable",
												"name": "auth",
												"nameLocation": "1321:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 3770,
												"src": "1313:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3753,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1313:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1283:43:16"
									},
									"returnParameters": {
										"id": 3761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3760,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3770,
												"src": "1424:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1423:9:16"
									},
									"scope": 3771,
									"src": "1267:226:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3772,
							"src": "492:1003:16",
							"usedErrors": [
								30,
								35,
								211,
								214,
								1764,
								1767,
								1989,
								1994,
								2003,
								2008,
								2013,
								2020,
								2025,
								2030
							],
							"usedEvents": [
								41,
								219,
								1756,
								1761,
								2094,
								2103,
								2112
							]
						}
					],
					"src": "32:1464:16"
				},
				"id": 16
			}
		}
	}
}